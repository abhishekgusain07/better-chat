import { PolarCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import { HTTPValidationError } from "../models/errors/httpvalidationerror.js";
import { PolarError } from "../models/errors/polarerror.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { CustomerPortalCustomersListPaymentMethodsRequest, CustomerPortalCustomersListPaymentMethodsResponse, CustomerPortalCustomersListPaymentMethodsSecurity } from "../models/operations/customerportalcustomerslistpaymentmethods.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
import { PageIterator } from "../types/operations.js";
/**
 * List Customer Payment Methods
 *
 * @remarks
 * Get saved payment methods of the authenticated customer.
 *
 * **Scopes**: `customer_portal:read` `customer_portal:write`
 */
export declare function customerPortalCustomersListPaymentMethods(client: PolarCore, security: CustomerPortalCustomersListPaymentMethodsSecurity, request: CustomerPortalCustomersListPaymentMethodsRequest, options?: RequestOptions): APIPromise<PageIterator<Result<CustomerPortalCustomersListPaymentMethodsResponse, HTTPValidationError | PolarError | ResponseValidationError | ConnectionError | RequestAbortedError | RequestTimeoutError | InvalidRequestError | UnexpectedClientError | SDKValidationError>, {
    page: number;
}>>;
//# sourceMappingURL=customerPortalCustomersListPaymentMethods.d.ts.map