/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { ValidationError$inboundSchema, ValidationError$outboundSchema, } from "../components/validationerror.js";
import { PolarError } from "./polarerror.js";
export class HTTPValidationError extends PolarError {
    constructor(err, httpMeta) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message, httpMeta);
        this.data$ = err;
        if (err.detail != null)
            this.detail = err.detail;
        this.name = "HTTPValidationError";
    }
}
/** @internal */
export const HTTPValidationError$inboundSchema = z.object({
    detail: z.array(ValidationError$inboundSchema).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
})
    .transform((v) => {
    return new HTTPValidationError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
    });
});
/** @internal */
export const HTTPValidationError$outboundSchema = z.instanceof(HTTPValidationError)
    .transform(v => v.data$)
    .pipe(z.object({
    detail: z.array(ValidationError$outboundSchema).optional(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var HTTPValidationError$;
(function (HTTPValidationError$) {
    /** @deprecated use `HTTPValidationError$inboundSchema` instead. */
    HTTPValidationError$.inboundSchema = HTTPValidationError$inboundSchema;
    /** @deprecated use `HTTPValidationError$outboundSchema` instead. */
    HTTPValidationError$.outboundSchema = HTTPValidationError$outboundSchema;
})(HTTPValidationError$ || (HTTPValidationError$ = {}));
//# sourceMappingURL=httpvalidationerror.js.map