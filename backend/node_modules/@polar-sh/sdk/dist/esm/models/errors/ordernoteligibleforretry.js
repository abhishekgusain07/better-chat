/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { PolarError } from "./polarerror.js";
export class OrderNotEligibleForRetry extends PolarError {
    constructor(err, httpMeta) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message, httpMeta);
        this.data$ = err;
        this.error = err.error;
        this.detail = err.detail;
        this.name = "OrderNotEligibleForRetry";
    }
}
/** @internal */
export const OrderNotEligibleForRetry$inboundSchema = z.object({
    error: z.literal("OrderNotEligibleForRetry"),
    detail: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
})
    .transform((v) => {
    return new OrderNotEligibleForRetry(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
    });
});
/** @internal */
export const OrderNotEligibleForRetry$outboundSchema = z.instanceof(OrderNotEligibleForRetry)
    .transform(v => v.data$)
    .pipe(z.object({
    error: z.literal("OrderNotEligibleForRetry"),
    detail: z.string(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderNotEligibleForRetry$;
(function (OrderNotEligibleForRetry$) {
    /** @deprecated use `OrderNotEligibleForRetry$inboundSchema` instead. */
    OrderNotEligibleForRetry$.inboundSchema = OrderNotEligibleForRetry$inboundSchema;
    /** @deprecated use `OrderNotEligibleForRetry$outboundSchema` instead. */
    OrderNotEligibleForRetry$.outboundSchema = OrderNotEligibleForRetry$outboundSchema;
})(OrderNotEligibleForRetry$ || (OrderNotEligibleForRetry$ = {}));
//# sourceMappingURL=ordernoteligibleforretry.js.map