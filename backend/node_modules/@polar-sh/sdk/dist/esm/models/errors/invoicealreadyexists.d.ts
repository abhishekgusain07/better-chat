import * as z from "zod";
import { PolarError } from "./polarerror.js";
export type InvoiceAlreadyExistsData = {
    error: "InvoiceAlreadyExists";
    detail: string;
};
export declare class InvoiceAlreadyExists extends PolarError {
    error: "InvoiceAlreadyExists";
    detail: string;
    /** The original data that was passed to this error instance. */
    data$: InvoiceAlreadyExistsData;
    constructor(err: InvoiceAlreadyExistsData, httpMeta: {
        response: Response;
        request: Request;
        body: string;
    });
}
/** @internal */
export declare const InvoiceAlreadyExists$inboundSchema: z.ZodType<InvoiceAlreadyExists, z.ZodTypeDef, unknown>;
/** @internal */
export type InvoiceAlreadyExists$Outbound = {
    error: "InvoiceAlreadyExists";
    detail: string;
};
/** @internal */
export declare const InvoiceAlreadyExists$outboundSchema: z.ZodType<InvoiceAlreadyExists$Outbound, z.ZodTypeDef, InvoiceAlreadyExists>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InvoiceAlreadyExists$ {
    /** @deprecated use `InvoiceAlreadyExists$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InvoiceAlreadyExists, z.ZodTypeDef, unknown>;
    /** @deprecated use `InvoiceAlreadyExists$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InvoiceAlreadyExists$Outbound, z.ZodTypeDef, InvoiceAlreadyExists>;
    /** @deprecated use `InvoiceAlreadyExists$Outbound` instead. */
    type Outbound = InvoiceAlreadyExists$Outbound;
}
//# sourceMappingURL=invoicealreadyexists.d.ts.map