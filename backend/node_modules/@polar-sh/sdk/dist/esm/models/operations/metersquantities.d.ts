import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { MetadataQuery, MetadataQuery$Outbound } from "../components/subscriptionslist.js";
import { TimeInterval } from "../components/timeinterval.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Filter by customer ID.
 */
export type MetersQuantitiesQueryParamCustomerIDFilter = string | Array<string>;
/**
 * Filter by external customer ID.
 */
export type MetersQuantitiesQueryParamExternalCustomerIDFilter = string | Array<string>;
export type MetersQuantitiesRequest = {
    /**
     * The meter ID.
     */
    id: string;
    /**
     * Start timestamp.
     */
    startTimestamp: Date;
    /**
     * End timestamp.
     */
    endTimestamp: Date;
    /**
     * Interval between two timestamps.
     */
    interval: TimeInterval;
    /**
     * Filter by customer ID.
     */
    customerId?: string | Array<string> | null | undefined;
    /**
     * Filter by external customer ID.
     */
    externalCustomerId?: string | Array<string> | null | undefined;
    /**
     * Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`.
     */
    metadata?: {
        [k: string]: MetadataQuery;
    } | null | undefined;
};
/** @internal */
export declare const MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema: z.ZodType<MetersQuantitiesQueryParamCustomerIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type MetersQuantitiesQueryParamCustomerIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema: z.ZodType<MetersQuantitiesQueryParamCustomerIDFilter$Outbound, z.ZodTypeDef, MetersQuantitiesQueryParamCustomerIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetersQuantitiesQueryParamCustomerIDFilter$ {
    /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetersQuantitiesQueryParamCustomerIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetersQuantitiesQueryParamCustomerIDFilter$Outbound, z.ZodTypeDef, MetersQuantitiesQueryParamCustomerIDFilter>;
    /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$Outbound` instead. */
    type Outbound = MetersQuantitiesQueryParamCustomerIDFilter$Outbound;
}
export declare function metersQuantitiesQueryParamCustomerIDFilterToJSON(metersQuantitiesQueryParamCustomerIDFilter: MetersQuantitiesQueryParamCustomerIDFilter): string;
export declare function metersQuantitiesQueryParamCustomerIDFilterFromJSON(jsonString: string): SafeParseResult<MetersQuantitiesQueryParamCustomerIDFilter, SDKValidationError>;
/** @internal */
export declare const MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema: z.ZodType<MetersQuantitiesQueryParamExternalCustomerIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type MetersQuantitiesQueryParamExternalCustomerIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema: z.ZodType<MetersQuantitiesQueryParamExternalCustomerIDFilter$Outbound, z.ZodTypeDef, MetersQuantitiesQueryParamExternalCustomerIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetersQuantitiesQueryParamExternalCustomerIDFilter$ {
    /** @deprecated use `MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetersQuantitiesQueryParamExternalCustomerIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetersQuantitiesQueryParamExternalCustomerIDFilter$Outbound, z.ZodTypeDef, MetersQuantitiesQueryParamExternalCustomerIDFilter>;
    /** @deprecated use `MetersQuantitiesQueryParamExternalCustomerIDFilter$Outbound` instead. */
    type Outbound = MetersQuantitiesQueryParamExternalCustomerIDFilter$Outbound;
}
export declare function metersQuantitiesQueryParamExternalCustomerIDFilterToJSON(metersQuantitiesQueryParamExternalCustomerIDFilter: MetersQuantitiesQueryParamExternalCustomerIDFilter): string;
export declare function metersQuantitiesQueryParamExternalCustomerIDFilterFromJSON(jsonString: string): SafeParseResult<MetersQuantitiesQueryParamExternalCustomerIDFilter, SDKValidationError>;
/** @internal */
export declare const MetersQuantitiesRequest$inboundSchema: z.ZodType<MetersQuantitiesRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type MetersQuantitiesRequest$Outbound = {
    id: string;
    start_timestamp: string;
    end_timestamp: string;
    interval: string;
    customer_id?: string | Array<string> | null | undefined;
    external_customer_id?: string | Array<string> | null | undefined;
    metadata?: {
        [k: string]: MetadataQuery$Outbound;
    } | null | undefined;
};
/** @internal */
export declare const MetersQuantitiesRequest$outboundSchema: z.ZodType<MetersQuantitiesRequest$Outbound, z.ZodTypeDef, MetersQuantitiesRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetersQuantitiesRequest$ {
    /** @deprecated use `MetersQuantitiesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetersQuantitiesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetersQuantitiesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetersQuantitiesRequest$Outbound, z.ZodTypeDef, MetersQuantitiesRequest>;
    /** @deprecated use `MetersQuantitiesRequest$Outbound` instead. */
    type Outbound = MetersQuantitiesRequest$Outbound;
}
export declare function metersQuantitiesRequestToJSON(metersQuantitiesRequest: MetersQuantitiesRequest): string;
export declare function metersQuantitiesRequestFromJSON(jsonString: string): SafeParseResult<MetersQuantitiesRequest, SDKValidationError>;
//# sourceMappingURL=metersquantities.d.ts.map