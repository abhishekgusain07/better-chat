/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ListResource$inboundSchema, ListResource$outboundSchema, } from "../components/listresource.js";
import { PaymentSortProperty$inboundSchema, PaymentSortProperty$outboundSchema, } from "../components/paymentsortproperty.js";
import { PaymentStatus$inboundSchema, PaymentStatus$outboundSchema, } from "../components/paymentstatus.js";
/** @internal */
export const PaymentsListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const PaymentsListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaymentsListQueryParamOrganizationIDFilter$;
(function (PaymentsListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `PaymentsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    PaymentsListQueryParamOrganizationIDFilter$.inboundSchema = PaymentsListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `PaymentsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    PaymentsListQueryParamOrganizationIDFilter$.outboundSchema = PaymentsListQueryParamOrganizationIDFilter$outboundSchema;
})(PaymentsListQueryParamOrganizationIDFilter$ || (PaymentsListQueryParamOrganizationIDFilter$ = {}));
export function paymentsListQueryParamOrganizationIDFilterToJSON(paymentsListQueryParamOrganizationIDFilter) {
    return JSON.stringify(PaymentsListQueryParamOrganizationIDFilter$outboundSchema.parse(paymentsListQueryParamOrganizationIDFilter));
}
export function paymentsListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaymentsListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaymentsListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const PaymentsListQueryParamCheckoutIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const PaymentsListQueryParamCheckoutIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaymentsListQueryParamCheckoutIDFilter$;
(function (PaymentsListQueryParamCheckoutIDFilter$) {
    /** @deprecated use `PaymentsListQueryParamCheckoutIDFilter$inboundSchema` instead. */
    PaymentsListQueryParamCheckoutIDFilter$.inboundSchema = PaymentsListQueryParamCheckoutIDFilter$inboundSchema;
    /** @deprecated use `PaymentsListQueryParamCheckoutIDFilter$outboundSchema` instead. */
    PaymentsListQueryParamCheckoutIDFilter$.outboundSchema = PaymentsListQueryParamCheckoutIDFilter$outboundSchema;
})(PaymentsListQueryParamCheckoutIDFilter$ || (PaymentsListQueryParamCheckoutIDFilter$ = {}));
export function paymentsListQueryParamCheckoutIDFilterToJSON(paymentsListQueryParamCheckoutIDFilter) {
    return JSON.stringify(PaymentsListQueryParamCheckoutIDFilter$outboundSchema.parse(paymentsListQueryParamCheckoutIDFilter));
}
export function paymentsListQueryParamCheckoutIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaymentsListQueryParamCheckoutIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaymentsListQueryParamCheckoutIDFilter' from JSON`);
}
/** @internal */
export const PaymentsListQueryParamOrderIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const PaymentsListQueryParamOrderIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaymentsListQueryParamOrderIDFilter$;
(function (PaymentsListQueryParamOrderIDFilter$) {
    /** @deprecated use `PaymentsListQueryParamOrderIDFilter$inboundSchema` instead. */
    PaymentsListQueryParamOrderIDFilter$.inboundSchema = PaymentsListQueryParamOrderIDFilter$inboundSchema;
    /** @deprecated use `PaymentsListQueryParamOrderIDFilter$outboundSchema` instead. */
    PaymentsListQueryParamOrderIDFilter$.outboundSchema = PaymentsListQueryParamOrderIDFilter$outboundSchema;
})(PaymentsListQueryParamOrderIDFilter$ || (PaymentsListQueryParamOrderIDFilter$ = {}));
export function paymentsListQueryParamOrderIDFilterToJSON(paymentsListQueryParamOrderIDFilter) {
    return JSON.stringify(PaymentsListQueryParamOrderIDFilter$outboundSchema.parse(paymentsListQueryParamOrderIDFilter));
}
export function paymentsListQueryParamOrderIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaymentsListQueryParamOrderIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaymentsListQueryParamOrderIDFilter' from JSON`);
}
/** @internal */
export const QueryParamStatusFilter$inboundSchema = z.union([
    PaymentStatus$inboundSchema,
    z.array(PaymentStatus$inboundSchema),
]);
/** @internal */
export const QueryParamStatusFilter$outboundSchema = z.union([
    PaymentStatus$outboundSchema,
    z.array(PaymentStatus$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamStatusFilter$;
(function (QueryParamStatusFilter$) {
    /** @deprecated use `QueryParamStatusFilter$inboundSchema` instead. */
    QueryParamStatusFilter$.inboundSchema = QueryParamStatusFilter$inboundSchema;
    /** @deprecated use `QueryParamStatusFilter$outboundSchema` instead. */
    QueryParamStatusFilter$.outboundSchema = QueryParamStatusFilter$outboundSchema;
})(QueryParamStatusFilter$ || (QueryParamStatusFilter$ = {}));
export function queryParamStatusFilterToJSON(queryParamStatusFilter) {
    return JSON.stringify(QueryParamStatusFilter$outboundSchema.parse(queryParamStatusFilter));
}
export function queryParamStatusFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryParamStatusFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamStatusFilter' from JSON`);
}
/** @internal */
export const MethodFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const MethodFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MethodFilter$;
(function (MethodFilter$) {
    /** @deprecated use `MethodFilter$inboundSchema` instead. */
    MethodFilter$.inboundSchema = MethodFilter$inboundSchema;
    /** @deprecated use `MethodFilter$outboundSchema` instead. */
    MethodFilter$.outboundSchema = MethodFilter$outboundSchema;
})(MethodFilter$ || (MethodFilter$ = {}));
export function methodFilterToJSON(methodFilter) {
    return JSON.stringify(MethodFilter$outboundSchema.parse(methodFilter));
}
export function methodFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MethodFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MethodFilter' from JSON`);
}
/** @internal */
export const CustomerEmailFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CustomerEmailFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerEmailFilter$;
(function (CustomerEmailFilter$) {
    /** @deprecated use `CustomerEmailFilter$inboundSchema` instead. */
    CustomerEmailFilter$.inboundSchema = CustomerEmailFilter$inboundSchema;
    /** @deprecated use `CustomerEmailFilter$outboundSchema` instead. */
    CustomerEmailFilter$.outboundSchema = CustomerEmailFilter$outboundSchema;
})(CustomerEmailFilter$ || (CustomerEmailFilter$ = {}));
export function customerEmailFilterToJSON(customerEmailFilter) {
    return JSON.stringify(CustomerEmailFilter$outboundSchema.parse(customerEmailFilter));
}
export function customerEmailFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerEmailFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerEmailFilter' from JSON`);
}
/** @internal */
export const PaymentsListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    checkout_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    order_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    status: z.nullable(z.union([
        PaymentStatus$inboundSchema,
        z.array(PaymentStatus$inboundSchema),
    ])).optional(),
    method: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    customer_email: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(PaymentSortProperty$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "checkout_id": "checkoutId",
        "order_id": "orderId",
        "customer_email": "customerEmail",
    });
});
/** @internal */
export const PaymentsListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    checkoutId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    orderId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    status: z.nullable(z.union([
        PaymentStatus$outboundSchema,
        z.array(PaymentStatus$outboundSchema),
    ])).optional(),
    method: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    customerEmail: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(PaymentSortProperty$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        checkoutId: "checkout_id",
        orderId: "order_id",
        customerEmail: "customer_email",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaymentsListRequest$;
(function (PaymentsListRequest$) {
    /** @deprecated use `PaymentsListRequest$inboundSchema` instead. */
    PaymentsListRequest$.inboundSchema = PaymentsListRequest$inboundSchema;
    /** @deprecated use `PaymentsListRequest$outboundSchema` instead. */
    PaymentsListRequest$.outboundSchema = PaymentsListRequest$outboundSchema;
})(PaymentsListRequest$ || (PaymentsListRequest$ = {}));
export function paymentsListRequestToJSON(paymentsListRequest) {
    return JSON.stringify(PaymentsListRequest$outboundSchema.parse(paymentsListRequest));
}
export function paymentsListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaymentsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaymentsListRequest' from JSON`);
}
/** @internal */
export const PaymentsListResponse$inboundSchema = z.object({
    Result: ListResource$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const PaymentsListResponse$outboundSchema = z.object({
    result: ListResource$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaymentsListResponse$;
(function (PaymentsListResponse$) {
    /** @deprecated use `PaymentsListResponse$inboundSchema` instead. */
    PaymentsListResponse$.inboundSchema = PaymentsListResponse$inboundSchema;
    /** @deprecated use `PaymentsListResponse$outboundSchema` instead. */
    PaymentsListResponse$.outboundSchema = PaymentsListResponse$outboundSchema;
})(PaymentsListResponse$ || (PaymentsListResponse$ = {}));
export function paymentsListResponseToJSON(paymentsListResponse) {
    return JSON.stringify(PaymentsListResponse$outboundSchema.parse(paymentsListResponse));
}
export function paymentsListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaymentsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaymentsListResponse' from JSON`);
}
//# sourceMappingURL=paymentslist.js.map