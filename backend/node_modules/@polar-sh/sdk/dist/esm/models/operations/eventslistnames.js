/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { EventNamesSortProperty$inboundSchema, EventNamesSortProperty$outboundSchema, } from "../components/eventnamessortproperty.js";
import { EventSource$inboundSchema, EventSource$outboundSchema, } from "../components/eventsource.js";
import { ListResourceEventName$inboundSchema, ListResourceEventName$outboundSchema, } from "../components/listresourceeventname.js";
/** @internal */
export const EventsListNamesQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const EventsListNamesQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsListNamesQueryParamOrganizationIDFilter$;
(function (EventsListNamesQueryParamOrganizationIDFilter$) {
    /** @deprecated use `EventsListNamesQueryParamOrganizationIDFilter$inboundSchema` instead. */
    EventsListNamesQueryParamOrganizationIDFilter$.inboundSchema = EventsListNamesQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `EventsListNamesQueryParamOrganizationIDFilter$outboundSchema` instead. */
    EventsListNamesQueryParamOrganizationIDFilter$.outboundSchema = EventsListNamesQueryParamOrganizationIDFilter$outboundSchema;
})(EventsListNamesQueryParamOrganizationIDFilter$ || (EventsListNamesQueryParamOrganizationIDFilter$ = {}));
export function eventsListNamesQueryParamOrganizationIDFilterToJSON(eventsListNamesQueryParamOrganizationIDFilter) {
    return JSON.stringify(EventsListNamesQueryParamOrganizationIDFilter$outboundSchema.parse(eventsListNamesQueryParamOrganizationIDFilter));
}
export function eventsListNamesQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsListNamesQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListNamesQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const EventsListNamesQueryParamCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const EventsListNamesQueryParamCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsListNamesQueryParamCustomerIDFilter$;
(function (EventsListNamesQueryParamCustomerIDFilter$) {
    /** @deprecated use `EventsListNamesQueryParamCustomerIDFilter$inboundSchema` instead. */
    EventsListNamesQueryParamCustomerIDFilter$.inboundSchema = EventsListNamesQueryParamCustomerIDFilter$inboundSchema;
    /** @deprecated use `EventsListNamesQueryParamCustomerIDFilter$outboundSchema` instead. */
    EventsListNamesQueryParamCustomerIDFilter$.outboundSchema = EventsListNamesQueryParamCustomerIDFilter$outboundSchema;
})(EventsListNamesQueryParamCustomerIDFilter$ || (EventsListNamesQueryParamCustomerIDFilter$ = {}));
export function eventsListNamesQueryParamCustomerIDFilterToJSON(eventsListNamesQueryParamCustomerIDFilter) {
    return JSON.stringify(EventsListNamesQueryParamCustomerIDFilter$outboundSchema.parse(eventsListNamesQueryParamCustomerIDFilter));
}
export function eventsListNamesQueryParamCustomerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsListNamesQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListNamesQueryParamCustomerIDFilter' from JSON`);
}
/** @internal */
export const EventsListNamesQueryParamExternalCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const EventsListNamesQueryParamExternalCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsListNamesQueryParamExternalCustomerIDFilter$;
(function (EventsListNamesQueryParamExternalCustomerIDFilter$) {
    /** @deprecated use `EventsListNamesQueryParamExternalCustomerIDFilter$inboundSchema` instead. */
    EventsListNamesQueryParamExternalCustomerIDFilter$.inboundSchema = EventsListNamesQueryParamExternalCustomerIDFilter$inboundSchema;
    /** @deprecated use `EventsListNamesQueryParamExternalCustomerIDFilter$outboundSchema` instead. */
    EventsListNamesQueryParamExternalCustomerIDFilter$.outboundSchema = EventsListNamesQueryParamExternalCustomerIDFilter$outboundSchema;
})(EventsListNamesQueryParamExternalCustomerIDFilter$ || (EventsListNamesQueryParamExternalCustomerIDFilter$ = {}));
export function eventsListNamesQueryParamExternalCustomerIDFilterToJSON(eventsListNamesQueryParamExternalCustomerIDFilter) {
    return JSON.stringify(EventsListNamesQueryParamExternalCustomerIDFilter$outboundSchema.parse(eventsListNamesQueryParamExternalCustomerIDFilter));
}
export function eventsListNamesQueryParamExternalCustomerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsListNamesQueryParamExternalCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListNamesQueryParamExternalCustomerIDFilter' from JSON`);
}
/** @internal */
export const QueryParamSourceFilter$inboundSchema = z.union([EventSource$inboundSchema, z.array(EventSource$inboundSchema)]);
/** @internal */
export const QueryParamSourceFilter$outboundSchema = z.union([EventSource$outboundSchema, z.array(EventSource$outboundSchema)]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamSourceFilter$;
(function (QueryParamSourceFilter$) {
    /** @deprecated use `QueryParamSourceFilter$inboundSchema` instead. */
    QueryParamSourceFilter$.inboundSchema = QueryParamSourceFilter$inboundSchema;
    /** @deprecated use `QueryParamSourceFilter$outboundSchema` instead. */
    QueryParamSourceFilter$.outboundSchema = QueryParamSourceFilter$outboundSchema;
})(QueryParamSourceFilter$ || (QueryParamSourceFilter$ = {}));
export function queryParamSourceFilterToJSON(queryParamSourceFilter) {
    return JSON.stringify(QueryParamSourceFilter$outboundSchema.parse(queryParamSourceFilter));
}
export function queryParamSourceFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryParamSourceFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamSourceFilter' from JSON`);
}
/** @internal */
export const EventsListNamesRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    source: z.nullable(z.union([EventSource$inboundSchema, z.array(EventSource$inboundSchema)])).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(EventNamesSortProperty$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
    });
});
/** @internal */
export const EventsListNamesRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    source: z.nullable(z.union([EventSource$outboundSchema, z.array(EventSource$outboundSchema)])).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(EventNamesSortProperty$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsListNamesRequest$;
(function (EventsListNamesRequest$) {
    /** @deprecated use `EventsListNamesRequest$inboundSchema` instead. */
    EventsListNamesRequest$.inboundSchema = EventsListNamesRequest$inboundSchema;
    /** @deprecated use `EventsListNamesRequest$outboundSchema` instead. */
    EventsListNamesRequest$.outboundSchema = EventsListNamesRequest$outboundSchema;
})(EventsListNamesRequest$ || (EventsListNamesRequest$ = {}));
export function eventsListNamesRequestToJSON(eventsListNamesRequest) {
    return JSON.stringify(EventsListNamesRequest$outboundSchema.parse(eventsListNamesRequest));
}
export function eventsListNamesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsListNamesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListNamesRequest' from JSON`);
}
/** @internal */
export const EventsListNamesResponse$inboundSchema = z.object({
    Result: ListResourceEventName$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const EventsListNamesResponse$outboundSchema = z.object({
    result: ListResourceEventName$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsListNamesResponse$;
(function (EventsListNamesResponse$) {
    /** @deprecated use `EventsListNamesResponse$inboundSchema` instead. */
    EventsListNamesResponse$.inboundSchema = EventsListNamesResponse$inboundSchema;
    /** @deprecated use `EventsListNamesResponse$outboundSchema` instead. */
    EventsListNamesResponse$.outboundSchema = EventsListNamesResponse$outboundSchema;
})(EventsListNamesResponse$ || (EventsListNamesResponse$ = {}));
export function eventsListNamesResponseToJSON(eventsListNamesResponse) {
    return JSON.stringify(EventsListNamesResponse$outboundSchema.parse(eventsListNamesResponse));
}
export function eventsListNamesResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsListNamesResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListNamesResponse' from JSON`);
}
//# sourceMappingURL=eventslistnames.js.map