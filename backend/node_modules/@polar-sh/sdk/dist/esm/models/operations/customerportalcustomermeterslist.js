/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomerCustomerMeterSortProperty$inboundSchema, CustomerCustomerMeterSortProperty$outboundSchema, } from "../components/customercustomermetersortproperty.js";
import { ListResourceCustomerCustomerMeter$inboundSchema, ListResourceCustomerCustomerMeter$outboundSchema, } from "../components/listresourcecustomercustomermeter.js";
/** @internal */
export const CustomerPortalCustomerMetersListSecurity$inboundSchema = z.object({
    customer_session: z.string(),
}).transform((v) => {
    return remap$(v, {
        "customer_session": "customerSession",
    });
});
/** @internal */
export const CustomerPortalCustomerMetersListSecurity$outboundSchema = z.object({
    customerSession: z.string(),
}).transform((v) => {
    return remap$(v, {
        customerSession: "customer_session",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalCustomerMetersListSecurity$;
(function (CustomerPortalCustomerMetersListSecurity$) {
    /** @deprecated use `CustomerPortalCustomerMetersListSecurity$inboundSchema` instead. */
    CustomerPortalCustomerMetersListSecurity$.inboundSchema = CustomerPortalCustomerMetersListSecurity$inboundSchema;
    /** @deprecated use `CustomerPortalCustomerMetersListSecurity$outboundSchema` instead. */
    CustomerPortalCustomerMetersListSecurity$.outboundSchema = CustomerPortalCustomerMetersListSecurity$outboundSchema;
})(CustomerPortalCustomerMetersListSecurity$ || (CustomerPortalCustomerMetersListSecurity$ = {}));
export function customerPortalCustomerMetersListSecurityToJSON(customerPortalCustomerMetersListSecurity) {
    return JSON.stringify(CustomerPortalCustomerMetersListSecurity$outboundSchema.parse(customerPortalCustomerMetersListSecurity));
}
export function customerPortalCustomerMetersListSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalCustomerMetersListSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalCustomerMetersListSecurity' from JSON`);
}
/** @internal */
export const MeterIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const MeterIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MeterIDFilter$;
(function (MeterIDFilter$) {
    /** @deprecated use `MeterIDFilter$inboundSchema` instead. */
    MeterIDFilter$.inboundSchema = MeterIDFilter$inboundSchema;
    /** @deprecated use `MeterIDFilter$outboundSchema` instead. */
    MeterIDFilter$.outboundSchema = MeterIDFilter$outboundSchema;
})(MeterIDFilter$ || (MeterIDFilter$ = {}));
export function meterIDFilterToJSON(meterIDFilter) {
    return JSON.stringify(MeterIDFilter$outboundSchema.parse(meterIDFilter));
}
export function meterIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MeterIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterIDFilter' from JSON`);
}
/** @internal */
export const CustomerPortalCustomerMetersListRequest$inboundSchema = z.object({
    meter_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(CustomerCustomerMeterSortProperty$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "meter_id": "meterId",
    });
});
/** @internal */
export const CustomerPortalCustomerMetersListRequest$outboundSchema = z.object({
    meterId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(CustomerCustomerMeterSortProperty$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        meterId: "meter_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalCustomerMetersListRequest$;
(function (CustomerPortalCustomerMetersListRequest$) {
    /** @deprecated use `CustomerPortalCustomerMetersListRequest$inboundSchema` instead. */
    CustomerPortalCustomerMetersListRequest$.inboundSchema = CustomerPortalCustomerMetersListRequest$inboundSchema;
    /** @deprecated use `CustomerPortalCustomerMetersListRequest$outboundSchema` instead. */
    CustomerPortalCustomerMetersListRequest$.outboundSchema = CustomerPortalCustomerMetersListRequest$outboundSchema;
})(CustomerPortalCustomerMetersListRequest$ || (CustomerPortalCustomerMetersListRequest$ = {}));
export function customerPortalCustomerMetersListRequestToJSON(customerPortalCustomerMetersListRequest) {
    return JSON.stringify(CustomerPortalCustomerMetersListRequest$outboundSchema.parse(customerPortalCustomerMetersListRequest));
}
export function customerPortalCustomerMetersListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalCustomerMetersListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalCustomerMetersListRequest' from JSON`);
}
/** @internal */
export const CustomerPortalCustomerMetersListResponse$inboundSchema = z.object({
    Result: ListResourceCustomerCustomerMeter$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const CustomerPortalCustomerMetersListResponse$outboundSchema = z.object({
    result: ListResourceCustomerCustomerMeter$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalCustomerMetersListResponse$;
(function (CustomerPortalCustomerMetersListResponse$) {
    /** @deprecated use `CustomerPortalCustomerMetersListResponse$inboundSchema` instead. */
    CustomerPortalCustomerMetersListResponse$.inboundSchema = CustomerPortalCustomerMetersListResponse$inboundSchema;
    /** @deprecated use `CustomerPortalCustomerMetersListResponse$outboundSchema` instead. */
    CustomerPortalCustomerMetersListResponse$.outboundSchema = CustomerPortalCustomerMetersListResponse$outboundSchema;
})(CustomerPortalCustomerMetersListResponse$ || (CustomerPortalCustomerMetersListResponse$ = {}));
export function customerPortalCustomerMetersListResponseToJSON(customerPortalCustomerMetersListResponse) {
    return JSON.stringify(CustomerPortalCustomerMetersListResponse$outboundSchema.parse(customerPortalCustomerMetersListResponse));
}
export function customerPortalCustomerMetersListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalCustomerMetersListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalCustomerMetersListResponse' from JSON`);
}
//# sourceMappingURL=customerportalcustomermeterslist.js.map