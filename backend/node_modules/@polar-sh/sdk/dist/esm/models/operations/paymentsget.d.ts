import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type PaymentsGetRequest = {
    /**
     * The payment ID.
     */
    id: string;
};
/** @internal */
export declare const PaymentsGetRequest$inboundSchema: z.ZodType<PaymentsGetRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type PaymentsGetRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const PaymentsGetRequest$outboundSchema: z.ZodType<PaymentsGetRequest$Outbound, z.ZodTypeDef, PaymentsGetRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PaymentsGetRequest$ {
    /** @deprecated use `PaymentsGetRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PaymentsGetRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PaymentsGetRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PaymentsGetRequest$Outbound, z.ZodTypeDef, PaymentsGetRequest>;
    /** @deprecated use `PaymentsGetRequest$Outbound` instead. */
    type Outbound = PaymentsGetRequest$Outbound;
}
export declare function paymentsGetRequestToJSON(paymentsGetRequest: PaymentsGetRequest): string;
export declare function paymentsGetRequestFromJSON(jsonString: string): SafeParseResult<PaymentsGetRequest, SDKValidationError>;
//# sourceMappingURL=paymentsget.d.ts.map