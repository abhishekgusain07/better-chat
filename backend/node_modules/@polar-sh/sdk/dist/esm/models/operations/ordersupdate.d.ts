import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { OrderUpdate, OrderUpdate$Outbound } from "../components/orderupdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type OrdersUpdateRequest = {
    /**
     * The order ID.
     */
    id: string;
    orderUpdate: OrderUpdate;
};
/** @internal */
export declare const OrdersUpdateRequest$inboundSchema: z.ZodType<OrdersUpdateRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type OrdersUpdateRequest$Outbound = {
    id: string;
    OrderUpdate: OrderUpdate$Outbound;
};
/** @internal */
export declare const OrdersUpdateRequest$outboundSchema: z.ZodType<OrdersUpdateRequest$Outbound, z.ZodTypeDef, OrdersUpdateRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OrdersUpdateRequest$ {
    /** @deprecated use `OrdersUpdateRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OrdersUpdateRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `OrdersUpdateRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OrdersUpdateRequest$Outbound, z.ZodTypeDef, OrdersUpdateRequest>;
    /** @deprecated use `OrdersUpdateRequest$Outbound` instead. */
    type Outbound = OrdersUpdateRequest$Outbound;
}
export declare function ordersUpdateRequestToJSON(ordersUpdateRequest: OrdersUpdateRequest): string;
export declare function ordersUpdateRequestFromJSON(jsonString: string): SafeParseResult<OrdersUpdateRequest, SDKValidationError>;
//# sourceMappingURL=ordersupdate.d.ts.map