/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomerMeterSortProperty$inboundSchema, CustomerMeterSortProperty$outboundSchema, } from "../components/customermetersortproperty.js";
import { ListResourceCustomerMeter$inboundSchema, ListResourceCustomerMeter$outboundSchema, } from "../components/listresourcecustomermeter.js";
/** @internal */
export const CustomerMetersListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CustomerMetersListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerMetersListQueryParamOrganizationIDFilter$;
(function (CustomerMetersListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `CustomerMetersListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    CustomerMetersListQueryParamOrganizationIDFilter$.inboundSchema = CustomerMetersListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `CustomerMetersListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    CustomerMetersListQueryParamOrganizationIDFilter$.outboundSchema = CustomerMetersListQueryParamOrganizationIDFilter$outboundSchema;
})(CustomerMetersListQueryParamOrganizationIDFilter$ || (CustomerMetersListQueryParamOrganizationIDFilter$ = {}));
export function customerMetersListQueryParamOrganizationIDFilterToJSON(customerMetersListQueryParamOrganizationIDFilter) {
    return JSON.stringify(CustomerMetersListQueryParamOrganizationIDFilter$outboundSchema.parse(customerMetersListQueryParamOrganizationIDFilter));
}
export function customerMetersListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerMetersListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerMetersListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
export const CustomerMetersListQueryParamCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CustomerMetersListQueryParamCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerMetersListQueryParamCustomerIDFilter$;
(function (CustomerMetersListQueryParamCustomerIDFilter$) {
    /** @deprecated use `CustomerMetersListQueryParamCustomerIDFilter$inboundSchema` instead. */
    CustomerMetersListQueryParamCustomerIDFilter$.inboundSchema = CustomerMetersListQueryParamCustomerIDFilter$inboundSchema;
    /** @deprecated use `CustomerMetersListQueryParamCustomerIDFilter$outboundSchema` instead. */
    CustomerMetersListQueryParamCustomerIDFilter$.outboundSchema = CustomerMetersListQueryParamCustomerIDFilter$outboundSchema;
})(CustomerMetersListQueryParamCustomerIDFilter$ || (CustomerMetersListQueryParamCustomerIDFilter$ = {}));
export function customerMetersListQueryParamCustomerIDFilterToJSON(customerMetersListQueryParamCustomerIDFilter) {
    return JSON.stringify(CustomerMetersListQueryParamCustomerIDFilter$outboundSchema.parse(customerMetersListQueryParamCustomerIDFilter));
}
export function customerMetersListQueryParamCustomerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerMetersListQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerMetersListQueryParamCustomerIDFilter' from JSON`);
}
/** @internal */
export const CustomerMetersListQueryParamExternalCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const CustomerMetersListQueryParamExternalCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerMetersListQueryParamExternalCustomerIDFilter$;
(function (CustomerMetersListQueryParamExternalCustomerIDFilter$) {
    /** @deprecated use `CustomerMetersListQueryParamExternalCustomerIDFilter$inboundSchema` instead. */
    CustomerMetersListQueryParamExternalCustomerIDFilter$.inboundSchema = CustomerMetersListQueryParamExternalCustomerIDFilter$inboundSchema;
    /** @deprecated use `CustomerMetersListQueryParamExternalCustomerIDFilter$outboundSchema` instead. */
    CustomerMetersListQueryParamExternalCustomerIDFilter$.outboundSchema = CustomerMetersListQueryParamExternalCustomerIDFilter$outboundSchema;
})(CustomerMetersListQueryParamExternalCustomerIDFilter$ || (CustomerMetersListQueryParamExternalCustomerIDFilter$ = {}));
export function customerMetersListQueryParamExternalCustomerIDFilterToJSON(customerMetersListQueryParamExternalCustomerIDFilter) {
    return JSON.stringify(CustomerMetersListQueryParamExternalCustomerIDFilter$outboundSchema.parse(customerMetersListQueryParamExternalCustomerIDFilter));
}
export function customerMetersListQueryParamExternalCustomerIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerMetersListQueryParamExternalCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerMetersListQueryParamExternalCustomerIDFilter' from JSON`);
}
/** @internal */
export const QueryParamMeterIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
export const QueryParamMeterIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamMeterIDFilter$;
(function (QueryParamMeterIDFilter$) {
    /** @deprecated use `QueryParamMeterIDFilter$inboundSchema` instead. */
    QueryParamMeterIDFilter$.inboundSchema = QueryParamMeterIDFilter$inboundSchema;
    /** @deprecated use `QueryParamMeterIDFilter$outboundSchema` instead. */
    QueryParamMeterIDFilter$.outboundSchema = QueryParamMeterIDFilter$outboundSchema;
})(QueryParamMeterIDFilter$ || (QueryParamMeterIDFilter$ = {}));
export function queryParamMeterIDFilterToJSON(queryParamMeterIDFilter) {
    return JSON.stringify(QueryParamMeterIDFilter$outboundSchema.parse(queryParamMeterIDFilter));
}
export function queryParamMeterIDFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryParamMeterIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamMeterIDFilter' from JSON`);
}
/** @internal */
export const CustomerMetersListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    meter_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(CustomerMeterSortProperty$inboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
        "meter_id": "meterId",
    });
});
/** @internal */
export const CustomerMetersListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    meterId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(CustomerMeterSortProperty$outboundSchema))
        .optional(),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
        meterId: "meter_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerMetersListRequest$;
(function (CustomerMetersListRequest$) {
    /** @deprecated use `CustomerMetersListRequest$inboundSchema` instead. */
    CustomerMetersListRequest$.inboundSchema = CustomerMetersListRequest$inboundSchema;
    /** @deprecated use `CustomerMetersListRequest$outboundSchema` instead. */
    CustomerMetersListRequest$.outboundSchema = CustomerMetersListRequest$outboundSchema;
})(CustomerMetersListRequest$ || (CustomerMetersListRequest$ = {}));
export function customerMetersListRequestToJSON(customerMetersListRequest) {
    return JSON.stringify(CustomerMetersListRequest$outboundSchema.parse(customerMetersListRequest));
}
export function customerMetersListRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerMetersListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerMetersListRequest' from JSON`);
}
/** @internal */
export const CustomerMetersListResponse$inboundSchema = z.object({
    Result: ListResourceCustomerMeter$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "Result": "result",
    });
});
/** @internal */
export const CustomerMetersListResponse$outboundSchema = z.object({
    result: ListResourceCustomerMeter$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerMetersListResponse$;
(function (CustomerMetersListResponse$) {
    /** @deprecated use `CustomerMetersListResponse$inboundSchema` instead. */
    CustomerMetersListResponse$.inboundSchema = CustomerMetersListResponse$inboundSchema;
    /** @deprecated use `CustomerMetersListResponse$outboundSchema` instead. */
    CustomerMetersListResponse$.outboundSchema = CustomerMetersListResponse$outboundSchema;
})(CustomerMetersListResponse$ || (CustomerMetersListResponse$ = {}));
export function customerMetersListResponseToJSON(customerMetersListResponse) {
    return JSON.stringify(CustomerMetersListResponse$outboundSchema.parse(customerMetersListResponse));
}
export function customerMetersListResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerMetersListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerMetersListResponse' from JSON`);
}
//# sourceMappingURL=customermeterslist.js.map