/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomerOrderUpdate$inboundSchema, CustomerOrderUpdate$outboundSchema, } from "../components/customerorderupdate.js";
/** @internal */
export const CustomerPortalOrdersUpdateSecurity$inboundSchema = z.object({
    customer_session: z.string(),
}).transform((v) => {
    return remap$(v, {
        "customer_session": "customerSession",
    });
});
/** @internal */
export const CustomerPortalOrdersUpdateSecurity$outboundSchema = z.object({
    customerSession: z.string(),
}).transform((v) => {
    return remap$(v, {
        customerSession: "customer_session",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalOrdersUpdateSecurity$;
(function (CustomerPortalOrdersUpdateSecurity$) {
    /** @deprecated use `CustomerPortalOrdersUpdateSecurity$inboundSchema` instead. */
    CustomerPortalOrdersUpdateSecurity$.inboundSchema = CustomerPortalOrdersUpdateSecurity$inboundSchema;
    /** @deprecated use `CustomerPortalOrdersUpdateSecurity$outboundSchema` instead. */
    CustomerPortalOrdersUpdateSecurity$.outboundSchema = CustomerPortalOrdersUpdateSecurity$outboundSchema;
})(CustomerPortalOrdersUpdateSecurity$ || (CustomerPortalOrdersUpdateSecurity$ = {}));
export function customerPortalOrdersUpdateSecurityToJSON(customerPortalOrdersUpdateSecurity) {
    return JSON.stringify(CustomerPortalOrdersUpdateSecurity$outboundSchema.parse(customerPortalOrdersUpdateSecurity));
}
export function customerPortalOrdersUpdateSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalOrdersUpdateSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalOrdersUpdateSecurity' from JSON`);
}
/** @internal */
export const CustomerPortalOrdersUpdateRequest$inboundSchema = z.object({
    id: z.string(),
    CustomerOrderUpdate: CustomerOrderUpdate$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "CustomerOrderUpdate": "customerOrderUpdate",
    });
});
/** @internal */
export const CustomerPortalOrdersUpdateRequest$outboundSchema = z.object({
    id: z.string(),
    customerOrderUpdate: CustomerOrderUpdate$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        customerOrderUpdate: "CustomerOrderUpdate",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerPortalOrdersUpdateRequest$;
(function (CustomerPortalOrdersUpdateRequest$) {
    /** @deprecated use `CustomerPortalOrdersUpdateRequest$inboundSchema` instead. */
    CustomerPortalOrdersUpdateRequest$.inboundSchema = CustomerPortalOrdersUpdateRequest$inboundSchema;
    /** @deprecated use `CustomerPortalOrdersUpdateRequest$outboundSchema` instead. */
    CustomerPortalOrdersUpdateRequest$.outboundSchema = CustomerPortalOrdersUpdateRequest$outboundSchema;
})(CustomerPortalOrdersUpdateRequest$ || (CustomerPortalOrdersUpdateRequest$ = {}));
export function customerPortalOrdersUpdateRequestToJSON(customerPortalOrdersUpdateRequest) {
    return JSON.stringify(CustomerPortalOrdersUpdateRequest$outboundSchema.parse(customerPortalOrdersUpdateRequest));
}
export function customerPortalOrdersUpdateRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerPortalOrdersUpdateRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalOrdersUpdateRequest' from JSON`);
}
//# sourceMappingURL=customerportalordersupdate.js.map