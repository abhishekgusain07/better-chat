/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { CardPayment$inboundSchema, CardPayment$outboundSchema, } from "./cardpayment.js";
import { GenericPayment$inboundSchema, GenericPayment$outboundSchema, } from "./genericpayment.js";
/** @internal */
export const Payment$inboundSchema = z.union([CardPayment$inboundSchema, GenericPayment$inboundSchema]);
/** @internal */
export const Payment$outboundSchema = z.union([CardPayment$outboundSchema, GenericPayment$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Payment$;
(function (Payment$) {
    /** @deprecated use `Payment$inboundSchema` instead. */
    Payment$.inboundSchema = Payment$inboundSchema;
    /** @deprecated use `Payment$outboundSchema` instead. */
    Payment$.outboundSchema = Payment$outboundSchema;
})(Payment$ || (Payment$ = {}));
export function paymentToJSON(payment) {
    return JSON.stringify(Payment$outboundSchema.parse(payment));
}
export function paymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Payment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Payment' from JSON`);
}
//# sourceMappingURL=payment.js.map