/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomerCancellationReason$inboundSchema, CustomerCancellationReason$outboundSchema, } from "./customercancellationreason.js";
/** @internal */
export const SubscriptionRevoke$inboundSchema = z.object({
    customer_cancellation_reason: z.nullable(CustomerCancellationReason$inboundSchema).optional(),
    customer_cancellation_comment: z.nullable(z.string()).optional(),
    revoke: z.literal(true),
}).transform((v) => {
    return remap$(v, {
        "customer_cancellation_reason": "customerCancellationReason",
        "customer_cancellation_comment": "customerCancellationComment",
    });
});
/** @internal */
export const SubscriptionRevoke$outboundSchema = z.object({
    customerCancellationReason: z.nullable(CustomerCancellationReason$outboundSchema).optional(),
    customerCancellationComment: z.nullable(z.string()).optional(),
    revoke: z.literal(true),
}).transform((v) => {
    return remap$(v, {
        customerCancellationReason: "customer_cancellation_reason",
        customerCancellationComment: "customer_cancellation_comment",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionRevoke$;
(function (SubscriptionRevoke$) {
    /** @deprecated use `SubscriptionRevoke$inboundSchema` instead. */
    SubscriptionRevoke$.inboundSchema = SubscriptionRevoke$inboundSchema;
    /** @deprecated use `SubscriptionRevoke$outboundSchema` instead. */
    SubscriptionRevoke$.outboundSchema = SubscriptionRevoke$outboundSchema;
})(SubscriptionRevoke$ || (SubscriptionRevoke$ = {}));
export function subscriptionRevokeToJSON(subscriptionRevoke) {
    return JSON.stringify(SubscriptionRevoke$outboundSchema.parse(subscriptionRevoke));
}
export function subscriptionRevokeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriptionRevoke$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionRevoke' from JSON`);
}
//# sourceMappingURL=subscriptionrevoke.js.map