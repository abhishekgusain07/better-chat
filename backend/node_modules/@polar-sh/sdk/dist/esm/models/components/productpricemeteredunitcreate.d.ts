import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * The price per unit in cents. Supports up to 12 decimal places.
 */
export type UnitAmount = number | string;
/**
 * Schema to create a metered price with a fixed unit price.
 */
export type ProductPriceMeteredUnitCreate = {
    amountType: "metered_unit";
    /**
     * The ID of the meter associated to the price.
     */
    meterId: string;
    /**
     * The currency. Currently, only `usd` is supported.
     */
    priceCurrency?: string | undefined;
    /**
     * The price per unit in cents. Supports up to 12 decimal places.
     */
    unitAmount: number | string;
    /**
     * Optional maximum amount in cents that can be charged, regardless of the number of units consumed.
     */
    capAmount?: number | null | undefined;
};
/** @internal */
export declare const UnitAmount$inboundSchema: z.ZodType<UnitAmount, z.ZodTypeDef, unknown>;
/** @internal */
export type UnitAmount$Outbound = number | string;
/** @internal */
export declare const UnitAmount$outboundSchema: z.ZodType<UnitAmount$Outbound, z.ZodTypeDef, UnitAmount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UnitAmount$ {
    /** @deprecated use `UnitAmount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UnitAmount, z.ZodTypeDef, unknown>;
    /** @deprecated use `UnitAmount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UnitAmount$Outbound, z.ZodTypeDef, UnitAmount>;
    /** @deprecated use `UnitAmount$Outbound` instead. */
    type Outbound = UnitAmount$Outbound;
}
export declare function unitAmountToJSON(unitAmount: UnitAmount): string;
export declare function unitAmountFromJSON(jsonString: string): SafeParseResult<UnitAmount, SDKValidationError>;
/** @internal */
export declare const ProductPriceMeteredUnitCreate$inboundSchema: z.ZodType<ProductPriceMeteredUnitCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductPriceMeteredUnitCreate$Outbound = {
    amount_type: "metered_unit";
    meter_id: string;
    price_currency: string;
    unit_amount: number | string;
    cap_amount?: number | null | undefined;
};
/** @internal */
export declare const ProductPriceMeteredUnitCreate$outboundSchema: z.ZodType<ProductPriceMeteredUnitCreate$Outbound, z.ZodTypeDef, ProductPriceMeteredUnitCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductPriceMeteredUnitCreate$ {
    /** @deprecated use `ProductPriceMeteredUnitCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductPriceMeteredUnitCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductPriceMeteredUnitCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductPriceMeteredUnitCreate$Outbound, z.ZodTypeDef, ProductPriceMeteredUnitCreate>;
    /** @deprecated use `ProductPriceMeteredUnitCreate$Outbound` instead. */
    type Outbound = ProductPriceMeteredUnitCreate$Outbound;
}
export declare function productPriceMeteredUnitCreateToJSON(productPriceMeteredUnitCreate: ProductPriceMeteredUnitCreate): string;
export declare function productPriceMeteredUnitCreateFromJSON(jsonString: string): SafeParseResult<ProductPriceMeteredUnitCreate, SDKValidationError>;
//# sourceMappingURL=productpricemeteredunitcreate.d.ts.map