import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { WebhookEventType } from "./webhookeventtype.js";
import { WebhookFormat } from "./webhookformat.js";
/**
 * Schema to create a webhook endpoint.
 */
export type WebhookEndpointCreate = {
    /**
     * The URL where the webhook events will be sent.
     */
    url: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    secret?: string | null | undefined;
    format: WebhookFormat;
    /**
     * The events that will trigger the webhook.
     */
    events: Array<WebhookEventType>;
    /**
     * The organization ID associated with the webhook endpoint. **Required unless you use an organization token.**
     */
    organizationId?: string | null | undefined;
};
/** @internal */
export declare const WebhookEndpointCreate$inboundSchema: z.ZodType<WebhookEndpointCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookEndpointCreate$Outbound = {
    url: string;
    secret?: string | null | undefined;
    format: string;
    events: Array<string>;
    organization_id?: string | null | undefined;
};
/** @internal */
export declare const WebhookEndpointCreate$outboundSchema: z.ZodType<WebhookEndpointCreate$Outbound, z.ZodTypeDef, WebhookEndpointCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookEndpointCreate$ {
    /** @deprecated use `WebhookEndpointCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookEndpointCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookEndpointCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookEndpointCreate$Outbound, z.ZodTypeDef, WebhookEndpointCreate>;
    /** @deprecated use `WebhookEndpointCreate$Outbound` instead. */
    type Outbound = WebhookEndpointCreate$Outbound;
}
export declare function webhookEndpointCreateToJSON(webhookEndpointCreate: WebhookEndpointCreate): string;
export declare function webhookEndpointCreateFromJSON(jsonString: string): SafeParseResult<WebhookEndpointCreate, SDKValidationError>;
//# sourceMappingURL=webhookendpointcreate.d.ts.map