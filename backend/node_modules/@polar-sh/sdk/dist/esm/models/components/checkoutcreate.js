/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
/** @internal */
export const CheckoutCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const CheckoutCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutCreateMetadata$;
(function (CheckoutCreateMetadata$) {
    /** @deprecated use `CheckoutCreateMetadata$inboundSchema` instead. */
    CheckoutCreateMetadata$.inboundSchema = CheckoutCreateMetadata$inboundSchema;
    /** @deprecated use `CheckoutCreateMetadata$outboundSchema` instead. */
    CheckoutCreateMetadata$.outboundSchema = CheckoutCreateMetadata$outboundSchema;
})(CheckoutCreateMetadata$ || (CheckoutCreateMetadata$ = {}));
export function checkoutCreateMetadataToJSON(checkoutCreateMetadata) {
    return JSON.stringify(CheckoutCreateMetadata$outboundSchema.parse(checkoutCreateMetadata));
}
export function checkoutCreateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutCreateMetadata' from JSON`);
}
/** @internal */
export const CheckoutCreateCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
export const CheckoutCreateCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutCreateCustomFieldData$;
(function (CheckoutCreateCustomFieldData$) {
    /** @deprecated use `CheckoutCreateCustomFieldData$inboundSchema` instead. */
    CheckoutCreateCustomFieldData$.inboundSchema = CheckoutCreateCustomFieldData$inboundSchema;
    /** @deprecated use `CheckoutCreateCustomFieldData$outboundSchema` instead. */
    CheckoutCreateCustomFieldData$.outboundSchema = CheckoutCreateCustomFieldData$outboundSchema;
})(CheckoutCreateCustomFieldData$ || (CheckoutCreateCustomFieldData$ = {}));
export function checkoutCreateCustomFieldDataToJSON(checkoutCreateCustomFieldData) {
    return JSON.stringify(CheckoutCreateCustomFieldData$outboundSchema.parse(checkoutCreateCustomFieldData));
}
export function checkoutCreateCustomFieldDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutCreateCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutCreateCustomFieldData' from JSON`);
}
/** @internal */
export const CheckoutCreateCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const CheckoutCreateCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutCreateCustomerMetadata$;
(function (CheckoutCreateCustomerMetadata$) {
    /** @deprecated use `CheckoutCreateCustomerMetadata$inboundSchema` instead. */
    CheckoutCreateCustomerMetadata$.inboundSchema = CheckoutCreateCustomerMetadata$inboundSchema;
    /** @deprecated use `CheckoutCreateCustomerMetadata$outboundSchema` instead. */
    CheckoutCreateCustomerMetadata$.outboundSchema = CheckoutCreateCustomerMetadata$outboundSchema;
})(CheckoutCreateCustomerMetadata$ || (CheckoutCreateCustomerMetadata$ = {}));
export function checkoutCreateCustomerMetadataToJSON(checkoutCreateCustomerMetadata) {
    return JSON.stringify(CheckoutCreateCustomerMetadata$outboundSchema.parse(checkoutCreateCustomerMetadata));
}
export function checkoutCreateCustomerMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutCreateCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutCreateCustomerMetadata' from JSON`);
}
/** @internal */
export const CheckoutCreate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    discount_id: z.nullable(z.string()).optional(),
    allow_discount_codes: z.boolean().default(true),
    require_billing_address: z.boolean().default(false),
    amount: z.nullable(z.number().int()).optional(),
    customer_id: z.nullable(z.string()).optional(),
    is_business_customer: z.boolean().default(false),
    external_customer_id: z.nullable(z.string()).optional(),
    customer_name: z.nullable(z.string()).optional(),
    customer_email: z.nullable(z.string()).optional(),
    customer_ip_address: z.nullable(z.string()).optional(),
    customer_billing_name: z.nullable(z.string()).optional(),
    customer_billing_address: z.nullable(Address$inboundSchema).optional(),
    customer_tax_id: z.nullable(z.string()).optional(),
    customer_metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    subscription_id: z.nullable(z.string()).optional(),
    success_url: z.nullable(z.string()).optional(),
    embed_origin: z.nullable(z.string()).optional(),
    products: z.array(z.string()),
}).transform((v) => {
    return remap$(v, {
        "custom_field_data": "customFieldData",
        "discount_id": "discountId",
        "allow_discount_codes": "allowDiscountCodes",
        "require_billing_address": "requireBillingAddress",
        "customer_id": "customerId",
        "is_business_customer": "isBusinessCustomer",
        "external_customer_id": "externalCustomerId",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_ip_address": "customerIpAddress",
        "customer_billing_name": "customerBillingName",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "customer_metadata": "customerMetadata",
        "subscription_id": "subscriptionId",
        "success_url": "successUrl",
        "embed_origin": "embedOrigin",
    });
});
/** @internal */
export const CheckoutCreate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    discountId: z.nullable(z.string()).optional(),
    allowDiscountCodes: z.boolean().default(true),
    requireBillingAddress: z.boolean().default(false),
    amount: z.nullable(z.number().int()).optional(),
    customerId: z.nullable(z.string()).optional(),
    isBusinessCustomer: z.boolean().default(false),
    externalCustomerId: z.nullable(z.string()).optional(),
    customerName: z.nullable(z.string()).optional(),
    customerEmail: z.nullable(z.string()).optional(),
    customerIpAddress: z.nullable(z.string()).optional(),
    customerBillingName: z.nullable(z.string()).optional(),
    customerBillingAddress: z.nullable(Address$outboundSchema).optional(),
    customerTaxId: z.nullable(z.string()).optional(),
    customerMetadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    subscriptionId: z.nullable(z.string()).optional(),
    successUrl: z.nullable(z.string()).optional(),
    embedOrigin: z.nullable(z.string()).optional(),
    products: z.array(z.string()),
}).transform((v) => {
    return remap$(v, {
        customFieldData: "custom_field_data",
        discountId: "discount_id",
        allowDiscountCodes: "allow_discount_codes",
        requireBillingAddress: "require_billing_address",
        customerId: "customer_id",
        isBusinessCustomer: "is_business_customer",
        externalCustomerId: "external_customer_id",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerIpAddress: "customer_ip_address",
        customerBillingName: "customer_billing_name",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        customerMetadata: "customer_metadata",
        subscriptionId: "subscription_id",
        successUrl: "success_url",
        embedOrigin: "embed_origin",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutCreate$;
(function (CheckoutCreate$) {
    /** @deprecated use `CheckoutCreate$inboundSchema` instead. */
    CheckoutCreate$.inboundSchema = CheckoutCreate$inboundSchema;
    /** @deprecated use `CheckoutCreate$outboundSchema` instead. */
    CheckoutCreate$.outboundSchema = CheckoutCreate$outboundSchema;
})(CheckoutCreate$ || (CheckoutCreate$ = {}));
export function checkoutCreateToJSON(checkoutCreate) {
    return JSON.stringify(CheckoutCreate$outboundSchema.parse(checkoutCreate));
}
export function checkoutCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutCreate' from JSON`);
}
//# sourceMappingURL=checkoutcreate.js.map