import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * An active meter for a customer, with latest consumed and credited units.
 */
export type CustomerStateMeter = {
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the meter.
     */
    meterId: string;
    /**
     * The number of consumed units.
     */
    consumedUnits: number;
    /**
     * The number of credited units.
     */
    creditedUnits: number;
    /**
     * The balance of the meter, i.e. the difference between credited and consumed units.
     */
    balance: number;
};
/** @internal */
export declare const CustomerStateMeter$inboundSchema: z.ZodType<CustomerStateMeter, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerStateMeter$Outbound = {
    id: string;
    created_at: string;
    modified_at: string | null;
    meter_id: string;
    consumed_units: number;
    credited_units: number;
    balance: number;
};
/** @internal */
export declare const CustomerStateMeter$outboundSchema: z.ZodType<CustomerStateMeter$Outbound, z.ZodTypeDef, CustomerStateMeter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerStateMeter$ {
    /** @deprecated use `CustomerStateMeter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerStateMeter, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerStateMeter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerStateMeter$Outbound, z.ZodTypeDef, CustomerStateMeter>;
    /** @deprecated use `CustomerStateMeter$Outbound` instead. */
    type Outbound = CustomerStateMeter$Outbound;
}
export declare function customerStateMeterToJSON(customerStateMeter: CustomerStateMeter): string;
export declare function customerStateMeterFromJSON(jsonString: string): SafeParseResult<CustomerStateMeter, SDKValidationError>;
//# sourceMappingURL=customerstatemeter.d.ts.map