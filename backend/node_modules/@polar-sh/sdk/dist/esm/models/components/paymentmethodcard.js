/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { PaymentMethodCardMetadata$inboundSchema, PaymentMethodCardMetadata$outboundSchema, } from "./paymentmethodcardmetadata.js";
import { PaymentProcessor$inboundSchema, PaymentProcessor$outboundSchema, } from "./paymentprocessor.js";
/** @internal */
export const PaymentMethodCard$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    processor: PaymentProcessor$inboundSchema,
    customer_id: z.string(),
    type: z.literal("card"),
    method_metadata: PaymentMethodCardMetadata$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "customer_id": "customerId",
        "method_metadata": "methodMetadata",
    });
});
/** @internal */
export const PaymentMethodCard$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    processor: PaymentProcessor$outboundSchema,
    customerId: z.string(),
    type: z.literal("card"),
    methodMetadata: PaymentMethodCardMetadata$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        customerId: "customer_id",
        methodMetadata: "method_metadata",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaymentMethodCard$;
(function (PaymentMethodCard$) {
    /** @deprecated use `PaymentMethodCard$inboundSchema` instead. */
    PaymentMethodCard$.inboundSchema = PaymentMethodCard$inboundSchema;
    /** @deprecated use `PaymentMethodCard$outboundSchema` instead. */
    PaymentMethodCard$.outboundSchema = PaymentMethodCard$outboundSchema;
})(PaymentMethodCard$ || (PaymentMethodCard$ = {}));
export function paymentMethodCardToJSON(paymentMethodCard) {
    return JSON.stringify(PaymentMethodCard$outboundSchema.parse(paymentMethodCard));
}
export function paymentMethodCardFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaymentMethodCard$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaymentMethodCard' from JSON`);
}
//# sourceMappingURL=paymentmethodcard.js.map