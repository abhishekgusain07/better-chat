import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
import { CustomerOrderProduct, CustomerOrderProduct$Outbound } from "./customerorderproduct.js";
import { CustomerOrderSubscription, CustomerOrderSubscription$Outbound } from "./customerordersubscription.js";
import { OrderBillingReason } from "./orderbillingreason.js";
import { OrderItemSchema, OrderItemSchema$Outbound } from "./orderitemschema.js";
import { OrderStatus } from "./orderstatus.js";
export type CustomerOrder = {
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    status: OrderStatus;
    /**
     * Whether the order has been paid for.
     */
    paid: boolean;
    /**
     * Amount in cents, before discounts and taxes.
     */
    subtotalAmount: number;
    /**
     * Discount amount in cents.
     */
    discountAmount: number;
    /**
     * Amount in cents, after discounts but before taxes.
     */
    netAmount: number;
    /**
     * Sales tax amount in cents.
     */
    taxAmount: number;
    /**
     * Amount in cents, after discounts and taxes.
     */
    totalAmount: number;
    /**
     * Amount refunded in cents.
     */
    refundedAmount: number;
    /**
     * Sales tax refunded in cents.
     */
    refundedTaxAmount: number;
    currency: string;
    billingReason: OrderBillingReason;
    /**
     * The name of the customer that should appear on the invoice.
     */
    billingName: string | null;
    billingAddress: Address | null;
    /**
     * Whether an invoice has been generated for this order.
     */
    isInvoiceGenerated: boolean;
    customerId: string;
    productId: string;
    discountId: string | null;
    subscriptionId: string | null;
    checkoutId: string | null;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    userId: string;
    product: CustomerOrderProduct;
    subscription: CustomerOrderSubscription | null;
    /**
     * Line items composing the order.
     */
    items: Array<OrderItemSchema>;
    /**
     * When the next payment retry is scheduled
     */
    nextPaymentAttemptAt?: Date | null | undefined;
};
/** @internal */
export declare const CustomerOrder$inboundSchema: z.ZodType<CustomerOrder, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerOrder$Outbound = {
    id: string;
    created_at: string;
    modified_at: string | null;
    status: string;
    paid: boolean;
    subtotal_amount: number;
    discount_amount: number;
    net_amount: number;
    tax_amount: number;
    total_amount: number;
    refunded_amount: number;
    refunded_tax_amount: number;
    currency: string;
    billing_reason: string;
    billing_name: string | null;
    billing_address: Address$Outbound | null;
    is_invoice_generated: boolean;
    customer_id: string;
    product_id: string;
    discount_id: string | null;
    subscription_id: string | null;
    checkout_id: string | null;
    user_id: string;
    product: CustomerOrderProduct$Outbound;
    subscription: CustomerOrderSubscription$Outbound | null;
    items: Array<OrderItemSchema$Outbound>;
    next_payment_attempt_at?: string | null | undefined;
};
/** @internal */
export declare const CustomerOrder$outboundSchema: z.ZodType<CustomerOrder$Outbound, z.ZodTypeDef, CustomerOrder>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerOrder$ {
    /** @deprecated use `CustomerOrder$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerOrder, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerOrder$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerOrder$Outbound, z.ZodTypeDef, CustomerOrder>;
    /** @deprecated use `CustomerOrder$Outbound` instead. */
    type Outbound = CustomerOrder$Outbound;
}
export declare function customerOrderToJSON(customerOrder: CustomerOrder): string;
export declare function customerOrderFromJSON(jsonString: string): SafeParseResult<CustomerOrder, SDKValidationError>;
//# sourceMappingURL=customerorder.d.ts.map