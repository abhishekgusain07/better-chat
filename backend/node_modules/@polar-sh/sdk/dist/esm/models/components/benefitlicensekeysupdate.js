/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { BenefitLicenseKeysCreateProperties$inboundSchema, BenefitLicenseKeysCreateProperties$outboundSchema, } from "./benefitlicensekeyscreateproperties.js";
/** @internal */
export const BenefitLicenseKeysUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const BenefitLicenseKeysUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitLicenseKeysUpdateMetadata$;
(function (BenefitLicenseKeysUpdateMetadata$) {
    /** @deprecated use `BenefitLicenseKeysUpdateMetadata$inboundSchema` instead. */
    BenefitLicenseKeysUpdateMetadata$.inboundSchema = BenefitLicenseKeysUpdateMetadata$inboundSchema;
    /** @deprecated use `BenefitLicenseKeysUpdateMetadata$outboundSchema` instead. */
    BenefitLicenseKeysUpdateMetadata$.outboundSchema = BenefitLicenseKeysUpdateMetadata$outboundSchema;
})(BenefitLicenseKeysUpdateMetadata$ || (BenefitLicenseKeysUpdateMetadata$ = {}));
export function benefitLicenseKeysUpdateMetadataToJSON(benefitLicenseKeysUpdateMetadata) {
    return JSON.stringify(BenefitLicenseKeysUpdateMetadata$outboundSchema.parse(benefitLicenseKeysUpdateMetadata));
}
export function benefitLicenseKeysUpdateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitLicenseKeysUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitLicenseKeysUpdateMetadata' from JSON`);
}
/** @internal */
export const BenefitLicenseKeysUpdate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    description: z.nullable(z.string()).optional(),
    type: z.literal("license_keys"),
    properties: z.nullable(BenefitLicenseKeysCreateProperties$inboundSchema)
        .optional(),
});
/** @internal */
export const BenefitLicenseKeysUpdate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    description: z.nullable(z.string()).optional(),
    type: z.literal("license_keys"),
    properties: z.nullable(BenefitLicenseKeysCreateProperties$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitLicenseKeysUpdate$;
(function (BenefitLicenseKeysUpdate$) {
    /** @deprecated use `BenefitLicenseKeysUpdate$inboundSchema` instead. */
    BenefitLicenseKeysUpdate$.inboundSchema = BenefitLicenseKeysUpdate$inboundSchema;
    /** @deprecated use `BenefitLicenseKeysUpdate$outboundSchema` instead. */
    BenefitLicenseKeysUpdate$.outboundSchema = BenefitLicenseKeysUpdate$outboundSchema;
})(BenefitLicenseKeysUpdate$ || (BenefitLicenseKeysUpdate$ = {}));
export function benefitLicenseKeysUpdateToJSON(benefitLicenseKeysUpdate) {
    return JSON.stringify(BenefitLicenseKeysUpdate$outboundSchema.parse(benefitLicenseKeysUpdate));
}
export function benefitLicenseKeysUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitLicenseKeysUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitLicenseKeysUpdate' from JSON`);
}
//# sourceMappingURL=benefitlicensekeysupdate.js.map