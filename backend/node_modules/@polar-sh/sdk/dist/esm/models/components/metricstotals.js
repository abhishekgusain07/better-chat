/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const MetricsTotalsOrders$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsOrders$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsOrders$;
(function (MetricsTotalsOrders$) {
    /** @deprecated use `MetricsTotalsOrders$inboundSchema` instead. */
    MetricsTotalsOrders$.inboundSchema = MetricsTotalsOrders$inboundSchema;
    /** @deprecated use `MetricsTotalsOrders$outboundSchema` instead. */
    MetricsTotalsOrders$.outboundSchema = MetricsTotalsOrders$outboundSchema;
})(MetricsTotalsOrders$ || (MetricsTotalsOrders$ = {}));
export function metricsTotalsOrdersToJSON(metricsTotalsOrders) {
    return JSON.stringify(MetricsTotalsOrders$outboundSchema.parse(metricsTotalsOrders));
}
export function metricsTotalsOrdersFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsOrders$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsOrders' from JSON`);
}
/** @internal */
export const MetricsTotalsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsRevenue$;
(function (MetricsTotalsRevenue$) {
    /** @deprecated use `MetricsTotalsRevenue$inboundSchema` instead. */
    MetricsTotalsRevenue$.inboundSchema = MetricsTotalsRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsRevenue$outboundSchema` instead. */
    MetricsTotalsRevenue$.outboundSchema = MetricsTotalsRevenue$outboundSchema;
})(MetricsTotalsRevenue$ || (MetricsTotalsRevenue$ = {}));
export function metricsTotalsRevenueToJSON(metricsTotalsRevenue) {
    return JSON.stringify(MetricsTotalsRevenue$outboundSchema.parse(metricsTotalsRevenue));
}
export function metricsTotalsRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsNetRevenue$;
(function (MetricsTotalsNetRevenue$) {
    /** @deprecated use `MetricsTotalsNetRevenue$inboundSchema` instead. */
    MetricsTotalsNetRevenue$.inboundSchema = MetricsTotalsNetRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsNetRevenue$outboundSchema` instead. */
    MetricsTotalsNetRevenue$.outboundSchema = MetricsTotalsNetRevenue$outboundSchema;
})(MetricsTotalsNetRevenue$ || (MetricsTotalsNetRevenue$ = {}));
export function metricsTotalsNetRevenueToJSON(metricsTotalsNetRevenue) {
    return JSON.stringify(MetricsTotalsNetRevenue$outboundSchema.parse(metricsTotalsNetRevenue));
}
export function metricsTotalsNetRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNetRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsCumulativeRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsCumulativeRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsCumulativeRevenue$;
(function (MetricsTotalsCumulativeRevenue$) {
    /** @deprecated use `MetricsTotalsCumulativeRevenue$inboundSchema` instead. */
    MetricsTotalsCumulativeRevenue$.inboundSchema = MetricsTotalsCumulativeRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsCumulativeRevenue$outboundSchema` instead. */
    MetricsTotalsCumulativeRevenue$.outboundSchema = MetricsTotalsCumulativeRevenue$outboundSchema;
})(MetricsTotalsCumulativeRevenue$ || (MetricsTotalsCumulativeRevenue$ = {}));
export function metricsTotalsCumulativeRevenueToJSON(metricsTotalsCumulativeRevenue) {
    return JSON.stringify(MetricsTotalsCumulativeRevenue$outboundSchema.parse(metricsTotalsCumulativeRevenue));
}
export function metricsTotalsCumulativeRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsCumulativeRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsCumulativeRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsNetCumulativeRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsNetCumulativeRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsNetCumulativeRevenue$;
(function (MetricsTotalsNetCumulativeRevenue$) {
    /** @deprecated use `MetricsTotalsNetCumulativeRevenue$inboundSchema` instead. */
    MetricsTotalsNetCumulativeRevenue$.inboundSchema = MetricsTotalsNetCumulativeRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsNetCumulativeRevenue$outboundSchema` instead. */
    MetricsTotalsNetCumulativeRevenue$.outboundSchema = MetricsTotalsNetCumulativeRevenue$outboundSchema;
})(MetricsTotalsNetCumulativeRevenue$ || (MetricsTotalsNetCumulativeRevenue$ = {}));
export function metricsTotalsNetCumulativeRevenueToJSON(metricsTotalsNetCumulativeRevenue) {
    return JSON.stringify(MetricsTotalsNetCumulativeRevenue$outboundSchema.parse(metricsTotalsNetCumulativeRevenue));
}
export function metricsTotalsNetCumulativeRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsNetCumulativeRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNetCumulativeRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsAverageOrderValue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsAverageOrderValue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsAverageOrderValue$;
(function (MetricsTotalsAverageOrderValue$) {
    /** @deprecated use `MetricsTotalsAverageOrderValue$inboundSchema` instead. */
    MetricsTotalsAverageOrderValue$.inboundSchema = MetricsTotalsAverageOrderValue$inboundSchema;
    /** @deprecated use `MetricsTotalsAverageOrderValue$outboundSchema` instead. */
    MetricsTotalsAverageOrderValue$.outboundSchema = MetricsTotalsAverageOrderValue$outboundSchema;
})(MetricsTotalsAverageOrderValue$ || (MetricsTotalsAverageOrderValue$ = {}));
export function metricsTotalsAverageOrderValueToJSON(metricsTotalsAverageOrderValue) {
    return JSON.stringify(MetricsTotalsAverageOrderValue$outboundSchema.parse(metricsTotalsAverageOrderValue));
}
export function metricsTotalsAverageOrderValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsAverageOrderValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsAverageOrderValue' from JSON`);
}
/** @internal */
export const MetricsTotalsNetAverageOrderValue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsNetAverageOrderValue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsNetAverageOrderValue$;
(function (MetricsTotalsNetAverageOrderValue$) {
    /** @deprecated use `MetricsTotalsNetAverageOrderValue$inboundSchema` instead. */
    MetricsTotalsNetAverageOrderValue$.inboundSchema = MetricsTotalsNetAverageOrderValue$inboundSchema;
    /** @deprecated use `MetricsTotalsNetAverageOrderValue$outboundSchema` instead. */
    MetricsTotalsNetAverageOrderValue$.outboundSchema = MetricsTotalsNetAverageOrderValue$outboundSchema;
})(MetricsTotalsNetAverageOrderValue$ || (MetricsTotalsNetAverageOrderValue$ = {}));
export function metricsTotalsNetAverageOrderValueToJSON(metricsTotalsNetAverageOrderValue) {
    return JSON.stringify(MetricsTotalsNetAverageOrderValue$outboundSchema.parse(metricsTotalsNetAverageOrderValue));
}
export function metricsTotalsNetAverageOrderValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsNetAverageOrderValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNetAverageOrderValue' from JSON`);
}
/** @internal */
export const MetricsTotalsOneTimeProducts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsOneTimeProducts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsOneTimeProducts$;
(function (MetricsTotalsOneTimeProducts$) {
    /** @deprecated use `MetricsTotalsOneTimeProducts$inboundSchema` instead. */
    MetricsTotalsOneTimeProducts$.inboundSchema = MetricsTotalsOneTimeProducts$inboundSchema;
    /** @deprecated use `MetricsTotalsOneTimeProducts$outboundSchema` instead. */
    MetricsTotalsOneTimeProducts$.outboundSchema = MetricsTotalsOneTimeProducts$outboundSchema;
})(MetricsTotalsOneTimeProducts$ || (MetricsTotalsOneTimeProducts$ = {}));
export function metricsTotalsOneTimeProductsToJSON(metricsTotalsOneTimeProducts) {
    return JSON.stringify(MetricsTotalsOneTimeProducts$outboundSchema.parse(metricsTotalsOneTimeProducts));
}
export function metricsTotalsOneTimeProductsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsOneTimeProducts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsOneTimeProducts' from JSON`);
}
/** @internal */
export const MetricsTotalsOneTimeProductsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsOneTimeProductsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsOneTimeProductsRevenue$;
(function (MetricsTotalsOneTimeProductsRevenue$) {
    /** @deprecated use `MetricsTotalsOneTimeProductsRevenue$inboundSchema` instead. */
    MetricsTotalsOneTimeProductsRevenue$.inboundSchema = MetricsTotalsOneTimeProductsRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsOneTimeProductsRevenue$outboundSchema` instead. */
    MetricsTotalsOneTimeProductsRevenue$.outboundSchema = MetricsTotalsOneTimeProductsRevenue$outboundSchema;
})(MetricsTotalsOneTimeProductsRevenue$ || (MetricsTotalsOneTimeProductsRevenue$ = {}));
export function metricsTotalsOneTimeProductsRevenueToJSON(metricsTotalsOneTimeProductsRevenue) {
    return JSON.stringify(MetricsTotalsOneTimeProductsRevenue$outboundSchema.parse(metricsTotalsOneTimeProductsRevenue));
}
export function metricsTotalsOneTimeProductsRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsOneTimeProductsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsOneTimeProductsRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsOneTimeProductsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsOneTimeProductsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsOneTimeProductsNetRevenue$;
(function (MetricsTotalsOneTimeProductsNetRevenue$) {
    /** @deprecated use `MetricsTotalsOneTimeProductsNetRevenue$inboundSchema` instead. */
    MetricsTotalsOneTimeProductsNetRevenue$.inboundSchema = MetricsTotalsOneTimeProductsNetRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsOneTimeProductsNetRevenue$outboundSchema` instead. */
    MetricsTotalsOneTimeProductsNetRevenue$.outboundSchema = MetricsTotalsOneTimeProductsNetRevenue$outboundSchema;
})(MetricsTotalsOneTimeProductsNetRevenue$ || (MetricsTotalsOneTimeProductsNetRevenue$ = {}));
export function metricsTotalsOneTimeProductsNetRevenueToJSON(metricsTotalsOneTimeProductsNetRevenue) {
    return JSON.stringify(MetricsTotalsOneTimeProductsNetRevenue$outboundSchema.parse(metricsTotalsOneTimeProductsNetRevenue));
}
export function metricsTotalsOneTimeProductsNetRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsOneTimeProductsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsOneTimeProductsNetRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsNewSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsNewSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsNewSubscriptions$;
(function (MetricsTotalsNewSubscriptions$) {
    /** @deprecated use `MetricsTotalsNewSubscriptions$inboundSchema` instead. */
    MetricsTotalsNewSubscriptions$.inboundSchema = MetricsTotalsNewSubscriptions$inboundSchema;
    /** @deprecated use `MetricsTotalsNewSubscriptions$outboundSchema` instead. */
    MetricsTotalsNewSubscriptions$.outboundSchema = MetricsTotalsNewSubscriptions$outboundSchema;
})(MetricsTotalsNewSubscriptions$ || (MetricsTotalsNewSubscriptions$ = {}));
export function metricsTotalsNewSubscriptionsToJSON(metricsTotalsNewSubscriptions) {
    return JSON.stringify(MetricsTotalsNewSubscriptions$outboundSchema.parse(metricsTotalsNewSubscriptions));
}
export function metricsTotalsNewSubscriptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsNewSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNewSubscriptions' from JSON`);
}
/** @internal */
export const MetricsTotalsNewSubscriptionsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsNewSubscriptionsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsNewSubscriptionsRevenue$;
(function (MetricsTotalsNewSubscriptionsRevenue$) {
    /** @deprecated use `MetricsTotalsNewSubscriptionsRevenue$inboundSchema` instead. */
    MetricsTotalsNewSubscriptionsRevenue$.inboundSchema = MetricsTotalsNewSubscriptionsRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsNewSubscriptionsRevenue$outboundSchema` instead. */
    MetricsTotalsNewSubscriptionsRevenue$.outboundSchema = MetricsTotalsNewSubscriptionsRevenue$outboundSchema;
})(MetricsTotalsNewSubscriptionsRevenue$ || (MetricsTotalsNewSubscriptionsRevenue$ = {}));
export function metricsTotalsNewSubscriptionsRevenueToJSON(metricsTotalsNewSubscriptionsRevenue) {
    return JSON.stringify(MetricsTotalsNewSubscriptionsRevenue$outboundSchema.parse(metricsTotalsNewSubscriptionsRevenue));
}
export function metricsTotalsNewSubscriptionsRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsNewSubscriptionsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNewSubscriptionsRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsNewSubscriptionsNetRevenue$;
(function (MetricsTotalsNewSubscriptionsNetRevenue$) {
    /** @deprecated use `MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema` instead. */
    MetricsTotalsNewSubscriptionsNetRevenue$.inboundSchema = MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema` instead. */
    MetricsTotalsNewSubscriptionsNetRevenue$.outboundSchema = MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema;
})(MetricsTotalsNewSubscriptionsNetRevenue$ || (MetricsTotalsNewSubscriptionsNetRevenue$ = {}));
export function metricsTotalsNewSubscriptionsNetRevenueToJSON(metricsTotalsNewSubscriptionsNetRevenue) {
    return JSON.stringify(MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema.parse(metricsTotalsNewSubscriptionsNetRevenue));
}
export function metricsTotalsNewSubscriptionsNetRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNewSubscriptionsNetRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsRenewedSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsRenewedSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsRenewedSubscriptions$;
(function (MetricsTotalsRenewedSubscriptions$) {
    /** @deprecated use `MetricsTotalsRenewedSubscriptions$inboundSchema` instead. */
    MetricsTotalsRenewedSubscriptions$.inboundSchema = MetricsTotalsRenewedSubscriptions$inboundSchema;
    /** @deprecated use `MetricsTotalsRenewedSubscriptions$outboundSchema` instead. */
    MetricsTotalsRenewedSubscriptions$.outboundSchema = MetricsTotalsRenewedSubscriptions$outboundSchema;
})(MetricsTotalsRenewedSubscriptions$ || (MetricsTotalsRenewedSubscriptions$ = {}));
export function metricsTotalsRenewedSubscriptionsToJSON(metricsTotalsRenewedSubscriptions) {
    return JSON.stringify(MetricsTotalsRenewedSubscriptions$outboundSchema.parse(metricsTotalsRenewedSubscriptions));
}
export function metricsTotalsRenewedSubscriptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsRenewedSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsRenewedSubscriptions' from JSON`);
}
/** @internal */
export const MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsRenewedSubscriptionsRevenue$;
(function (MetricsTotalsRenewedSubscriptionsRevenue$) {
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema` instead. */
    MetricsTotalsRenewedSubscriptionsRevenue$.inboundSchema = MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema` instead. */
    MetricsTotalsRenewedSubscriptionsRevenue$.outboundSchema = MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema;
})(MetricsTotalsRenewedSubscriptionsRevenue$ || (MetricsTotalsRenewedSubscriptionsRevenue$ = {}));
export function metricsTotalsRenewedSubscriptionsRevenueToJSON(metricsTotalsRenewedSubscriptionsRevenue) {
    return JSON.stringify(MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema.parse(metricsTotalsRenewedSubscriptionsRevenue));
}
export function metricsTotalsRenewedSubscriptionsRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsRenewedSubscriptionsRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsRenewedSubscriptionsNetRevenue$;
(function (MetricsTotalsRenewedSubscriptionsNetRevenue$) {
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema` instead. */
    MetricsTotalsRenewedSubscriptionsNetRevenue$.inboundSchema = MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema` instead. */
    MetricsTotalsRenewedSubscriptionsNetRevenue$.outboundSchema = MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema;
})(MetricsTotalsRenewedSubscriptionsNetRevenue$ || (MetricsTotalsRenewedSubscriptionsNetRevenue$ = {}));
export function metricsTotalsRenewedSubscriptionsNetRevenueToJSON(metricsTotalsRenewedSubscriptionsNetRevenue) {
    return JSON.stringify(MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema.parse(metricsTotalsRenewedSubscriptionsNetRevenue));
}
export function metricsTotalsRenewedSubscriptionsNetRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsRenewedSubscriptionsNetRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsActiveSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsActiveSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsActiveSubscriptions$;
(function (MetricsTotalsActiveSubscriptions$) {
    /** @deprecated use `MetricsTotalsActiveSubscriptions$inboundSchema` instead. */
    MetricsTotalsActiveSubscriptions$.inboundSchema = MetricsTotalsActiveSubscriptions$inboundSchema;
    /** @deprecated use `MetricsTotalsActiveSubscriptions$outboundSchema` instead. */
    MetricsTotalsActiveSubscriptions$.outboundSchema = MetricsTotalsActiveSubscriptions$outboundSchema;
})(MetricsTotalsActiveSubscriptions$ || (MetricsTotalsActiveSubscriptions$ = {}));
export function metricsTotalsActiveSubscriptionsToJSON(metricsTotalsActiveSubscriptions) {
    return JSON.stringify(MetricsTotalsActiveSubscriptions$outboundSchema.parse(metricsTotalsActiveSubscriptions));
}
export function metricsTotalsActiveSubscriptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsActiveSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsActiveSubscriptions' from JSON`);
}
/** @internal */
export const MetricsTotalsMonthlyRecurringRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsMonthlyRecurringRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsMonthlyRecurringRevenue$;
(function (MetricsTotalsMonthlyRecurringRevenue$) {
    /** @deprecated use `MetricsTotalsMonthlyRecurringRevenue$inboundSchema` instead. */
    MetricsTotalsMonthlyRecurringRevenue$.inboundSchema = MetricsTotalsMonthlyRecurringRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsMonthlyRecurringRevenue$outboundSchema` instead. */
    MetricsTotalsMonthlyRecurringRevenue$.outboundSchema = MetricsTotalsMonthlyRecurringRevenue$outboundSchema;
})(MetricsTotalsMonthlyRecurringRevenue$ || (MetricsTotalsMonthlyRecurringRevenue$ = {}));
export function metricsTotalsMonthlyRecurringRevenueToJSON(metricsTotalsMonthlyRecurringRevenue) {
    return JSON.stringify(MetricsTotalsMonthlyRecurringRevenue$outboundSchema.parse(metricsTotalsMonthlyRecurringRevenue));
}
export function metricsTotalsMonthlyRecurringRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsMonthlyRecurringRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsMonthlyRecurringRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsCommittedMonthlyRecurringRevenue$;
(function (MetricsTotalsCommittedMonthlyRecurringRevenue$) {
    /** @deprecated use `MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema` instead. */
    MetricsTotalsCommittedMonthlyRecurringRevenue$.inboundSchema = MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema` instead. */
    MetricsTotalsCommittedMonthlyRecurringRevenue$.outboundSchema = MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema;
})(MetricsTotalsCommittedMonthlyRecurringRevenue$ || (MetricsTotalsCommittedMonthlyRecurringRevenue$ = {}));
export function metricsTotalsCommittedMonthlyRecurringRevenueToJSON(metricsTotalsCommittedMonthlyRecurringRevenue) {
    return JSON.stringify(MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema.parse(metricsTotalsCommittedMonthlyRecurringRevenue));
}
export function metricsTotalsCommittedMonthlyRecurringRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsCommittedMonthlyRecurringRevenue' from JSON`);
}
/** @internal */
export const MetricsTotalsCheckouts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsCheckouts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsCheckouts$;
(function (MetricsTotalsCheckouts$) {
    /** @deprecated use `MetricsTotalsCheckouts$inboundSchema` instead. */
    MetricsTotalsCheckouts$.inboundSchema = MetricsTotalsCheckouts$inboundSchema;
    /** @deprecated use `MetricsTotalsCheckouts$outboundSchema` instead. */
    MetricsTotalsCheckouts$.outboundSchema = MetricsTotalsCheckouts$outboundSchema;
})(MetricsTotalsCheckouts$ || (MetricsTotalsCheckouts$ = {}));
export function metricsTotalsCheckoutsToJSON(metricsTotalsCheckouts) {
    return JSON.stringify(MetricsTotalsCheckouts$outboundSchema.parse(metricsTotalsCheckouts));
}
export function metricsTotalsCheckoutsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsCheckouts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsCheckouts' from JSON`);
}
/** @internal */
export const MetricsTotalsSucceededCheckouts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsSucceededCheckouts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsSucceededCheckouts$;
(function (MetricsTotalsSucceededCheckouts$) {
    /** @deprecated use `MetricsTotalsSucceededCheckouts$inboundSchema` instead. */
    MetricsTotalsSucceededCheckouts$.inboundSchema = MetricsTotalsSucceededCheckouts$inboundSchema;
    /** @deprecated use `MetricsTotalsSucceededCheckouts$outboundSchema` instead. */
    MetricsTotalsSucceededCheckouts$.outboundSchema = MetricsTotalsSucceededCheckouts$outboundSchema;
})(MetricsTotalsSucceededCheckouts$ || (MetricsTotalsSucceededCheckouts$ = {}));
export function metricsTotalsSucceededCheckoutsToJSON(metricsTotalsSucceededCheckouts) {
    return JSON.stringify(MetricsTotalsSucceededCheckouts$outboundSchema.parse(metricsTotalsSucceededCheckouts));
}
export function metricsTotalsSucceededCheckoutsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsSucceededCheckouts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsSucceededCheckouts' from JSON`);
}
/** @internal */
export const MetricsTotalsCheckoutsConversion$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MetricsTotalsCheckoutsConversion$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotalsCheckoutsConversion$;
(function (MetricsTotalsCheckoutsConversion$) {
    /** @deprecated use `MetricsTotalsCheckoutsConversion$inboundSchema` instead. */
    MetricsTotalsCheckoutsConversion$.inboundSchema = MetricsTotalsCheckoutsConversion$inboundSchema;
    /** @deprecated use `MetricsTotalsCheckoutsConversion$outboundSchema` instead. */
    MetricsTotalsCheckoutsConversion$.outboundSchema = MetricsTotalsCheckoutsConversion$outboundSchema;
})(MetricsTotalsCheckoutsConversion$ || (MetricsTotalsCheckoutsConversion$ = {}));
export function metricsTotalsCheckoutsConversionToJSON(metricsTotalsCheckoutsConversion) {
    return JSON.stringify(MetricsTotalsCheckoutsConversion$outboundSchema.parse(metricsTotalsCheckoutsConversion));
}
export function metricsTotalsCheckoutsConversionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotalsCheckoutsConversion$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsCheckoutsConversion' from JSON`);
}
/** @internal */
export const MetricsTotals$inboundSchema = z.object({
    orders: z.union([z.number().int(), z.number()]),
    revenue: z.union([z.number().int(), z.number()]),
    net_revenue: z.union([z.number().int(), z.number()]),
    cumulative_revenue: z.union([z.number().int(), z.number()]),
    net_cumulative_revenue: z.union([z.number().int(), z.number()]),
    average_order_value: z.union([z.number().int(), z.number()]),
    net_average_order_value: z.union([z.number().int(), z.number()]),
    one_time_products: z.union([z.number().int(), z.number()]),
    one_time_products_revenue: z.union([z.number().int(), z.number()]),
    one_time_products_net_revenue: z.union([z.number().int(), z.number()]),
    new_subscriptions: z.union([z.number().int(), z.number()]),
    new_subscriptions_revenue: z.union([z.number().int(), z.number()]),
    new_subscriptions_net_revenue: z.union([z.number().int(), z.number()]),
    renewed_subscriptions: z.union([z.number().int(), z.number()]),
    renewed_subscriptions_revenue: z.union([z.number().int(), z.number()]),
    renewed_subscriptions_net_revenue: z.union([z.number().int(), z.number()]),
    active_subscriptions: z.union([z.number().int(), z.number()]),
    monthly_recurring_revenue: z.union([z.number().int(), z.number()]),
    committed_monthly_recurring_revenue: z.union([z.number().int(), z.number()]),
    checkouts: z.union([z.number().int(), z.number()]),
    succeeded_checkouts: z.union([z.number().int(), z.number()]),
    checkouts_conversion: z.union([z.number().int(), z.number()]),
}).transform((v) => {
    return remap$(v, {
        "net_revenue": "netRevenue",
        "cumulative_revenue": "cumulativeRevenue",
        "net_cumulative_revenue": "netCumulativeRevenue",
        "average_order_value": "averageOrderValue",
        "net_average_order_value": "netAverageOrderValue",
        "one_time_products": "oneTimeProducts",
        "one_time_products_revenue": "oneTimeProductsRevenue",
        "one_time_products_net_revenue": "oneTimeProductsNetRevenue",
        "new_subscriptions": "newSubscriptions",
        "new_subscriptions_revenue": "newSubscriptionsRevenue",
        "new_subscriptions_net_revenue": "newSubscriptionsNetRevenue",
        "renewed_subscriptions": "renewedSubscriptions",
        "renewed_subscriptions_revenue": "renewedSubscriptionsRevenue",
        "renewed_subscriptions_net_revenue": "renewedSubscriptionsNetRevenue",
        "active_subscriptions": "activeSubscriptions",
        "monthly_recurring_revenue": "monthlyRecurringRevenue",
        "committed_monthly_recurring_revenue": "committedMonthlyRecurringRevenue",
        "succeeded_checkouts": "succeededCheckouts",
        "checkouts_conversion": "checkoutsConversion",
    });
});
/** @internal */
export const MetricsTotals$outboundSchema = z.object({
    orders: z.union([z.number().int(), z.number()]),
    revenue: z.union([z.number().int(), z.number()]),
    netRevenue: z.union([z.number().int(), z.number()]),
    cumulativeRevenue: z.union([z.number().int(), z.number()]),
    netCumulativeRevenue: z.union([z.number().int(), z.number()]),
    averageOrderValue: z.union([z.number().int(), z.number()]),
    netAverageOrderValue: z.union([z.number().int(), z.number()]),
    oneTimeProducts: z.union([z.number().int(), z.number()]),
    oneTimeProductsRevenue: z.union([z.number().int(), z.number()]),
    oneTimeProductsNetRevenue: z.union([z.number().int(), z.number()]),
    newSubscriptions: z.union([z.number().int(), z.number()]),
    newSubscriptionsRevenue: z.union([z.number().int(), z.number()]),
    newSubscriptionsNetRevenue: z.union([z.number().int(), z.number()]),
    renewedSubscriptions: z.union([z.number().int(), z.number()]),
    renewedSubscriptionsRevenue: z.union([z.number().int(), z.number()]),
    renewedSubscriptionsNetRevenue: z.union([z.number().int(), z.number()]),
    activeSubscriptions: z.union([z.number().int(), z.number()]),
    monthlyRecurringRevenue: z.union([z.number().int(), z.number()]),
    committedMonthlyRecurringRevenue: z.union([z.number().int(), z.number()]),
    checkouts: z.union([z.number().int(), z.number()]),
    succeededCheckouts: z.union([z.number().int(), z.number()]),
    checkoutsConversion: z.union([z.number().int(), z.number()]),
}).transform((v) => {
    return remap$(v, {
        netRevenue: "net_revenue",
        cumulativeRevenue: "cumulative_revenue",
        netCumulativeRevenue: "net_cumulative_revenue",
        averageOrderValue: "average_order_value",
        netAverageOrderValue: "net_average_order_value",
        oneTimeProducts: "one_time_products",
        oneTimeProductsRevenue: "one_time_products_revenue",
        oneTimeProductsNetRevenue: "one_time_products_net_revenue",
        newSubscriptions: "new_subscriptions",
        newSubscriptionsRevenue: "new_subscriptions_revenue",
        newSubscriptionsNetRevenue: "new_subscriptions_net_revenue",
        renewedSubscriptions: "renewed_subscriptions",
        renewedSubscriptionsRevenue: "renewed_subscriptions_revenue",
        renewedSubscriptionsNetRevenue: "renewed_subscriptions_net_revenue",
        activeSubscriptions: "active_subscriptions",
        monthlyRecurringRevenue: "monthly_recurring_revenue",
        committedMonthlyRecurringRevenue: "committed_monthly_recurring_revenue",
        succeededCheckouts: "succeeded_checkouts",
        checkoutsConversion: "checkouts_conversion",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricsTotals$;
(function (MetricsTotals$) {
    /** @deprecated use `MetricsTotals$inboundSchema` instead. */
    MetricsTotals$.inboundSchema = MetricsTotals$inboundSchema;
    /** @deprecated use `MetricsTotals$outboundSchema` instead. */
    MetricsTotals$.outboundSchema = MetricsTotals$outboundSchema;
})(MetricsTotals$ || (MetricsTotals$ = {}));
export function metricsTotalsToJSON(metricsTotals) {
    return JSON.stringify(MetricsTotals$outboundSchema.parse(metricsTotals));
}
export function metricsTotalsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricsTotals$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotals' from JSON`);
}
//# sourceMappingURL=metricstotals.js.map