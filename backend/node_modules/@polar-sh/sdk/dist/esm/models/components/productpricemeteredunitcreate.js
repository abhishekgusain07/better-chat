/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const UnitAmount$inboundSchema = z.union([z.number(), z.string()]);
/** @internal */
export const UnitAmount$outboundSchema = z.union([z.number(), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UnitAmount$;
(function (UnitAmount$) {
    /** @deprecated use `UnitAmount$inboundSchema` instead. */
    UnitAmount$.inboundSchema = UnitAmount$inboundSchema;
    /** @deprecated use `UnitAmount$outboundSchema` instead. */
    UnitAmount$.outboundSchema = UnitAmount$outboundSchema;
})(UnitAmount$ || (UnitAmount$ = {}));
export function unitAmountToJSON(unitAmount) {
    return JSON.stringify(UnitAmount$outboundSchema.parse(unitAmount));
}
export function unitAmountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UnitAmount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UnitAmount' from JSON`);
}
/** @internal */
export const ProductPriceMeteredUnitCreate$inboundSchema = z.object({
    amount_type: z.literal("metered_unit"),
    meter_id: z.string(),
    price_currency: z.string().default("usd"),
    unit_amount: z.union([z.number(), z.string()]),
    cap_amount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
    return remap$(v, {
        "amount_type": "amountType",
        "meter_id": "meterId",
        "price_currency": "priceCurrency",
        "unit_amount": "unitAmount",
        "cap_amount": "capAmount",
    });
});
/** @internal */
export const ProductPriceMeteredUnitCreate$outboundSchema = z.object({
    amountType: z.literal("metered_unit"),
    meterId: z.string(),
    priceCurrency: z.string().default("usd"),
    unitAmount: z.union([z.number(), z.string()]),
    capAmount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
    return remap$(v, {
        amountType: "amount_type",
        meterId: "meter_id",
        priceCurrency: "price_currency",
        unitAmount: "unit_amount",
        capAmount: "cap_amount",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductPriceMeteredUnitCreate$;
(function (ProductPriceMeteredUnitCreate$) {
    /** @deprecated use `ProductPriceMeteredUnitCreate$inboundSchema` instead. */
    ProductPriceMeteredUnitCreate$.inboundSchema = ProductPriceMeteredUnitCreate$inboundSchema;
    /** @deprecated use `ProductPriceMeteredUnitCreate$outboundSchema` instead. */
    ProductPriceMeteredUnitCreate$.outboundSchema = ProductPriceMeteredUnitCreate$outboundSchema;
})(ProductPriceMeteredUnitCreate$ || (ProductPriceMeteredUnitCreate$ = {}));
export function productPriceMeteredUnitCreateToJSON(productPriceMeteredUnitCreate) {
    return JSON.stringify(ProductPriceMeteredUnitCreate$outboundSchema.parse(productPriceMeteredUnitCreate));
}
export function productPriceMeteredUnitCreateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductPriceMeteredUnitCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductPriceMeteredUnitCreate' from JSON`);
}
//# sourceMappingURL=productpricemeteredunitcreate.js.map