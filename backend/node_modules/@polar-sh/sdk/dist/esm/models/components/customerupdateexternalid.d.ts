import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
import { TaxIDFormat } from "./taxidformat.js";
export type CustomerUpdateExternalIDMetadata = string | number | number | boolean;
export type CustomerUpdateExternalIDTaxID = string | TaxIDFormat;
export type CustomerUpdateExternalID = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    /**
     * The email address of the customer. This must be unique within the organization.
     */
    email?: string | null | undefined;
    /**
     * The name of the customer.
     */
    name?: string | null | undefined;
    billingAddress?: Address | null | undefined;
    taxId?: Array<string | TaxIDFormat | null> | null | undefined;
};
/** @internal */
export declare const CustomerUpdateExternalIDMetadata$inboundSchema: z.ZodType<CustomerUpdateExternalIDMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerUpdateExternalIDMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const CustomerUpdateExternalIDMetadata$outboundSchema: z.ZodType<CustomerUpdateExternalIDMetadata$Outbound, z.ZodTypeDef, CustomerUpdateExternalIDMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerUpdateExternalIDMetadata$ {
    /** @deprecated use `CustomerUpdateExternalIDMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerUpdateExternalIDMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerUpdateExternalIDMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerUpdateExternalIDMetadata$Outbound, z.ZodTypeDef, CustomerUpdateExternalIDMetadata>;
    /** @deprecated use `CustomerUpdateExternalIDMetadata$Outbound` instead. */
    type Outbound = CustomerUpdateExternalIDMetadata$Outbound;
}
export declare function customerUpdateExternalIDMetadataToJSON(customerUpdateExternalIDMetadata: CustomerUpdateExternalIDMetadata): string;
export declare function customerUpdateExternalIDMetadataFromJSON(jsonString: string): SafeParseResult<CustomerUpdateExternalIDMetadata, SDKValidationError>;
/** @internal */
export declare const CustomerUpdateExternalIDTaxID$inboundSchema: z.ZodType<CustomerUpdateExternalIDTaxID, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerUpdateExternalIDTaxID$Outbound = string | string;
/** @internal */
export declare const CustomerUpdateExternalIDTaxID$outboundSchema: z.ZodType<CustomerUpdateExternalIDTaxID$Outbound, z.ZodTypeDef, CustomerUpdateExternalIDTaxID>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerUpdateExternalIDTaxID$ {
    /** @deprecated use `CustomerUpdateExternalIDTaxID$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerUpdateExternalIDTaxID$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `CustomerUpdateExternalIDTaxID$Outbound` instead. */
    type Outbound = CustomerUpdateExternalIDTaxID$Outbound;
}
export declare function customerUpdateExternalIDTaxIDToJSON(customerUpdateExternalIDTaxID: CustomerUpdateExternalIDTaxID): string;
export declare function customerUpdateExternalIDTaxIDFromJSON(jsonString: string): SafeParseResult<CustomerUpdateExternalIDTaxID, SDKValidationError>;
/** @internal */
export declare const CustomerUpdateExternalID$inboundSchema: z.ZodType<CustomerUpdateExternalID, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerUpdateExternalID$Outbound = {
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    email?: string | null | undefined;
    name?: string | null | undefined;
    billing_address?: Address$Outbound | null | undefined;
    tax_id?: Array<string | string | null> | null | undefined;
};
/** @internal */
export declare const CustomerUpdateExternalID$outboundSchema: z.ZodType<CustomerUpdateExternalID$Outbound, z.ZodTypeDef, CustomerUpdateExternalID>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerUpdateExternalID$ {
    /** @deprecated use `CustomerUpdateExternalID$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerUpdateExternalID, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerUpdateExternalID$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerUpdateExternalID$Outbound, z.ZodTypeDef, CustomerUpdateExternalID>;
    /** @deprecated use `CustomerUpdateExternalID$Outbound` instead. */
    type Outbound = CustomerUpdateExternalID$Outbound;
}
export declare function customerUpdateExternalIDToJSON(customerUpdateExternalID: CustomerUpdateExternalID): string;
export declare function customerUpdateExternalIDFromJSON(jsonString: string): SafeParseResult<CustomerUpdateExternalID, SDKValidationError>;
//# sourceMappingURL=customerupdateexternalid.d.ts.map