import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CardPaymentMetadata, CardPaymentMetadata$Outbound } from "./cardpaymentmetadata.js";
import { PaymentProcessor } from "./paymentprocessor.js";
import { PaymentStatus } from "./paymentstatus.js";
/**
 * Schema of a payment with a card payment method.
 */
export type CardPayment = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    processor: PaymentProcessor;
    status: PaymentStatus;
    /**
     * The payment amount in cents.
     */
    amount: number;
    /**
     * The payment currency. Currently, only `usd` is supported.
     */
    currency: string;
    /**
     * The payment method used.
     */
    method: "card";
    /**
     * Error code, if the payment was declined.
     */
    declineReason: string | null;
    /**
     * Human-reasable error message, if the payment was declined.
     */
    declineMessage: string | null;
    /**
     * The ID of the organization that owns the payment.
     */
    organizationId: string;
    /**
     * The ID of the checkout session associated with this payment.
     */
    checkoutId: string | null;
    /**
     * The ID of the order associated with this payment.
     */
    orderId: string | null;
    /**
     * Additional metadata from the payment processor for internal use.
     */
    processorMetadata?: {
        [k: string]: any;
    } | undefined;
    /**
     * Additional metadata for a card payment method.
     */
    methodMetadata: CardPaymentMetadata;
};
/** @internal */
export declare const CardPayment$inboundSchema: z.ZodType<CardPayment, z.ZodTypeDef, unknown>;
/** @internal */
export type CardPayment$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    processor: string;
    status: string;
    amount: number;
    currency: string;
    method: "card";
    decline_reason: string | null;
    decline_message: string | null;
    organization_id: string;
    checkout_id: string | null;
    order_id: string | null;
    processor_metadata?: {
        [k: string]: any;
    } | undefined;
    method_metadata: CardPaymentMetadata$Outbound;
};
/** @internal */
export declare const CardPayment$outboundSchema: z.ZodType<CardPayment$Outbound, z.ZodTypeDef, CardPayment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CardPayment$ {
    /** @deprecated use `CardPayment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CardPayment, z.ZodTypeDef, unknown>;
    /** @deprecated use `CardPayment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CardPayment$Outbound, z.ZodTypeDef, CardPayment>;
    /** @deprecated use `CardPayment$Outbound` instead. */
    type Outbound = CardPayment$Outbound;
}
export declare function cardPaymentToJSON(cardPayment: CardPayment): string;
export declare function cardPaymentFromJSON(jsonString: string): SafeParseResult<CardPayment, SDKValidationError>;
//# sourceMappingURL=cardpayment.d.ts.map