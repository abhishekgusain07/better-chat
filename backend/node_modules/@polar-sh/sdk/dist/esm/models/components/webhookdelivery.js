/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { WebhookEvent$inboundSchema, WebhookEvent$outboundSchema, } from "./webhookevent.js";
/** @internal */
export const WebhookDelivery$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    http_code: z.nullable(z.number().int()).optional(),
    succeeded: z.boolean(),
    webhook_event: WebhookEvent$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "http_code": "httpCode",
        "webhook_event": "webhookEvent",
    });
});
/** @internal */
export const WebhookDelivery$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    httpCode: z.nullable(z.number().int()).optional(),
    succeeded: z.boolean(),
    webhookEvent: WebhookEvent$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        httpCode: "http_code",
        webhookEvent: "webhook_event",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebhookDelivery$;
(function (WebhookDelivery$) {
    /** @deprecated use `WebhookDelivery$inboundSchema` instead. */
    WebhookDelivery$.inboundSchema = WebhookDelivery$inboundSchema;
    /** @deprecated use `WebhookDelivery$outboundSchema` instead. */
    WebhookDelivery$.outboundSchema = WebhookDelivery$outboundSchema;
})(WebhookDelivery$ || (WebhookDelivery$ = {}));
export function webhookDeliveryToJSON(webhookDelivery) {
    return JSON.stringify(WebhookDelivery$outboundSchema.parse(webhookDelivery));
}
export function webhookDeliveryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WebhookDelivery$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookDelivery' from JSON`);
}
//# sourceMappingURL=webhookdelivery.js.map