import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { BenefitCycledEvent, BenefitCycledEvent$Outbound } from "./benefitcycledevent.js";
import { BenefitGrantedEvent, BenefitGrantedEvent$Outbound } from "./benefitgrantedevent.js";
import { BenefitRevokedEvent, BenefitRevokedEvent$Outbound } from "./benefitrevokedevent.js";
import { BenefitUpdatedEvent, BenefitUpdatedEvent$Outbound } from "./benefitupdatedevent.js";
import { MeterCreditEvent, MeterCreditEvent$Outbound } from "./metercreditevent.js";
import { MeterResetEvent, MeterResetEvent$Outbound } from "./meterresetevent.js";
export type SystemEvent = (BenefitCycledEvent & {
    name: "benefit.cycled";
}) | (BenefitGrantedEvent & {
    name: "benefit.granted";
}) | (BenefitRevokedEvent & {
    name: "benefit.revoked";
}) | (BenefitUpdatedEvent & {
    name: "benefit.updated";
}) | (MeterCreditEvent & {
    name: "meter.credited";
}) | (MeterResetEvent & {
    name: "meter.reset";
});
/** @internal */
export declare const SystemEvent$inboundSchema: z.ZodType<SystemEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type SystemEvent$Outbound = (BenefitCycledEvent$Outbound & {
    name: "benefit.cycled";
}) | (BenefitGrantedEvent$Outbound & {
    name: "benefit.granted";
}) | (BenefitRevokedEvent$Outbound & {
    name: "benefit.revoked";
}) | (BenefitUpdatedEvent$Outbound & {
    name: "benefit.updated";
}) | (MeterCreditEvent$Outbound & {
    name: "meter.credited";
}) | (MeterResetEvent$Outbound & {
    name: "meter.reset";
});
/** @internal */
export declare const SystemEvent$outboundSchema: z.ZodType<SystemEvent$Outbound, z.ZodTypeDef, SystemEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SystemEvent$ {
    /** @deprecated use `SystemEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SystemEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `SystemEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SystemEvent$Outbound, z.ZodTypeDef, SystemEvent>;
    /** @deprecated use `SystemEvent$Outbound` instead. */
    type Outbound = SystemEvent$Outbound;
}
export declare function systemEventToJSON(systemEvent: SystemEvent): string;
export declare function systemEventFromJSON(jsonString: string): SafeParseResult<SystemEvent, SDKValidationError>;
//# sourceMappingURL=systemevent.d.ts.map