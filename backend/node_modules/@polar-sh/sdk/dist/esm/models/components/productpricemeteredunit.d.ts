import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { ProductPriceMeter, ProductPriceMeter$Outbound } from "./productpricemeter.js";
import { ProductPriceType } from "./productpricetype.js";
import { SubscriptionRecurringInterval } from "./subscriptionrecurringinterval.js";
/**
 * A metered, usage-based, price for a product, with a fixed unit price.
 */
export type ProductPriceMeteredUnit = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the price.
     */
    id: string;
    amountType: "metered_unit";
    /**
     * Whether the price is archived and no longer available.
     */
    isArchived: boolean;
    /**
     * The ID of the product owning the price.
     */
    productId: string;
    type: ProductPriceType;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    recurringInterval: SubscriptionRecurringInterval | null;
    /**
     * The currency.
     */
    priceCurrency: string;
    /**
     * The price per unit in cents.
     */
    unitAmount: string;
    /**
     * The maximum amount in cents that can be charged, regardless of the number of units consumed.
     */
    capAmount: number | null;
    /**
     * The ID of the meter associated to the price.
     */
    meterId: string;
    /**
     * A meter associated to a metered price.
     */
    meter: ProductPriceMeter;
};
/** @internal */
export declare const ProductPriceMeteredUnit$inboundSchema: z.ZodType<ProductPriceMeteredUnit, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductPriceMeteredUnit$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    amount_type: "metered_unit";
    is_archived: boolean;
    product_id: string;
    type: string;
    recurring_interval: string | null;
    price_currency: string;
    unit_amount: string;
    cap_amount: number | null;
    meter_id: string;
    meter: ProductPriceMeter$Outbound;
};
/** @internal */
export declare const ProductPriceMeteredUnit$outboundSchema: z.ZodType<ProductPriceMeteredUnit$Outbound, z.ZodTypeDef, ProductPriceMeteredUnit>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductPriceMeteredUnit$ {
    /** @deprecated use `ProductPriceMeteredUnit$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductPriceMeteredUnit, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductPriceMeteredUnit$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductPriceMeteredUnit$Outbound, z.ZodTypeDef, ProductPriceMeteredUnit>;
    /** @deprecated use `ProductPriceMeteredUnit$Outbound` instead. */
    type Outbound = ProductPriceMeteredUnit$Outbound;
}
export declare function productPriceMeteredUnitToJSON(productPriceMeteredUnit: ProductPriceMeteredUnit): string;
export declare function productPriceMeteredUnitFromJSON(jsonString: string): SafeParseResult<ProductPriceMeteredUnit, SDKValidationError>;
//# sourceMappingURL=productpricemeteredunit.d.ts.map