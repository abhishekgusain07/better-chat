/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { PaymentProcessor$inboundSchema, PaymentProcessor$outboundSchema, } from "./paymentprocessor.js";
import { PaymentStatus$inboundSchema, PaymentStatus$outboundSchema, } from "./paymentstatus.js";
/** @internal */
export const GenericPayment$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    processor: PaymentProcessor$inboundSchema,
    status: PaymentStatus$inboundSchema,
    amount: z.number().int(),
    currency: z.string(),
    method: z.string(),
    decline_reason: z.nullable(z.string()),
    decline_message: z.nullable(z.string()),
    organization_id: z.string(),
    checkout_id: z.nullable(z.string()),
    order_id: z.nullable(z.string()),
    processor_metadata: z.record(z.any()).optional(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "decline_reason": "declineReason",
        "decline_message": "declineMessage",
        "organization_id": "organizationId",
        "checkout_id": "checkoutId",
        "order_id": "orderId",
        "processor_metadata": "processorMetadata",
    });
});
/** @internal */
export const GenericPayment$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    processor: PaymentProcessor$outboundSchema,
    status: PaymentStatus$outboundSchema,
    amount: z.number().int(),
    currency: z.string(),
    method: z.string(),
    declineReason: z.nullable(z.string()),
    declineMessage: z.nullable(z.string()),
    organizationId: z.string(),
    checkoutId: z.nullable(z.string()),
    orderId: z.nullable(z.string()),
    processorMetadata: z.record(z.any()).optional(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        declineReason: "decline_reason",
        declineMessage: "decline_message",
        organizationId: "organization_id",
        checkoutId: "checkout_id",
        orderId: "order_id",
        processorMetadata: "processor_metadata",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GenericPayment$;
(function (GenericPayment$) {
    /** @deprecated use `GenericPayment$inboundSchema` instead. */
    GenericPayment$.inboundSchema = GenericPayment$inboundSchema;
    /** @deprecated use `GenericPayment$outboundSchema` instead. */
    GenericPayment$.outboundSchema = GenericPayment$outboundSchema;
})(GenericPayment$ || (GenericPayment$ = {}));
export function genericPaymentToJSON(genericPayment) {
    return JSON.stringify(GenericPayment$outboundSchema.parse(genericPayment));
}
export function genericPaymentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GenericPayment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GenericPayment' from JSON`);
}
//# sourceMappingURL=genericpayment.js.map