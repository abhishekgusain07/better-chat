import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { BenefitGitHubRepositoryCreateProperties, BenefitGitHubRepositoryCreateProperties$Outbound } from "./benefitgithubrepositorycreateproperties.js";
export type BenefitGitHubRepositoryUpdateMetadata = string | number | number | boolean;
export type BenefitGitHubRepositoryUpdate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    /**
     * The description of the benefit. Will be displayed on products having this benefit.
     */
    description?: string | null | undefined;
    type: "github_repository";
    properties?: BenefitGitHubRepositoryCreateProperties | null | undefined;
};
/** @internal */
export declare const BenefitGitHubRepositoryUpdateMetadata$inboundSchema: z.ZodType<BenefitGitHubRepositoryUpdateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitGitHubRepositoryUpdateMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const BenefitGitHubRepositoryUpdateMetadata$outboundSchema: z.ZodType<BenefitGitHubRepositoryUpdateMetadata$Outbound, z.ZodTypeDef, BenefitGitHubRepositoryUpdateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitGitHubRepositoryUpdateMetadata$ {
    /** @deprecated use `BenefitGitHubRepositoryUpdateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitGitHubRepositoryUpdateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitGitHubRepositoryUpdateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitGitHubRepositoryUpdateMetadata$Outbound, z.ZodTypeDef, BenefitGitHubRepositoryUpdateMetadata>;
    /** @deprecated use `BenefitGitHubRepositoryUpdateMetadata$Outbound` instead. */
    type Outbound = BenefitGitHubRepositoryUpdateMetadata$Outbound;
}
export declare function benefitGitHubRepositoryUpdateMetadataToJSON(benefitGitHubRepositoryUpdateMetadata: BenefitGitHubRepositoryUpdateMetadata): string;
export declare function benefitGitHubRepositoryUpdateMetadataFromJSON(jsonString: string): SafeParseResult<BenefitGitHubRepositoryUpdateMetadata, SDKValidationError>;
/** @internal */
export declare const BenefitGitHubRepositoryUpdate$inboundSchema: z.ZodType<BenefitGitHubRepositoryUpdate, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitGitHubRepositoryUpdate$Outbound = {
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    description?: string | null | undefined;
    type: "github_repository";
    properties?: BenefitGitHubRepositoryCreateProperties$Outbound | null | undefined;
};
/** @internal */
export declare const BenefitGitHubRepositoryUpdate$outboundSchema: z.ZodType<BenefitGitHubRepositoryUpdate$Outbound, z.ZodTypeDef, BenefitGitHubRepositoryUpdate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitGitHubRepositoryUpdate$ {
    /** @deprecated use `BenefitGitHubRepositoryUpdate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitGitHubRepositoryUpdate, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitGitHubRepositoryUpdate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitGitHubRepositoryUpdate$Outbound, z.ZodTypeDef, BenefitGitHubRepositoryUpdate>;
    /** @deprecated use `BenefitGitHubRepositoryUpdate$Outbound` instead. */
    type Outbound = BenefitGitHubRepositoryUpdate$Outbound;
}
export declare function benefitGitHubRepositoryUpdateToJSON(benefitGitHubRepositoryUpdate: BenefitGitHubRepositoryUpdate): string;
export declare function benefitGitHubRepositoryUpdateFromJSON(jsonString: string): SafeParseResult<BenefitGitHubRepositoryUpdate, SDKValidationError>;
//# sourceMappingURL=benefitgithubrepositoryupdate.d.ts.map