import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SubscriptionRecurringInterval } from "./subscriptionrecurringinterval.js";
export type OrderProductMetadata = string | number | number | boolean;
export type OrderProduct = {
    metadata: {
        [k: string]: string | number | number | boolean;
    };
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the product.
     */
    id: string;
    /**
     * The name of the product.
     */
    name: string;
    /**
     * The description of the product.
     */
    description: string | null;
    /**
     * The recurring interval of the product. If `None`, the product is a one-time purchase.
     */
    recurringInterval: SubscriptionRecurringInterval | null;
    /**
     * Whether the product is a subscription.
     */
    isRecurring: boolean;
    /**
     * Whether the product is archived and no longer available.
     */
    isArchived: boolean;
    /**
     * The ID of the organization owning the product.
     */
    organizationId: string;
};
/** @internal */
export declare const OrderProductMetadata$inboundSchema: z.ZodType<OrderProductMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type OrderProductMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const OrderProductMetadata$outboundSchema: z.ZodType<OrderProductMetadata$Outbound, z.ZodTypeDef, OrderProductMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OrderProductMetadata$ {
    /** @deprecated use `OrderProductMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OrderProductMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `OrderProductMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OrderProductMetadata$Outbound, z.ZodTypeDef, OrderProductMetadata>;
    /** @deprecated use `OrderProductMetadata$Outbound` instead. */
    type Outbound = OrderProductMetadata$Outbound;
}
export declare function orderProductMetadataToJSON(orderProductMetadata: OrderProductMetadata): string;
export declare function orderProductMetadataFromJSON(jsonString: string): SafeParseResult<OrderProductMetadata, SDKValidationError>;
/** @internal */
export declare const OrderProduct$inboundSchema: z.ZodType<OrderProduct, z.ZodTypeDef, unknown>;
/** @internal */
export type OrderProduct$Outbound = {
    metadata: {
        [k: string]: string | number | number | boolean;
    };
    created_at: string;
    modified_at: string | null;
    id: string;
    name: string;
    description: string | null;
    recurring_interval: string | null;
    is_recurring: boolean;
    is_archived: boolean;
    organization_id: string;
};
/** @internal */
export declare const OrderProduct$outboundSchema: z.ZodType<OrderProduct$Outbound, z.ZodTypeDef, OrderProduct>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OrderProduct$ {
    /** @deprecated use `OrderProduct$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OrderProduct, z.ZodTypeDef, unknown>;
    /** @deprecated use `OrderProduct$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OrderProduct$Outbound, z.ZodTypeDef, OrderProduct>;
    /** @deprecated use `OrderProduct$Outbound` instead. */
    type Outbound = OrderProduct$Outbound;
}
export declare function orderProductToJSON(orderProduct: OrderProduct): string;
export declare function orderProductFromJSON(jsonString: string): SafeParseResult<OrderProduct, SDKValidationError>;
//# sourceMappingURL=orderproduct.d.ts.map