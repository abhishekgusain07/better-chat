/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitCustomProperties$inboundSchema, BenefitCustomProperties$outboundSchema, } from "./benefitcustomproperties.js";
/** @internal */
export const BenefitCustomMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const BenefitCustomMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitCustomMetadata$;
(function (BenefitCustomMetadata$) {
    /** @deprecated use `BenefitCustomMetadata$inboundSchema` instead. */
    BenefitCustomMetadata$.inboundSchema = BenefitCustomMetadata$inboundSchema;
    /** @deprecated use `BenefitCustomMetadata$outboundSchema` instead. */
    BenefitCustomMetadata$.outboundSchema = BenefitCustomMetadata$outboundSchema;
})(BenefitCustomMetadata$ || (BenefitCustomMetadata$ = {}));
export function benefitCustomMetadataToJSON(benefitCustomMetadata) {
    return JSON.stringify(BenefitCustomMetadata$outboundSchema.parse(benefitCustomMetadata));
}
export function benefitCustomMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitCustomMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitCustomMetadata' from JSON`);
}
/** @internal */
export const BenefitCustom$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    type: z.literal("custom"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organization_id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    properties: BenefitCustomProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const BenefitCustom$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    type: z.literal("custom"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organizationId: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    properties: BenefitCustomProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitCustom$;
(function (BenefitCustom$) {
    /** @deprecated use `BenefitCustom$inboundSchema` instead. */
    BenefitCustom$.inboundSchema = BenefitCustom$inboundSchema;
    /** @deprecated use `BenefitCustom$outboundSchema` instead. */
    BenefitCustom$.outboundSchema = BenefitCustom$outboundSchema;
})(BenefitCustom$ || (BenefitCustom$ = {}));
export function benefitCustomToJSON(benefitCustom) {
    return JSON.stringify(BenefitCustom$outboundSchema.parse(benefitCustom));
}
export function benefitCustomFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitCustom$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitCustom' from JSON`);
}
//# sourceMappingURL=benefitcustom.js.map