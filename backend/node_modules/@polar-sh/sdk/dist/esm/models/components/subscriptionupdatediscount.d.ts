import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type SubscriptionUpdateDiscount = {
    /**
     * Update the subscription to apply a new discount. If set to `null`, the discount will be removed. The change will be applied on the next billing cycle.
     */
    discountId: string | null;
};
/** @internal */
export declare const SubscriptionUpdateDiscount$inboundSchema: z.ZodType<SubscriptionUpdateDiscount, z.ZodTypeDef, unknown>;
/** @internal */
export type SubscriptionUpdateDiscount$Outbound = {
    discount_id: string | null;
};
/** @internal */
export declare const SubscriptionUpdateDiscount$outboundSchema: z.ZodType<SubscriptionUpdateDiscount$Outbound, z.ZodTypeDef, SubscriptionUpdateDiscount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubscriptionUpdateDiscount$ {
    /** @deprecated use `SubscriptionUpdateDiscount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubscriptionUpdateDiscount, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubscriptionUpdateDiscount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubscriptionUpdateDiscount$Outbound, z.ZodTypeDef, SubscriptionUpdateDiscount>;
    /** @deprecated use `SubscriptionUpdateDiscount$Outbound` instead. */
    type Outbound = SubscriptionUpdateDiscount$Outbound;
}
export declare function subscriptionUpdateDiscountToJSON(subscriptionUpdateDiscount: SubscriptionUpdateDiscount): string;
export declare function subscriptionUpdateDiscountFromJSON(jsonString: string): SafeParseResult<SubscriptionUpdateDiscount, SDKValidationError>;
//# sourceMappingURL=subscriptionupdatediscount.d.ts.map