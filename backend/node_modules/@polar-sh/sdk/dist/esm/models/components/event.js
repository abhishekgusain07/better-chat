/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { SystemEvent$inboundSchema, SystemEvent$outboundSchema, } from "./systemevent.js";
import { UserEvent$inboundSchema, UserEvent$outboundSchema, } from "./userevent.js";
/** @internal */
export const Event$inboundSchema = z
    .union([UserEvent$inboundSchema, SystemEvent$inboundSchema]);
/** @internal */
export const Event$outboundSchema = z.union([UserEvent$outboundSchema, SystemEvent$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Event$;
(function (Event$) {
    /** @deprecated use `Event$inboundSchema` instead. */
    Event$.inboundSchema = Event$inboundSchema;
    /** @deprecated use `Event$outboundSchema` instead. */
    Event$.outboundSchema = Event$outboundSchema;
})(Event$ || (Event$ = {}));
export function eventToJSON(event) {
    return JSON.stringify(Event$outboundSchema.parse(event));
}
export function eventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Event$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Event' from JSON`);
}
//# sourceMappingURL=event.js.map