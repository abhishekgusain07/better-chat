/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CheckoutLinkProduct$inboundSchema, CheckoutLinkProduct$outboundSchema, } from "./checkoutlinkproduct.js";
import { DiscountFixedOnceForeverDurationBase$inboundSchema, DiscountFixedOnceForeverDurationBase$outboundSchema, } from "./discountfixedonceforeverdurationbase.js";
import { DiscountFixedRepeatDurationBase$inboundSchema, DiscountFixedRepeatDurationBase$outboundSchema, } from "./discountfixedrepeatdurationbase.js";
import { DiscountPercentageOnceForeverDurationBase$inboundSchema, DiscountPercentageOnceForeverDurationBase$outboundSchema, } from "./discountpercentageonceforeverdurationbase.js";
import { DiscountPercentageRepeatDurationBase$inboundSchema, DiscountPercentageRepeatDurationBase$outboundSchema, } from "./discountpercentagerepeatdurationbase.js";
import { PaymentProcessor$inboundSchema, PaymentProcessor$outboundSchema, } from "./paymentprocessor.js";
/** @internal */
export const CheckoutLinkMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const CheckoutLinkMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutLinkMetadata$;
(function (CheckoutLinkMetadata$) {
    /** @deprecated use `CheckoutLinkMetadata$inboundSchema` instead. */
    CheckoutLinkMetadata$.inboundSchema = CheckoutLinkMetadata$inboundSchema;
    /** @deprecated use `CheckoutLinkMetadata$outboundSchema` instead. */
    CheckoutLinkMetadata$.outboundSchema = CheckoutLinkMetadata$outboundSchema;
})(CheckoutLinkMetadata$ || (CheckoutLinkMetadata$ = {}));
export function checkoutLinkMetadataToJSON(checkoutLinkMetadata) {
    return JSON.stringify(CheckoutLinkMetadata$outboundSchema.parse(checkoutLinkMetadata));
}
export function checkoutLinkMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutLinkMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLinkMetadata' from JSON`);
}
/** @internal */
export const CheckoutLinkDiscount$inboundSchema = z.union([
    DiscountFixedRepeatDurationBase$inboundSchema,
    DiscountFixedOnceForeverDurationBase$inboundSchema,
    DiscountPercentageRepeatDurationBase$inboundSchema,
    DiscountPercentageOnceForeverDurationBase$inboundSchema,
]);
/** @internal */
export const CheckoutLinkDiscount$outboundSchema = z.union([
    DiscountFixedRepeatDurationBase$outboundSchema,
    DiscountFixedOnceForeverDurationBase$outboundSchema,
    DiscountPercentageRepeatDurationBase$outboundSchema,
    DiscountPercentageOnceForeverDurationBase$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutLinkDiscount$;
(function (CheckoutLinkDiscount$) {
    /** @deprecated use `CheckoutLinkDiscount$inboundSchema` instead. */
    CheckoutLinkDiscount$.inboundSchema = CheckoutLinkDiscount$inboundSchema;
    /** @deprecated use `CheckoutLinkDiscount$outboundSchema` instead. */
    CheckoutLinkDiscount$.outboundSchema = CheckoutLinkDiscount$outboundSchema;
})(CheckoutLinkDiscount$ || (CheckoutLinkDiscount$ = {}));
export function checkoutLinkDiscountToJSON(checkoutLinkDiscount) {
    return JSON.stringify(CheckoutLinkDiscount$outboundSchema.parse(checkoutLinkDiscount));
}
export function checkoutLinkDiscountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutLinkDiscount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLinkDiscount' from JSON`);
}
/** @internal */
export const CheckoutLink$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    payment_processor: PaymentProcessor$inboundSchema,
    client_secret: z.string(),
    success_url: z.nullable(z.string()),
    label: z.nullable(z.string()),
    allow_discount_codes: z.boolean(),
    require_billing_address: z.boolean(),
    discount_id: z.nullable(z.string()),
    organization_id: z.string(),
    products: z.array(CheckoutLinkProduct$inboundSchema),
    discount: z.nullable(z.union([
        DiscountFixedRepeatDurationBase$inboundSchema,
        DiscountFixedOnceForeverDurationBase$inboundSchema,
        DiscountPercentageRepeatDurationBase$inboundSchema,
        DiscountPercentageOnceForeverDurationBase$inboundSchema,
    ])),
    url: z.string(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "payment_processor": "paymentProcessor",
        "client_secret": "clientSecret",
        "success_url": "successUrl",
        "allow_discount_codes": "allowDiscountCodes",
        "require_billing_address": "requireBillingAddress",
        "discount_id": "discountId",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const CheckoutLink$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    paymentProcessor: PaymentProcessor$outboundSchema,
    clientSecret: z.string(),
    successUrl: z.nullable(z.string()),
    label: z.nullable(z.string()),
    allowDiscountCodes: z.boolean(),
    requireBillingAddress: z.boolean(),
    discountId: z.nullable(z.string()),
    organizationId: z.string(),
    products: z.array(CheckoutLinkProduct$outboundSchema),
    discount: z.nullable(z.union([
        DiscountFixedRepeatDurationBase$outboundSchema,
        DiscountFixedOnceForeverDurationBase$outboundSchema,
        DiscountPercentageRepeatDurationBase$outboundSchema,
        DiscountPercentageOnceForeverDurationBase$outboundSchema,
    ])),
    url: z.string(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        paymentProcessor: "payment_processor",
        clientSecret: "client_secret",
        successUrl: "success_url",
        allowDiscountCodes: "allow_discount_codes",
        requireBillingAddress: "require_billing_address",
        discountId: "discount_id",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutLink$;
(function (CheckoutLink$) {
    /** @deprecated use `CheckoutLink$inboundSchema` instead. */
    CheckoutLink$.inboundSchema = CheckoutLink$inboundSchema;
    /** @deprecated use `CheckoutLink$outboundSchema` instead. */
    CheckoutLink$.outboundSchema = CheckoutLink$outboundSchema;
})(CheckoutLink$ || (CheckoutLink$ = {}));
export function checkoutLinkToJSON(checkoutLink) {
    return JSON.stringify(CheckoutLink$outboundSchema.parse(checkoutLink));
}
export function checkoutLinkFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutLink$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutLink' from JSON`);
}
//# sourceMappingURL=checkoutlink.js.map