/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { SubscriptionRecurringInterval$inboundSchema, SubscriptionRecurringInterval$outboundSchema, } from "./subscriptionrecurringinterval.js";
/** @internal */
export const DiscountProductMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const DiscountProductMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountProductMetadata$;
(function (DiscountProductMetadata$) {
    /** @deprecated use `DiscountProductMetadata$inboundSchema` instead. */
    DiscountProductMetadata$.inboundSchema = DiscountProductMetadata$inboundSchema;
    /** @deprecated use `DiscountProductMetadata$outboundSchema` instead. */
    DiscountProductMetadata$.outboundSchema = DiscountProductMetadata$outboundSchema;
})(DiscountProductMetadata$ || (DiscountProductMetadata$ = {}));
export function discountProductMetadataToJSON(discountProductMetadata) {
    return JSON.stringify(DiscountProductMetadata$outboundSchema.parse(discountProductMetadata));
}
export function discountProductMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountProductMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountProductMetadata' from JSON`);
}
/** @internal */
export const DiscountProduct$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    name: z.string(),
    description: z.nullable(z.string()),
    recurring_interval: z.nullable(SubscriptionRecurringInterval$inboundSchema),
    is_recurring: z.boolean(),
    is_archived: z.boolean(),
    organization_id: z.string(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "recurring_interval": "recurringInterval",
        "is_recurring": "isRecurring",
        "is_archived": "isArchived",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const DiscountProduct$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    name: z.string(),
    description: z.nullable(z.string()),
    recurringInterval: z.nullable(SubscriptionRecurringInterval$outboundSchema),
    isRecurring: z.boolean(),
    isArchived: z.boolean(),
    organizationId: z.string(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        recurringInterval: "recurring_interval",
        isRecurring: "is_recurring",
        isArchived: "is_archived",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountProduct$;
(function (DiscountProduct$) {
    /** @deprecated use `DiscountProduct$inboundSchema` instead. */
    DiscountProduct$.inboundSchema = DiscountProduct$inboundSchema;
    /** @deprecated use `DiscountProduct$outboundSchema` instead. */
    DiscountProduct$.outboundSchema = DiscountProduct$outboundSchema;
})(DiscountProduct$ || (DiscountProduct$ = {}));
export function discountProductToJSON(discountProduct) {
    return JSON.stringify(DiscountProduct$outboundSchema.parse(discountProduct));
}
export function discountProductFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountProduct$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountProduct' from JSON`);
}
//# sourceMappingURL=discountproduct.js.map