/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { WebhookEventType$inboundSchema, WebhookEventType$outboundSchema, } from "./webhookeventtype.js";
import { WebhookFormat$inboundSchema, WebhookFormat$outboundSchema, } from "./webhookformat.js";
/** @internal */
export const WebhookEndpoint$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    url: z.string(),
    format: WebhookFormat$inboundSchema,
    secret: z.string(),
    organization_id: z.string(),
    events: z.array(WebhookEventType$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const WebhookEndpoint$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    url: z.string(),
    format: WebhookFormat$outboundSchema,
    secret: z.string(),
    organizationId: z.string(),
    events: z.array(WebhookEventType$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebhookEndpoint$;
(function (WebhookEndpoint$) {
    /** @deprecated use `WebhookEndpoint$inboundSchema` instead. */
    WebhookEndpoint$.inboundSchema = WebhookEndpoint$inboundSchema;
    /** @deprecated use `WebhookEndpoint$outboundSchema` instead. */
    WebhookEndpoint$.outboundSchema = WebhookEndpoint$outboundSchema;
})(WebhookEndpoint$ || (WebhookEndpoint$ = {}));
export function webhookEndpointToJSON(webhookEndpoint) {
    return JSON.stringify(WebhookEndpoint$outboundSchema.parse(webhookEndpoint));
}
export function webhookEndpointFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WebhookEndpoint$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookEndpoint' from JSON`);
}
//# sourceMappingURL=webhookendpoint.js.map