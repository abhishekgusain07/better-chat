import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Current consumption and spending for a subscription meter.
 */
export type CustomerStateSubscriptionMeter = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * The number of consumed units so far in this billing period.
     */
    consumedUnits: number;
    /**
     * The number of credited units so far in this billing period.
     */
    creditedUnits: number;
    /**
     * The amount due in cents so far in this billing period.
     */
    amount: number;
    /**
     * The ID of the meter.
     */
    meterId: string;
};
/** @internal */
export declare const CustomerStateSubscriptionMeter$inboundSchema: z.ZodType<CustomerStateSubscriptionMeter, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerStateSubscriptionMeter$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    consumed_units: number;
    credited_units: number;
    amount: number;
    meter_id: string;
};
/** @internal */
export declare const CustomerStateSubscriptionMeter$outboundSchema: z.ZodType<CustomerStateSubscriptionMeter$Outbound, z.ZodTypeDef, CustomerStateSubscriptionMeter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerStateSubscriptionMeter$ {
    /** @deprecated use `CustomerStateSubscriptionMeter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerStateSubscriptionMeter, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerStateSubscriptionMeter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerStateSubscriptionMeter$Outbound, z.ZodTypeDef, CustomerStateSubscriptionMeter>;
    /** @deprecated use `CustomerStateSubscriptionMeter$Outbound` instead. */
    type Outbound = CustomerStateSubscriptionMeter$Outbound;
}
export declare function customerStateSubscriptionMeterToJSON(customerStateSubscriptionMeter: CustomerStateSubscriptionMeter): string;
export declare function customerStateSubscriptionMeterFromJSON(jsonString: string): SafeParseResult<CustomerStateSubscriptionMeter, SDKValidationError>;
//# sourceMappingURL=customerstatesubscriptionmeter.d.ts.map