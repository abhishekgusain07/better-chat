import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type BenefitGrantError = {
    message: string;
    type: string;
    timestamp: string;
};
/** @internal */
export declare const BenefitGrantError$inboundSchema: z.ZodType<BenefitGrantError, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitGrantError$Outbound = {
    message: string;
    type: string;
    timestamp: string;
};
/** @internal */
export declare const BenefitGrantError$outboundSchema: z.ZodType<BenefitGrantError$Outbound, z.ZodTypeDef, BenefitGrantError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitGrantError$ {
    /** @deprecated use `BenefitGrantError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitGrantError, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitGrantError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitGrantError$Outbound, z.ZodTypeDef, BenefitGrantError>;
    /** @deprecated use `BenefitGrantError$Outbound` instead. */
    type Outbound = BenefitGrantError$Outbound;
}
export declare function benefitGrantErrorToJSON(benefitGrantError: BenefitGrantError): string;
export declare function benefitGrantErrorFromJSON(jsonString: string): SafeParseResult<BenefitGrantError, SDKValidationError>;
//# sourceMappingURL=benefitgranterror.d.ts.map