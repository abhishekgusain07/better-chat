import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Orders = number | number;
export type Revenue = number | number;
export type NetRevenue = number | number;
export type CumulativeRevenue = number | number;
export type NetCumulativeRevenue = number | number;
export type AverageOrderValue = number | number;
export type NetAverageOrderValue = number | number;
export type OneTimeProducts = number | number;
export type OneTimeProductsRevenue = number | number;
export type OneTimeProductsNetRevenue = number | number;
export type NewSubscriptions = number | number;
export type NewSubscriptionsRevenue = number | number;
export type NewSubscriptionsNetRevenue = number | number;
export type RenewedSubscriptions = number | number;
export type RenewedSubscriptionsRevenue = number | number;
export type RenewedSubscriptionsNetRevenue = number | number;
export type ActiveSubscriptions = number | number;
export type MonthlyRecurringRevenue = number | number;
export type CommittedMonthlyRecurringRevenue = number | number;
export type Checkouts = number | number;
export type SucceededCheckouts = number | number;
export type CheckoutsConversion = number | number;
export type MetricPeriod = {
    /**
     * Timestamp of this period data.
     */
    timestamp: Date;
    orders: number | number;
    revenue: number | number;
    netRevenue: number | number;
    cumulativeRevenue: number | number;
    netCumulativeRevenue: number | number;
    averageOrderValue: number | number;
    netAverageOrderValue: number | number;
    oneTimeProducts: number | number;
    oneTimeProductsRevenue: number | number;
    oneTimeProductsNetRevenue: number | number;
    newSubscriptions: number | number;
    newSubscriptionsRevenue: number | number;
    newSubscriptionsNetRevenue: number | number;
    renewedSubscriptions: number | number;
    renewedSubscriptionsRevenue: number | number;
    renewedSubscriptionsNetRevenue: number | number;
    activeSubscriptions: number | number;
    monthlyRecurringRevenue: number | number;
    committedMonthlyRecurringRevenue: number | number;
    checkouts: number | number;
    succeededCheckouts: number | number;
    checkoutsConversion: number | number;
};
/** @internal */
export declare const Orders$inboundSchema: z.ZodType<Orders, z.ZodTypeDef, unknown>;
/** @internal */
export type Orders$Outbound = number | number;
/** @internal */
export declare const Orders$outboundSchema: z.ZodType<Orders$Outbound, z.ZodTypeDef, Orders>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Orders$ {
    /** @deprecated use `Orders$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `Orders$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `Orders$Outbound` instead. */
    type Outbound = Orders$Outbound;
}
export declare function ordersToJSON(orders: Orders): string;
export declare function ordersFromJSON(jsonString: string): SafeParseResult<Orders, SDKValidationError>;
/** @internal */
export declare const Revenue$inboundSchema: z.ZodType<Revenue, z.ZodTypeDef, unknown>;
/** @internal */
export type Revenue$Outbound = number | number;
/** @internal */
export declare const Revenue$outboundSchema: z.ZodType<Revenue$Outbound, z.ZodTypeDef, Revenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Revenue$ {
    /** @deprecated use `Revenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `Revenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `Revenue$Outbound` instead. */
    type Outbound = Revenue$Outbound;
}
export declare function revenueToJSON(revenue: Revenue): string;
export declare function revenueFromJSON(jsonString: string): SafeParseResult<Revenue, SDKValidationError>;
/** @internal */
export declare const NetRevenue$inboundSchema: z.ZodType<NetRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type NetRevenue$Outbound = number | number;
/** @internal */
export declare const NetRevenue$outboundSchema: z.ZodType<NetRevenue$Outbound, z.ZodTypeDef, NetRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NetRevenue$ {
    /** @deprecated use `NetRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `NetRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `NetRevenue$Outbound` instead. */
    type Outbound = NetRevenue$Outbound;
}
export declare function netRevenueToJSON(netRevenue: NetRevenue): string;
export declare function netRevenueFromJSON(jsonString: string): SafeParseResult<NetRevenue, SDKValidationError>;
/** @internal */
export declare const CumulativeRevenue$inboundSchema: z.ZodType<CumulativeRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type CumulativeRevenue$Outbound = number | number;
/** @internal */
export declare const CumulativeRevenue$outboundSchema: z.ZodType<CumulativeRevenue$Outbound, z.ZodTypeDef, CumulativeRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CumulativeRevenue$ {
    /** @deprecated use `CumulativeRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `CumulativeRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `CumulativeRevenue$Outbound` instead. */
    type Outbound = CumulativeRevenue$Outbound;
}
export declare function cumulativeRevenueToJSON(cumulativeRevenue: CumulativeRevenue): string;
export declare function cumulativeRevenueFromJSON(jsonString: string): SafeParseResult<CumulativeRevenue, SDKValidationError>;
/** @internal */
export declare const NetCumulativeRevenue$inboundSchema: z.ZodType<NetCumulativeRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type NetCumulativeRevenue$Outbound = number | number;
/** @internal */
export declare const NetCumulativeRevenue$outboundSchema: z.ZodType<NetCumulativeRevenue$Outbound, z.ZodTypeDef, NetCumulativeRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NetCumulativeRevenue$ {
    /** @deprecated use `NetCumulativeRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `NetCumulativeRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `NetCumulativeRevenue$Outbound` instead. */
    type Outbound = NetCumulativeRevenue$Outbound;
}
export declare function netCumulativeRevenueToJSON(netCumulativeRevenue: NetCumulativeRevenue): string;
export declare function netCumulativeRevenueFromJSON(jsonString: string): SafeParseResult<NetCumulativeRevenue, SDKValidationError>;
/** @internal */
export declare const AverageOrderValue$inboundSchema: z.ZodType<AverageOrderValue, z.ZodTypeDef, unknown>;
/** @internal */
export type AverageOrderValue$Outbound = number | number;
/** @internal */
export declare const AverageOrderValue$outboundSchema: z.ZodType<AverageOrderValue$Outbound, z.ZodTypeDef, AverageOrderValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AverageOrderValue$ {
    /** @deprecated use `AverageOrderValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `AverageOrderValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `AverageOrderValue$Outbound` instead. */
    type Outbound = AverageOrderValue$Outbound;
}
export declare function averageOrderValueToJSON(averageOrderValue: AverageOrderValue): string;
export declare function averageOrderValueFromJSON(jsonString: string): SafeParseResult<AverageOrderValue, SDKValidationError>;
/** @internal */
export declare const NetAverageOrderValue$inboundSchema: z.ZodType<NetAverageOrderValue, z.ZodTypeDef, unknown>;
/** @internal */
export type NetAverageOrderValue$Outbound = number | number;
/** @internal */
export declare const NetAverageOrderValue$outboundSchema: z.ZodType<NetAverageOrderValue$Outbound, z.ZodTypeDef, NetAverageOrderValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NetAverageOrderValue$ {
    /** @deprecated use `NetAverageOrderValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `NetAverageOrderValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `NetAverageOrderValue$Outbound` instead. */
    type Outbound = NetAverageOrderValue$Outbound;
}
export declare function netAverageOrderValueToJSON(netAverageOrderValue: NetAverageOrderValue): string;
export declare function netAverageOrderValueFromJSON(jsonString: string): SafeParseResult<NetAverageOrderValue, SDKValidationError>;
/** @internal */
export declare const OneTimeProducts$inboundSchema: z.ZodType<OneTimeProducts, z.ZodTypeDef, unknown>;
/** @internal */
export type OneTimeProducts$Outbound = number | number;
/** @internal */
export declare const OneTimeProducts$outboundSchema: z.ZodType<OneTimeProducts$Outbound, z.ZodTypeDef, OneTimeProducts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneTimeProducts$ {
    /** @deprecated use `OneTimeProducts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneTimeProducts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `OneTimeProducts$Outbound` instead. */
    type Outbound = OneTimeProducts$Outbound;
}
export declare function oneTimeProductsToJSON(oneTimeProducts: OneTimeProducts): string;
export declare function oneTimeProductsFromJSON(jsonString: string): SafeParseResult<OneTimeProducts, SDKValidationError>;
/** @internal */
export declare const OneTimeProductsRevenue$inboundSchema: z.ZodType<OneTimeProductsRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type OneTimeProductsRevenue$Outbound = number | number;
/** @internal */
export declare const OneTimeProductsRevenue$outboundSchema: z.ZodType<OneTimeProductsRevenue$Outbound, z.ZodTypeDef, OneTimeProductsRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneTimeProductsRevenue$ {
    /** @deprecated use `OneTimeProductsRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneTimeProductsRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `OneTimeProductsRevenue$Outbound` instead. */
    type Outbound = OneTimeProductsRevenue$Outbound;
}
export declare function oneTimeProductsRevenueToJSON(oneTimeProductsRevenue: OneTimeProductsRevenue): string;
export declare function oneTimeProductsRevenueFromJSON(jsonString: string): SafeParseResult<OneTimeProductsRevenue, SDKValidationError>;
/** @internal */
export declare const OneTimeProductsNetRevenue$inboundSchema: z.ZodType<OneTimeProductsNetRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type OneTimeProductsNetRevenue$Outbound = number | number;
/** @internal */
export declare const OneTimeProductsNetRevenue$outboundSchema: z.ZodType<OneTimeProductsNetRevenue$Outbound, z.ZodTypeDef, OneTimeProductsNetRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OneTimeProductsNetRevenue$ {
    /** @deprecated use `OneTimeProductsNetRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `OneTimeProductsNetRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `OneTimeProductsNetRevenue$Outbound` instead. */
    type Outbound = OneTimeProductsNetRevenue$Outbound;
}
export declare function oneTimeProductsNetRevenueToJSON(oneTimeProductsNetRevenue: OneTimeProductsNetRevenue): string;
export declare function oneTimeProductsNetRevenueFromJSON(jsonString: string): SafeParseResult<OneTimeProductsNetRevenue, SDKValidationError>;
/** @internal */
export declare const NewSubscriptions$inboundSchema: z.ZodType<NewSubscriptions, z.ZodTypeDef, unknown>;
/** @internal */
export type NewSubscriptions$Outbound = number | number;
/** @internal */
export declare const NewSubscriptions$outboundSchema: z.ZodType<NewSubscriptions$Outbound, z.ZodTypeDef, NewSubscriptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewSubscriptions$ {
    /** @deprecated use `NewSubscriptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewSubscriptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `NewSubscriptions$Outbound` instead. */
    type Outbound = NewSubscriptions$Outbound;
}
export declare function newSubscriptionsToJSON(newSubscriptions: NewSubscriptions): string;
export declare function newSubscriptionsFromJSON(jsonString: string): SafeParseResult<NewSubscriptions, SDKValidationError>;
/** @internal */
export declare const NewSubscriptionsRevenue$inboundSchema: z.ZodType<NewSubscriptionsRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type NewSubscriptionsRevenue$Outbound = number | number;
/** @internal */
export declare const NewSubscriptionsRevenue$outboundSchema: z.ZodType<NewSubscriptionsRevenue$Outbound, z.ZodTypeDef, NewSubscriptionsRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewSubscriptionsRevenue$ {
    /** @deprecated use `NewSubscriptionsRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewSubscriptionsRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `NewSubscriptionsRevenue$Outbound` instead. */
    type Outbound = NewSubscriptionsRevenue$Outbound;
}
export declare function newSubscriptionsRevenueToJSON(newSubscriptionsRevenue: NewSubscriptionsRevenue): string;
export declare function newSubscriptionsRevenueFromJSON(jsonString: string): SafeParseResult<NewSubscriptionsRevenue, SDKValidationError>;
/** @internal */
export declare const NewSubscriptionsNetRevenue$inboundSchema: z.ZodType<NewSubscriptionsNetRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type NewSubscriptionsNetRevenue$Outbound = number | number;
/** @internal */
export declare const NewSubscriptionsNetRevenue$outboundSchema: z.ZodType<NewSubscriptionsNetRevenue$Outbound, z.ZodTypeDef, NewSubscriptionsNetRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NewSubscriptionsNetRevenue$ {
    /** @deprecated use `NewSubscriptionsNetRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `NewSubscriptionsNetRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `NewSubscriptionsNetRevenue$Outbound` instead. */
    type Outbound = NewSubscriptionsNetRevenue$Outbound;
}
export declare function newSubscriptionsNetRevenueToJSON(newSubscriptionsNetRevenue: NewSubscriptionsNetRevenue): string;
export declare function newSubscriptionsNetRevenueFromJSON(jsonString: string): SafeParseResult<NewSubscriptionsNetRevenue, SDKValidationError>;
/** @internal */
export declare const RenewedSubscriptions$inboundSchema: z.ZodType<RenewedSubscriptions, z.ZodTypeDef, unknown>;
/** @internal */
export type RenewedSubscriptions$Outbound = number | number;
/** @internal */
export declare const RenewedSubscriptions$outboundSchema: z.ZodType<RenewedSubscriptions$Outbound, z.ZodTypeDef, RenewedSubscriptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RenewedSubscriptions$ {
    /** @deprecated use `RenewedSubscriptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `RenewedSubscriptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `RenewedSubscriptions$Outbound` instead. */
    type Outbound = RenewedSubscriptions$Outbound;
}
export declare function renewedSubscriptionsToJSON(renewedSubscriptions: RenewedSubscriptions): string;
export declare function renewedSubscriptionsFromJSON(jsonString: string): SafeParseResult<RenewedSubscriptions, SDKValidationError>;
/** @internal */
export declare const RenewedSubscriptionsRevenue$inboundSchema: z.ZodType<RenewedSubscriptionsRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type RenewedSubscriptionsRevenue$Outbound = number | number;
/** @internal */
export declare const RenewedSubscriptionsRevenue$outboundSchema: z.ZodType<RenewedSubscriptionsRevenue$Outbound, z.ZodTypeDef, RenewedSubscriptionsRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RenewedSubscriptionsRevenue$ {
    /** @deprecated use `RenewedSubscriptionsRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `RenewedSubscriptionsRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `RenewedSubscriptionsRevenue$Outbound` instead. */
    type Outbound = RenewedSubscriptionsRevenue$Outbound;
}
export declare function renewedSubscriptionsRevenueToJSON(renewedSubscriptionsRevenue: RenewedSubscriptionsRevenue): string;
export declare function renewedSubscriptionsRevenueFromJSON(jsonString: string): SafeParseResult<RenewedSubscriptionsRevenue, SDKValidationError>;
/** @internal */
export declare const RenewedSubscriptionsNetRevenue$inboundSchema: z.ZodType<RenewedSubscriptionsNetRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type RenewedSubscriptionsNetRevenue$Outbound = number | number;
/** @internal */
export declare const RenewedSubscriptionsNetRevenue$outboundSchema: z.ZodType<RenewedSubscriptionsNetRevenue$Outbound, z.ZodTypeDef, RenewedSubscriptionsNetRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RenewedSubscriptionsNetRevenue$ {
    /** @deprecated use `RenewedSubscriptionsNetRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `RenewedSubscriptionsNetRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `RenewedSubscriptionsNetRevenue$Outbound` instead. */
    type Outbound = RenewedSubscriptionsNetRevenue$Outbound;
}
export declare function renewedSubscriptionsNetRevenueToJSON(renewedSubscriptionsNetRevenue: RenewedSubscriptionsNetRevenue): string;
export declare function renewedSubscriptionsNetRevenueFromJSON(jsonString: string): SafeParseResult<RenewedSubscriptionsNetRevenue, SDKValidationError>;
/** @internal */
export declare const ActiveSubscriptions$inboundSchema: z.ZodType<ActiveSubscriptions, z.ZodTypeDef, unknown>;
/** @internal */
export type ActiveSubscriptions$Outbound = number | number;
/** @internal */
export declare const ActiveSubscriptions$outboundSchema: z.ZodType<ActiveSubscriptions$Outbound, z.ZodTypeDef, ActiveSubscriptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ActiveSubscriptions$ {
    /** @deprecated use `ActiveSubscriptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActiveSubscriptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `ActiveSubscriptions$Outbound` instead. */
    type Outbound = ActiveSubscriptions$Outbound;
}
export declare function activeSubscriptionsToJSON(activeSubscriptions: ActiveSubscriptions): string;
export declare function activeSubscriptionsFromJSON(jsonString: string): SafeParseResult<ActiveSubscriptions, SDKValidationError>;
/** @internal */
export declare const MonthlyRecurringRevenue$inboundSchema: z.ZodType<MonthlyRecurringRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MonthlyRecurringRevenue$Outbound = number | number;
/** @internal */
export declare const MonthlyRecurringRevenue$outboundSchema: z.ZodType<MonthlyRecurringRevenue$Outbound, z.ZodTypeDef, MonthlyRecurringRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MonthlyRecurringRevenue$ {
    /** @deprecated use `MonthlyRecurringRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MonthlyRecurringRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MonthlyRecurringRevenue$Outbound` instead. */
    type Outbound = MonthlyRecurringRevenue$Outbound;
}
export declare function monthlyRecurringRevenueToJSON(monthlyRecurringRevenue: MonthlyRecurringRevenue): string;
export declare function monthlyRecurringRevenueFromJSON(jsonString: string): SafeParseResult<MonthlyRecurringRevenue, SDKValidationError>;
/** @internal */
export declare const CommittedMonthlyRecurringRevenue$inboundSchema: z.ZodType<CommittedMonthlyRecurringRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type CommittedMonthlyRecurringRevenue$Outbound = number | number;
/** @internal */
export declare const CommittedMonthlyRecurringRevenue$outboundSchema: z.ZodType<CommittedMonthlyRecurringRevenue$Outbound, z.ZodTypeDef, CommittedMonthlyRecurringRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CommittedMonthlyRecurringRevenue$ {
    /** @deprecated use `CommittedMonthlyRecurringRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `CommittedMonthlyRecurringRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `CommittedMonthlyRecurringRevenue$Outbound` instead. */
    type Outbound = CommittedMonthlyRecurringRevenue$Outbound;
}
export declare function committedMonthlyRecurringRevenueToJSON(committedMonthlyRecurringRevenue: CommittedMonthlyRecurringRevenue): string;
export declare function committedMonthlyRecurringRevenueFromJSON(jsonString: string): SafeParseResult<CommittedMonthlyRecurringRevenue, SDKValidationError>;
/** @internal */
export declare const Checkouts$inboundSchema: z.ZodType<Checkouts, z.ZodTypeDef, unknown>;
/** @internal */
export type Checkouts$Outbound = number | number;
/** @internal */
export declare const Checkouts$outboundSchema: z.ZodType<Checkouts$Outbound, z.ZodTypeDef, Checkouts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Checkouts$ {
    /** @deprecated use `Checkouts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `Checkouts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `Checkouts$Outbound` instead. */
    type Outbound = Checkouts$Outbound;
}
export declare function checkoutsToJSON(checkouts: Checkouts): string;
export declare function checkoutsFromJSON(jsonString: string): SafeParseResult<Checkouts, SDKValidationError>;
/** @internal */
export declare const SucceededCheckouts$inboundSchema: z.ZodType<SucceededCheckouts, z.ZodTypeDef, unknown>;
/** @internal */
export type SucceededCheckouts$Outbound = number | number;
/** @internal */
export declare const SucceededCheckouts$outboundSchema: z.ZodType<SucceededCheckouts$Outbound, z.ZodTypeDef, SucceededCheckouts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SucceededCheckouts$ {
    /** @deprecated use `SucceededCheckouts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `SucceededCheckouts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `SucceededCheckouts$Outbound` instead. */
    type Outbound = SucceededCheckouts$Outbound;
}
export declare function succeededCheckoutsToJSON(succeededCheckouts: SucceededCheckouts): string;
export declare function succeededCheckoutsFromJSON(jsonString: string): SafeParseResult<SucceededCheckouts, SDKValidationError>;
/** @internal */
export declare const CheckoutsConversion$inboundSchema: z.ZodType<CheckoutsConversion, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutsConversion$Outbound = number | number;
/** @internal */
export declare const CheckoutsConversion$outboundSchema: z.ZodType<CheckoutsConversion$Outbound, z.ZodTypeDef, CheckoutsConversion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutsConversion$ {
    /** @deprecated use `CheckoutsConversion$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutsConversion$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `CheckoutsConversion$Outbound` instead. */
    type Outbound = CheckoutsConversion$Outbound;
}
export declare function checkoutsConversionToJSON(checkoutsConversion: CheckoutsConversion): string;
export declare function checkoutsConversionFromJSON(jsonString: string): SafeParseResult<CheckoutsConversion, SDKValidationError>;
/** @internal */
export declare const MetricPeriod$inboundSchema: z.ZodType<MetricPeriod, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricPeriod$Outbound = {
    timestamp: string;
    orders: number | number;
    revenue: number | number;
    net_revenue: number | number;
    cumulative_revenue: number | number;
    net_cumulative_revenue: number | number;
    average_order_value: number | number;
    net_average_order_value: number | number;
    one_time_products: number | number;
    one_time_products_revenue: number | number;
    one_time_products_net_revenue: number | number;
    new_subscriptions: number | number;
    new_subscriptions_revenue: number | number;
    new_subscriptions_net_revenue: number | number;
    renewed_subscriptions: number | number;
    renewed_subscriptions_revenue: number | number;
    renewed_subscriptions_net_revenue: number | number;
    active_subscriptions: number | number;
    monthly_recurring_revenue: number | number;
    committed_monthly_recurring_revenue: number | number;
    checkouts: number | number;
    succeeded_checkouts: number | number;
    checkouts_conversion: number | number;
};
/** @internal */
export declare const MetricPeriod$outboundSchema: z.ZodType<MetricPeriod$Outbound, z.ZodTypeDef, MetricPeriod>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricPeriod$ {
    /** @deprecated use `MetricPeriod$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetricPeriod, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricPeriod$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetricPeriod$Outbound, z.ZodTypeDef, MetricPeriod>;
    /** @deprecated use `MetricPeriod$Outbound` instead. */
    type Outbound = MetricPeriod$Outbound;
}
export declare function metricPeriodToJSON(metricPeriod: MetricPeriod): string;
export declare function metricPeriodFromJSON(jsonString: string): SafeParseResult<MetricPeriod, SDKValidationError>;
//# sourceMappingURL=metricperiod.d.ts.map