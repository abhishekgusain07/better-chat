/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
import { DiscountFixedOnceForeverDurationBase$inboundSchema, DiscountFixedOnceForeverDurationBase$outboundSchema, } from "./discountfixedonceforeverdurationbase.js";
import { DiscountFixedRepeatDurationBase$inboundSchema, DiscountFixedRepeatDurationBase$outboundSchema, } from "./discountfixedrepeatdurationbase.js";
import { DiscountPercentageOnceForeverDurationBase$inboundSchema, DiscountPercentageOnceForeverDurationBase$outboundSchema, } from "./discountpercentageonceforeverdurationbase.js";
import { DiscountPercentageRepeatDurationBase$inboundSchema, DiscountPercentageRepeatDurationBase$outboundSchema, } from "./discountpercentagerepeatdurationbase.js";
import { OrderBillingReason$inboundSchema, OrderBillingReason$outboundSchema, } from "./orderbillingreason.js";
import { OrderCustomer$inboundSchema, OrderCustomer$outboundSchema, } from "./ordercustomer.js";
import { OrderItemSchema$inboundSchema, OrderItemSchema$outboundSchema, } from "./orderitemschema.js";
import { OrderProduct$inboundSchema, OrderProduct$outboundSchema, } from "./orderproduct.js";
import { OrderStatus$inboundSchema, OrderStatus$outboundSchema, } from "./orderstatus.js";
import { OrderSubscription$inboundSchema, OrderSubscription$outboundSchema, } from "./ordersubscription.js";
/** @internal */
export const OrderMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const OrderMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderMetadata$;
(function (OrderMetadata$) {
    /** @deprecated use `OrderMetadata$inboundSchema` instead. */
    OrderMetadata$.inboundSchema = OrderMetadata$inboundSchema;
    /** @deprecated use `OrderMetadata$outboundSchema` instead. */
    OrderMetadata$.outboundSchema = OrderMetadata$outboundSchema;
})(OrderMetadata$ || (OrderMetadata$ = {}));
export function orderMetadataToJSON(orderMetadata) {
    return JSON.stringify(OrderMetadata$outboundSchema.parse(orderMetadata));
}
export function orderMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderMetadata' from JSON`);
}
/** @internal */
export const OrderCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
export const OrderCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderCustomFieldData$;
(function (OrderCustomFieldData$) {
    /** @deprecated use `OrderCustomFieldData$inboundSchema` instead. */
    OrderCustomFieldData$.inboundSchema = OrderCustomFieldData$inboundSchema;
    /** @deprecated use `OrderCustomFieldData$outboundSchema` instead. */
    OrderCustomFieldData$.outboundSchema = OrderCustomFieldData$outboundSchema;
})(OrderCustomFieldData$ || (OrderCustomFieldData$ = {}));
export function orderCustomFieldDataToJSON(orderCustomFieldData) {
    return JSON.stringify(OrderCustomFieldData$outboundSchema.parse(orderCustomFieldData));
}
export function orderCustomFieldDataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderCustomFieldData' from JSON`);
}
/** @internal */
export const OrderDiscount$inboundSchema = z.union([
    DiscountFixedRepeatDurationBase$inboundSchema,
    DiscountFixedOnceForeverDurationBase$inboundSchema,
    DiscountPercentageRepeatDurationBase$inboundSchema,
    DiscountPercentageOnceForeverDurationBase$inboundSchema,
]);
/** @internal */
export const OrderDiscount$outboundSchema = z.union([
    DiscountFixedRepeatDurationBase$outboundSchema,
    DiscountFixedOnceForeverDurationBase$outboundSchema,
    DiscountPercentageRepeatDurationBase$outboundSchema,
    DiscountPercentageOnceForeverDurationBase$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderDiscount$;
(function (OrderDiscount$) {
    /** @deprecated use `OrderDiscount$inboundSchema` instead. */
    OrderDiscount$.inboundSchema = OrderDiscount$inboundSchema;
    /** @deprecated use `OrderDiscount$outboundSchema` instead. */
    OrderDiscount$.outboundSchema = OrderDiscount$outboundSchema;
})(OrderDiscount$ || (OrderDiscount$ = {}));
export function orderDiscountToJSON(orderDiscount) {
    return JSON.stringify(OrderDiscount$outboundSchema.parse(orderDiscount));
}
export function orderDiscountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderDiscount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderDiscount' from JSON`);
}
/** @internal */
export const Order$inboundSchema = z
    .object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    status: OrderStatus$inboundSchema,
    paid: z.boolean(),
    subtotal_amount: z.number().int(),
    discount_amount: z.number().int(),
    net_amount: z.number().int(),
    tax_amount: z.number().int(),
    total_amount: z.number().int(),
    refunded_amount: z.number().int(),
    refunded_tax_amount: z.number().int(),
    currency: z.string(),
    billing_reason: OrderBillingReason$inboundSchema,
    billing_name: z.nullable(z.string()),
    billing_address: z.nullable(Address$inboundSchema),
    is_invoice_generated: z.boolean(),
    customer_id: z.string(),
    product_id: z.string(),
    discount_id: z.nullable(z.string()),
    subscription_id: z.nullable(z.string()),
    checkout_id: z.nullable(z.string()),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    customer: OrderCustomer$inboundSchema,
    user_id: z.string(),
    product: OrderProduct$inboundSchema,
    discount: z.nullable(z.union([
        DiscountFixedRepeatDurationBase$inboundSchema,
        DiscountFixedOnceForeverDurationBase$inboundSchema,
        DiscountPercentageRepeatDurationBase$inboundSchema,
        DiscountPercentageOnceForeverDurationBase$inboundSchema,
    ])),
    subscription: z.nullable(OrderSubscription$inboundSchema),
    items: z.array(OrderItemSchema$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "subtotal_amount": "subtotalAmount",
        "discount_amount": "discountAmount",
        "net_amount": "netAmount",
        "tax_amount": "taxAmount",
        "total_amount": "totalAmount",
        "refunded_amount": "refundedAmount",
        "refunded_tax_amount": "refundedTaxAmount",
        "billing_reason": "billingReason",
        "billing_name": "billingName",
        "billing_address": "billingAddress",
        "is_invoice_generated": "isInvoiceGenerated",
        "customer_id": "customerId",
        "product_id": "productId",
        "discount_id": "discountId",
        "subscription_id": "subscriptionId",
        "checkout_id": "checkoutId",
        "custom_field_data": "customFieldData",
        "user_id": "userId",
    });
});
/** @internal */
export const Order$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    status: OrderStatus$outboundSchema,
    paid: z.boolean(),
    subtotalAmount: z.number().int(),
    discountAmount: z.number().int(),
    netAmount: z.number().int(),
    taxAmount: z.number().int(),
    totalAmount: z.number().int(),
    refundedAmount: z.number().int(),
    refundedTaxAmount: z.number().int(),
    currency: z.string(),
    billingReason: OrderBillingReason$outboundSchema,
    billingName: z.nullable(z.string()),
    billingAddress: z.nullable(Address$outboundSchema),
    isInvoiceGenerated: z.boolean(),
    customerId: z.string(),
    productId: z.string(),
    discountId: z.nullable(z.string()),
    subscriptionId: z.nullable(z.string()),
    checkoutId: z.nullable(z.string()),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    customer: OrderCustomer$outboundSchema,
    userId: z.string(),
    product: OrderProduct$outboundSchema,
    discount: z.nullable(z.union([
        DiscountFixedRepeatDurationBase$outboundSchema,
        DiscountFixedOnceForeverDurationBase$outboundSchema,
        DiscountPercentageRepeatDurationBase$outboundSchema,
        DiscountPercentageOnceForeverDurationBase$outboundSchema,
    ])),
    subscription: z.nullable(OrderSubscription$outboundSchema),
    items: z.array(OrderItemSchema$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        subtotalAmount: "subtotal_amount",
        discountAmount: "discount_amount",
        netAmount: "net_amount",
        taxAmount: "tax_amount",
        totalAmount: "total_amount",
        refundedAmount: "refunded_amount",
        refundedTaxAmount: "refunded_tax_amount",
        billingReason: "billing_reason",
        billingName: "billing_name",
        billingAddress: "billing_address",
        isInvoiceGenerated: "is_invoice_generated",
        customerId: "customer_id",
        productId: "product_id",
        discountId: "discount_id",
        subscriptionId: "subscription_id",
        checkoutId: "checkout_id",
        customFieldData: "custom_field_data",
        userId: "user_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Order$;
(function (Order$) {
    /** @deprecated use `Order$inboundSchema` instead. */
    Order$.inboundSchema = Order$inboundSchema;
    /** @deprecated use `Order$outboundSchema` instead. */
    Order$.outboundSchema = Order$outboundSchema;
})(Order$ || (Order$ = {}));
export function orderToJSON(order) {
    return JSON.stringify(Order$outboundSchema.parse(order));
}
export function orderFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Order$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Order' from JSON`);
}
//# sourceMappingURL=order.js.map