/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { BenefitCycledEvent$inboundSchema, BenefitCycledEvent$outboundSchema, } from "./benefitcycledevent.js";
import { BenefitGrantedEvent$inboundSchema, BenefitGrantedEvent$outboundSchema, } from "./benefitgrantedevent.js";
import { BenefitRevokedEvent$inboundSchema, BenefitRevokedEvent$outboundSchema, } from "./benefitrevokedevent.js";
import { BenefitUpdatedEvent$inboundSchema, BenefitUpdatedEvent$outboundSchema, } from "./benefitupdatedevent.js";
import { MeterCreditEvent$inboundSchema, MeterCreditEvent$outboundSchema, } from "./metercreditevent.js";
import { MeterResetEvent$inboundSchema, MeterResetEvent$outboundSchema, } from "./meterresetevent.js";
/** @internal */
export const SystemEvent$inboundSchema = z.union([
    BenefitCycledEvent$inboundSchema.and(z.object({ name: z.literal("benefit.cycled") }).transform((v) => ({
        name: v.name,
    }))),
    BenefitGrantedEvent$inboundSchema.and(z.object({ name: z.literal("benefit.granted") }).transform((v) => ({
        name: v.name,
    }))),
    BenefitRevokedEvent$inboundSchema.and(z.object({ name: z.literal("benefit.revoked") }).transform((v) => ({
        name: v.name,
    }))),
    BenefitUpdatedEvent$inboundSchema.and(z.object({ name: z.literal("benefit.updated") }).transform((v) => ({
        name: v.name,
    }))),
    MeterCreditEvent$inboundSchema.and(z.object({ name: z.literal("meter.credited") }).transform((v) => ({
        name: v.name,
    }))),
    MeterResetEvent$inboundSchema.and(z.object({ name: z.literal("meter.reset") }).transform((v) => ({
        name: v.name,
    }))),
]);
/** @internal */
export const SystemEvent$outboundSchema = z.union([
    BenefitCycledEvent$outboundSchema.and(z.object({ name: z.literal("benefit.cycled") }).transform((v) => ({
        name: v.name,
    }))),
    BenefitGrantedEvent$outboundSchema.and(z.object({ name: z.literal("benefit.granted") }).transform((v) => ({
        name: v.name,
    }))),
    BenefitRevokedEvent$outboundSchema.and(z.object({ name: z.literal("benefit.revoked") }).transform((v) => ({
        name: v.name,
    }))),
    BenefitUpdatedEvent$outboundSchema.and(z.object({ name: z.literal("benefit.updated") }).transform((v) => ({
        name: v.name,
    }))),
    MeterCreditEvent$outboundSchema.and(z.object({ name: z.literal("meter.credited") }).transform((v) => ({
        name: v.name,
    }))),
    MeterResetEvent$outboundSchema.and(z.object({ name: z.literal("meter.reset") }).transform((v) => ({
        name: v.name,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SystemEvent$;
(function (SystemEvent$) {
    /** @deprecated use `SystemEvent$inboundSchema` instead. */
    SystemEvent$.inboundSchema = SystemEvent$inboundSchema;
    /** @deprecated use `SystemEvent$outboundSchema` instead. */
    SystemEvent$.outboundSchema = SystemEvent$outboundSchema;
})(SystemEvent$ || (SystemEvent$ = {}));
export function systemEventToJSON(systemEvent) {
    return JSON.stringify(SystemEvent$outboundSchema.parse(systemEvent));
}
export function systemEventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SystemEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SystemEvent' from JSON`);
}
//# sourceMappingURL=systemevent.js.map