import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomerCustomerMeterMeter, CustomerCustomerMeterMeter$Outbound } from "./customercustomermetermeter.js";
export type CustomerCustomerMeter = {
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the customer.
     */
    customerId: string;
    /**
     * The ID of the meter.
     */
    meterId: string;
    /**
     * The number of consumed units.
     */
    consumedUnits: number;
    /**
     * The number of credited units.
     */
    creditedUnits: number;
    /**
     * The balance of the meter, i.e. the difference between credited and consumed units.
     */
    balance: number;
    meter: CustomerCustomerMeterMeter;
};
/** @internal */
export declare const CustomerCustomerMeter$inboundSchema: z.ZodType<CustomerCustomerMeter, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerCustomerMeter$Outbound = {
    id: string;
    created_at: string;
    modified_at: string | null;
    customer_id: string;
    meter_id: string;
    consumed_units: number;
    credited_units: number;
    balance: number;
    meter: CustomerCustomerMeterMeter$Outbound;
};
/** @internal */
export declare const CustomerCustomerMeter$outboundSchema: z.ZodType<CustomerCustomerMeter$Outbound, z.ZodTypeDef, CustomerCustomerMeter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerCustomerMeter$ {
    /** @deprecated use `CustomerCustomerMeter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerCustomerMeter, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerCustomerMeter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerCustomerMeter$Outbound, z.ZodTypeDef, CustomerCustomerMeter>;
    /** @deprecated use `CustomerCustomerMeter$Outbound` instead. */
    type Outbound = CustomerCustomerMeter$Outbound;
}
export declare function customerCustomerMeterToJSON(customerCustomerMeter: CustomerCustomerMeter): string;
export declare function customerCustomerMeterFromJSON(jsonString: string): SafeParseResult<CustomerCustomerMeter, SDKValidationError>;
//# sourceMappingURL=customercustomermeter.d.ts.map