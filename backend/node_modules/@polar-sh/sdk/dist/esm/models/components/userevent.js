/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Customer$inboundSchema, Customer$outboundSchema, } from "./customer.js";
/** @internal */
export const UserEventMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const UserEventMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEventMetadata$;
(function (UserEventMetadata$) {
    /** @deprecated use `UserEventMetadata$inboundSchema` instead. */
    UserEventMetadata$.inboundSchema = UserEventMetadata$inboundSchema;
    /** @deprecated use `UserEventMetadata$outboundSchema` instead. */
    UserEventMetadata$.outboundSchema = UserEventMetadata$outboundSchema;
})(UserEventMetadata$ || (UserEventMetadata$ = {}));
export function userEventMetadataToJSON(userEventMetadata) {
    return JSON.stringify(UserEventMetadata$outboundSchema.parse(userEventMetadata));
}
export function userEventMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEventMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEventMetadata' from JSON`);
}
/** @internal */
export const UserEvent$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    id: z.string(),
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    organization_id: z.string(),
    customer_id: z.nullable(z.string()),
    customer: z.nullable(Customer$inboundSchema),
    external_customer_id: z.nullable(z.string()),
    name: z.string(),
    source: z.literal("user"),
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
    });
});
/** @internal */
export const UserEvent$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    id: z.string(),
    timestamp: z.date().transform(v => v.toISOString()),
    organizationId: z.string(),
    customerId: z.nullable(z.string()),
    customer: z.nullable(Customer$outboundSchema),
    externalCustomerId: z.nullable(z.string()),
    name: z.string(),
    source: z.literal("user"),
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserEvent$;
(function (UserEvent$) {
    /** @deprecated use `UserEvent$inboundSchema` instead. */
    UserEvent$.inboundSchema = UserEvent$inboundSchema;
    /** @deprecated use `UserEvent$outboundSchema` instead. */
    UserEvent$.outboundSchema = UserEvent$outboundSchema;
})(UserEvent$ || (UserEvent$ = {}));
export function userEventToJSON(userEvent) {
    return JSON.stringify(UserEvent$outboundSchema.parse(userEvent));
}
export function userEventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserEvent' from JSON`);
}
//# sourceMappingURL=userevent.js.map