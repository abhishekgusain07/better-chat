import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SystemEvent, SystemEvent$Outbound } from "./systemevent.js";
import { UserEvent, UserEvent$Outbound } from "./userevent.js";
export type Event = UserEvent | SystemEvent;
/** @internal */
export declare const Event$inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown>;
/** @internal */
export type Event$Outbound = UserEvent$Outbound | SystemEvent$Outbound;
/** @internal */
export declare const Event$outboundSchema: z.ZodType<Event$Outbound, z.ZodTypeDef, Event>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Event$ {
    /** @deprecated use `Event$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown>;
    /** @deprecated use `Event$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Event$Outbound, z.ZodTypeDef, Event>;
    /** @deprecated use `Event$Outbound` instead. */
    type Outbound = Event$Outbound;
}
export declare function eventToJSON(event: Event): string;
export declare function eventFromJSON(jsonString: string): SafeParseResult<Event, SDKValidationError>;
//# sourceMappingURL=event.d.ts.map