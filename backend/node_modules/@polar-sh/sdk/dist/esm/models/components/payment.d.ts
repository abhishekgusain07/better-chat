import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CardPayment, CardPayment$Outbound } from "./cardpayment.js";
import { GenericPayment, GenericPayment$Outbound } from "./genericpayment.js";
export type Payment = CardPayment | GenericPayment;
/** @internal */
export declare const Payment$inboundSchema: z.ZodType<Payment, z.ZodTypeDef, unknown>;
/** @internal */
export type Payment$Outbound = CardPayment$Outbound | GenericPayment$Outbound;
/** @internal */
export declare const Payment$outboundSchema: z.ZodType<Payment$Outbound, z.ZodTypeDef, Payment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Payment$ {
    /** @deprecated use `Payment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Payment, z.ZodTypeDef, unknown>;
    /** @deprecated use `Payment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Payment$Outbound, z.ZodTypeDef, Payment>;
    /** @deprecated use `Payment$Outbound` instead. */
    type Outbound = Payment$Outbound;
}
export declare function paymentToJSON(payment: Payment): string;
export declare function paymentFromJSON(jsonString: string): SafeParseResult<Payment, SDKValidationError>;
//# sourceMappingURL=payment.d.ts.map