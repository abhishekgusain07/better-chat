/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Orders$inboundSchema = z
    .union([z.number().int(), z.number()]);
/** @internal */
export const Orders$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Orders$;
(function (Orders$) {
    /** @deprecated use `Orders$inboundSchema` instead. */
    Orders$.inboundSchema = Orders$inboundSchema;
    /** @deprecated use `Orders$outboundSchema` instead. */
    Orders$.outboundSchema = Orders$outboundSchema;
})(Orders$ || (Orders$ = {}));
export function ordersToJSON(orders) {
    return JSON.stringify(Orders$outboundSchema.parse(orders));
}
export function ordersFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Orders$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Orders' from JSON`);
}
/** @internal */
export const Revenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const Revenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Revenue$;
(function (Revenue$) {
    /** @deprecated use `Revenue$inboundSchema` instead. */
    Revenue$.inboundSchema = Revenue$inboundSchema;
    /** @deprecated use `Revenue$outboundSchema` instead. */
    Revenue$.outboundSchema = Revenue$outboundSchema;
})(Revenue$ || (Revenue$ = {}));
export function revenueToJSON(revenue) {
    return JSON.stringify(Revenue$outboundSchema.parse(revenue));
}
export function revenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Revenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Revenue' from JSON`);
}
/** @internal */
export const NetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const NetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NetRevenue$;
(function (NetRevenue$) {
    /** @deprecated use `NetRevenue$inboundSchema` instead. */
    NetRevenue$.inboundSchema = NetRevenue$inboundSchema;
    /** @deprecated use `NetRevenue$outboundSchema` instead. */
    NetRevenue$.outboundSchema = NetRevenue$outboundSchema;
})(NetRevenue$ || (NetRevenue$ = {}));
export function netRevenueToJSON(netRevenue) {
    return JSON.stringify(NetRevenue$outboundSchema.parse(netRevenue));
}
export function netRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NetRevenue' from JSON`);
}
/** @internal */
export const CumulativeRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const CumulativeRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CumulativeRevenue$;
(function (CumulativeRevenue$) {
    /** @deprecated use `CumulativeRevenue$inboundSchema` instead. */
    CumulativeRevenue$.inboundSchema = CumulativeRevenue$inboundSchema;
    /** @deprecated use `CumulativeRevenue$outboundSchema` instead. */
    CumulativeRevenue$.outboundSchema = CumulativeRevenue$outboundSchema;
})(CumulativeRevenue$ || (CumulativeRevenue$ = {}));
export function cumulativeRevenueToJSON(cumulativeRevenue) {
    return JSON.stringify(CumulativeRevenue$outboundSchema.parse(cumulativeRevenue));
}
export function cumulativeRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CumulativeRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CumulativeRevenue' from JSON`);
}
/** @internal */
export const NetCumulativeRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const NetCumulativeRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NetCumulativeRevenue$;
(function (NetCumulativeRevenue$) {
    /** @deprecated use `NetCumulativeRevenue$inboundSchema` instead. */
    NetCumulativeRevenue$.inboundSchema = NetCumulativeRevenue$inboundSchema;
    /** @deprecated use `NetCumulativeRevenue$outboundSchema` instead. */
    NetCumulativeRevenue$.outboundSchema = NetCumulativeRevenue$outboundSchema;
})(NetCumulativeRevenue$ || (NetCumulativeRevenue$ = {}));
export function netCumulativeRevenueToJSON(netCumulativeRevenue) {
    return JSON.stringify(NetCumulativeRevenue$outboundSchema.parse(netCumulativeRevenue));
}
export function netCumulativeRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NetCumulativeRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NetCumulativeRevenue' from JSON`);
}
/** @internal */
export const AverageOrderValue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const AverageOrderValue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AverageOrderValue$;
(function (AverageOrderValue$) {
    /** @deprecated use `AverageOrderValue$inboundSchema` instead. */
    AverageOrderValue$.inboundSchema = AverageOrderValue$inboundSchema;
    /** @deprecated use `AverageOrderValue$outboundSchema` instead. */
    AverageOrderValue$.outboundSchema = AverageOrderValue$outboundSchema;
})(AverageOrderValue$ || (AverageOrderValue$ = {}));
export function averageOrderValueToJSON(averageOrderValue) {
    return JSON.stringify(AverageOrderValue$outboundSchema.parse(averageOrderValue));
}
export function averageOrderValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => AverageOrderValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AverageOrderValue' from JSON`);
}
/** @internal */
export const NetAverageOrderValue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const NetAverageOrderValue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NetAverageOrderValue$;
(function (NetAverageOrderValue$) {
    /** @deprecated use `NetAverageOrderValue$inboundSchema` instead. */
    NetAverageOrderValue$.inboundSchema = NetAverageOrderValue$inboundSchema;
    /** @deprecated use `NetAverageOrderValue$outboundSchema` instead. */
    NetAverageOrderValue$.outboundSchema = NetAverageOrderValue$outboundSchema;
})(NetAverageOrderValue$ || (NetAverageOrderValue$ = {}));
export function netAverageOrderValueToJSON(netAverageOrderValue) {
    return JSON.stringify(NetAverageOrderValue$outboundSchema.parse(netAverageOrderValue));
}
export function netAverageOrderValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NetAverageOrderValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NetAverageOrderValue' from JSON`);
}
/** @internal */
export const OneTimeProducts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const OneTimeProducts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneTimeProducts$;
(function (OneTimeProducts$) {
    /** @deprecated use `OneTimeProducts$inboundSchema` instead. */
    OneTimeProducts$.inboundSchema = OneTimeProducts$inboundSchema;
    /** @deprecated use `OneTimeProducts$outboundSchema` instead. */
    OneTimeProducts$.outboundSchema = OneTimeProducts$outboundSchema;
})(OneTimeProducts$ || (OneTimeProducts$ = {}));
export function oneTimeProductsToJSON(oneTimeProducts) {
    return JSON.stringify(OneTimeProducts$outboundSchema.parse(oneTimeProducts));
}
export function oneTimeProductsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneTimeProducts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneTimeProducts' from JSON`);
}
/** @internal */
export const OneTimeProductsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const OneTimeProductsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneTimeProductsRevenue$;
(function (OneTimeProductsRevenue$) {
    /** @deprecated use `OneTimeProductsRevenue$inboundSchema` instead. */
    OneTimeProductsRevenue$.inboundSchema = OneTimeProductsRevenue$inboundSchema;
    /** @deprecated use `OneTimeProductsRevenue$outboundSchema` instead. */
    OneTimeProductsRevenue$.outboundSchema = OneTimeProductsRevenue$outboundSchema;
})(OneTimeProductsRevenue$ || (OneTimeProductsRevenue$ = {}));
export function oneTimeProductsRevenueToJSON(oneTimeProductsRevenue) {
    return JSON.stringify(OneTimeProductsRevenue$outboundSchema.parse(oneTimeProductsRevenue));
}
export function oneTimeProductsRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneTimeProductsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneTimeProductsRevenue' from JSON`);
}
/** @internal */
export const OneTimeProductsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const OneTimeProductsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OneTimeProductsNetRevenue$;
(function (OneTimeProductsNetRevenue$) {
    /** @deprecated use `OneTimeProductsNetRevenue$inboundSchema` instead. */
    OneTimeProductsNetRevenue$.inboundSchema = OneTimeProductsNetRevenue$inboundSchema;
    /** @deprecated use `OneTimeProductsNetRevenue$outboundSchema` instead. */
    OneTimeProductsNetRevenue$.outboundSchema = OneTimeProductsNetRevenue$outboundSchema;
})(OneTimeProductsNetRevenue$ || (OneTimeProductsNetRevenue$ = {}));
export function oneTimeProductsNetRevenueToJSON(oneTimeProductsNetRevenue) {
    return JSON.stringify(OneTimeProductsNetRevenue$outboundSchema.parse(oneTimeProductsNetRevenue));
}
export function oneTimeProductsNetRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OneTimeProductsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneTimeProductsNetRevenue' from JSON`);
}
/** @internal */
export const NewSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const NewSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewSubscriptions$;
(function (NewSubscriptions$) {
    /** @deprecated use `NewSubscriptions$inboundSchema` instead. */
    NewSubscriptions$.inboundSchema = NewSubscriptions$inboundSchema;
    /** @deprecated use `NewSubscriptions$outboundSchema` instead. */
    NewSubscriptions$.outboundSchema = NewSubscriptions$outboundSchema;
})(NewSubscriptions$ || (NewSubscriptions$ = {}));
export function newSubscriptionsToJSON(newSubscriptions) {
    return JSON.stringify(NewSubscriptions$outboundSchema.parse(newSubscriptions));
}
export function newSubscriptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NewSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewSubscriptions' from JSON`);
}
/** @internal */
export const NewSubscriptionsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const NewSubscriptionsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewSubscriptionsRevenue$;
(function (NewSubscriptionsRevenue$) {
    /** @deprecated use `NewSubscriptionsRevenue$inboundSchema` instead. */
    NewSubscriptionsRevenue$.inboundSchema = NewSubscriptionsRevenue$inboundSchema;
    /** @deprecated use `NewSubscriptionsRevenue$outboundSchema` instead. */
    NewSubscriptionsRevenue$.outboundSchema = NewSubscriptionsRevenue$outboundSchema;
})(NewSubscriptionsRevenue$ || (NewSubscriptionsRevenue$ = {}));
export function newSubscriptionsRevenueToJSON(newSubscriptionsRevenue) {
    return JSON.stringify(NewSubscriptionsRevenue$outboundSchema.parse(newSubscriptionsRevenue));
}
export function newSubscriptionsRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NewSubscriptionsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewSubscriptionsRevenue' from JSON`);
}
/** @internal */
export const NewSubscriptionsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const NewSubscriptionsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NewSubscriptionsNetRevenue$;
(function (NewSubscriptionsNetRevenue$) {
    /** @deprecated use `NewSubscriptionsNetRevenue$inboundSchema` instead. */
    NewSubscriptionsNetRevenue$.inboundSchema = NewSubscriptionsNetRevenue$inboundSchema;
    /** @deprecated use `NewSubscriptionsNetRevenue$outboundSchema` instead. */
    NewSubscriptionsNetRevenue$.outboundSchema = NewSubscriptionsNetRevenue$outboundSchema;
})(NewSubscriptionsNetRevenue$ || (NewSubscriptionsNetRevenue$ = {}));
export function newSubscriptionsNetRevenueToJSON(newSubscriptionsNetRevenue) {
    return JSON.stringify(NewSubscriptionsNetRevenue$outboundSchema.parse(newSubscriptionsNetRevenue));
}
export function newSubscriptionsNetRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NewSubscriptionsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewSubscriptionsNetRevenue' from JSON`);
}
/** @internal */
export const RenewedSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const RenewedSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RenewedSubscriptions$;
(function (RenewedSubscriptions$) {
    /** @deprecated use `RenewedSubscriptions$inboundSchema` instead. */
    RenewedSubscriptions$.inboundSchema = RenewedSubscriptions$inboundSchema;
    /** @deprecated use `RenewedSubscriptions$outboundSchema` instead. */
    RenewedSubscriptions$.outboundSchema = RenewedSubscriptions$outboundSchema;
})(RenewedSubscriptions$ || (RenewedSubscriptions$ = {}));
export function renewedSubscriptionsToJSON(renewedSubscriptions) {
    return JSON.stringify(RenewedSubscriptions$outboundSchema.parse(renewedSubscriptions));
}
export function renewedSubscriptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RenewedSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RenewedSubscriptions' from JSON`);
}
/** @internal */
export const RenewedSubscriptionsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const RenewedSubscriptionsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RenewedSubscriptionsRevenue$;
(function (RenewedSubscriptionsRevenue$) {
    /** @deprecated use `RenewedSubscriptionsRevenue$inboundSchema` instead. */
    RenewedSubscriptionsRevenue$.inboundSchema = RenewedSubscriptionsRevenue$inboundSchema;
    /** @deprecated use `RenewedSubscriptionsRevenue$outboundSchema` instead. */
    RenewedSubscriptionsRevenue$.outboundSchema = RenewedSubscriptionsRevenue$outboundSchema;
})(RenewedSubscriptionsRevenue$ || (RenewedSubscriptionsRevenue$ = {}));
export function renewedSubscriptionsRevenueToJSON(renewedSubscriptionsRevenue) {
    return JSON.stringify(RenewedSubscriptionsRevenue$outboundSchema.parse(renewedSubscriptionsRevenue));
}
export function renewedSubscriptionsRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RenewedSubscriptionsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RenewedSubscriptionsRevenue' from JSON`);
}
/** @internal */
export const RenewedSubscriptionsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const RenewedSubscriptionsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RenewedSubscriptionsNetRevenue$;
(function (RenewedSubscriptionsNetRevenue$) {
    /** @deprecated use `RenewedSubscriptionsNetRevenue$inboundSchema` instead. */
    RenewedSubscriptionsNetRevenue$.inboundSchema = RenewedSubscriptionsNetRevenue$inboundSchema;
    /** @deprecated use `RenewedSubscriptionsNetRevenue$outboundSchema` instead. */
    RenewedSubscriptionsNetRevenue$.outboundSchema = RenewedSubscriptionsNetRevenue$outboundSchema;
})(RenewedSubscriptionsNetRevenue$ || (RenewedSubscriptionsNetRevenue$ = {}));
export function renewedSubscriptionsNetRevenueToJSON(renewedSubscriptionsNetRevenue) {
    return JSON.stringify(RenewedSubscriptionsNetRevenue$outboundSchema.parse(renewedSubscriptionsNetRevenue));
}
export function renewedSubscriptionsNetRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RenewedSubscriptionsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RenewedSubscriptionsNetRevenue' from JSON`);
}
/** @internal */
export const ActiveSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const ActiveSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActiveSubscriptions$;
(function (ActiveSubscriptions$) {
    /** @deprecated use `ActiveSubscriptions$inboundSchema` instead. */
    ActiveSubscriptions$.inboundSchema = ActiveSubscriptions$inboundSchema;
    /** @deprecated use `ActiveSubscriptions$outboundSchema` instead. */
    ActiveSubscriptions$.outboundSchema = ActiveSubscriptions$outboundSchema;
})(ActiveSubscriptions$ || (ActiveSubscriptions$ = {}));
export function activeSubscriptionsToJSON(activeSubscriptions) {
    return JSON.stringify(ActiveSubscriptions$outboundSchema.parse(activeSubscriptions));
}
export function activeSubscriptionsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActiveSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActiveSubscriptions' from JSON`);
}
/** @internal */
export const MonthlyRecurringRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const MonthlyRecurringRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MonthlyRecurringRevenue$;
(function (MonthlyRecurringRevenue$) {
    /** @deprecated use `MonthlyRecurringRevenue$inboundSchema` instead. */
    MonthlyRecurringRevenue$.inboundSchema = MonthlyRecurringRevenue$inboundSchema;
    /** @deprecated use `MonthlyRecurringRevenue$outboundSchema` instead. */
    MonthlyRecurringRevenue$.outboundSchema = MonthlyRecurringRevenue$outboundSchema;
})(MonthlyRecurringRevenue$ || (MonthlyRecurringRevenue$ = {}));
export function monthlyRecurringRevenueToJSON(monthlyRecurringRevenue) {
    return JSON.stringify(MonthlyRecurringRevenue$outboundSchema.parse(monthlyRecurringRevenue));
}
export function monthlyRecurringRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MonthlyRecurringRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MonthlyRecurringRevenue' from JSON`);
}
/** @internal */
export const CommittedMonthlyRecurringRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const CommittedMonthlyRecurringRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CommittedMonthlyRecurringRevenue$;
(function (CommittedMonthlyRecurringRevenue$) {
    /** @deprecated use `CommittedMonthlyRecurringRevenue$inboundSchema` instead. */
    CommittedMonthlyRecurringRevenue$.inboundSchema = CommittedMonthlyRecurringRevenue$inboundSchema;
    /** @deprecated use `CommittedMonthlyRecurringRevenue$outboundSchema` instead. */
    CommittedMonthlyRecurringRevenue$.outboundSchema = CommittedMonthlyRecurringRevenue$outboundSchema;
})(CommittedMonthlyRecurringRevenue$ || (CommittedMonthlyRecurringRevenue$ = {}));
export function committedMonthlyRecurringRevenueToJSON(committedMonthlyRecurringRevenue) {
    return JSON.stringify(CommittedMonthlyRecurringRevenue$outboundSchema.parse(committedMonthlyRecurringRevenue));
}
export function committedMonthlyRecurringRevenueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CommittedMonthlyRecurringRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CommittedMonthlyRecurringRevenue' from JSON`);
}
/** @internal */
export const Checkouts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const Checkouts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Checkouts$;
(function (Checkouts$) {
    /** @deprecated use `Checkouts$inboundSchema` instead. */
    Checkouts$.inboundSchema = Checkouts$inboundSchema;
    /** @deprecated use `Checkouts$outboundSchema` instead. */
    Checkouts$.outboundSchema = Checkouts$outboundSchema;
})(Checkouts$ || (Checkouts$ = {}));
export function checkoutsToJSON(checkouts) {
    return JSON.stringify(Checkouts$outboundSchema.parse(checkouts));
}
export function checkoutsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Checkouts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Checkouts' from JSON`);
}
/** @internal */
export const SucceededCheckouts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const SucceededCheckouts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SucceededCheckouts$;
(function (SucceededCheckouts$) {
    /** @deprecated use `SucceededCheckouts$inboundSchema` instead. */
    SucceededCheckouts$.inboundSchema = SucceededCheckouts$inboundSchema;
    /** @deprecated use `SucceededCheckouts$outboundSchema` instead. */
    SucceededCheckouts$.outboundSchema = SucceededCheckouts$outboundSchema;
})(SucceededCheckouts$ || (SucceededCheckouts$ = {}));
export function succeededCheckoutsToJSON(succeededCheckouts) {
    return JSON.stringify(SucceededCheckouts$outboundSchema.parse(succeededCheckouts));
}
export function succeededCheckoutsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SucceededCheckouts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SucceededCheckouts' from JSON`);
}
/** @internal */
export const CheckoutsConversion$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
export const CheckoutsConversion$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutsConversion$;
(function (CheckoutsConversion$) {
    /** @deprecated use `CheckoutsConversion$inboundSchema` instead. */
    CheckoutsConversion$.inboundSchema = CheckoutsConversion$inboundSchema;
    /** @deprecated use `CheckoutsConversion$outboundSchema` instead. */
    CheckoutsConversion$.outboundSchema = CheckoutsConversion$outboundSchema;
})(CheckoutsConversion$ || (CheckoutsConversion$ = {}));
export function checkoutsConversionToJSON(checkoutsConversion) {
    return JSON.stringify(CheckoutsConversion$outboundSchema.parse(checkoutsConversion));
}
export function checkoutsConversionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutsConversion$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutsConversion' from JSON`);
}
/** @internal */
export const MetricPeriod$inboundSchema = z.object({
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    orders: z.union([z.number().int(), z.number()]),
    revenue: z.union([z.number().int(), z.number()]),
    net_revenue: z.union([z.number().int(), z.number()]),
    cumulative_revenue: z.union([z.number().int(), z.number()]),
    net_cumulative_revenue: z.union([z.number().int(), z.number()]),
    average_order_value: z.union([z.number().int(), z.number()]),
    net_average_order_value: z.union([z.number().int(), z.number()]),
    one_time_products: z.union([z.number().int(), z.number()]),
    one_time_products_revenue: z.union([z.number().int(), z.number()]),
    one_time_products_net_revenue: z.union([z.number().int(), z.number()]),
    new_subscriptions: z.union([z.number().int(), z.number()]),
    new_subscriptions_revenue: z.union([z.number().int(), z.number()]),
    new_subscriptions_net_revenue: z.union([z.number().int(), z.number()]),
    renewed_subscriptions: z.union([z.number().int(), z.number()]),
    renewed_subscriptions_revenue: z.union([z.number().int(), z.number()]),
    renewed_subscriptions_net_revenue: z.union([z.number().int(), z.number()]),
    active_subscriptions: z.union([z.number().int(), z.number()]),
    monthly_recurring_revenue: z.union([z.number().int(), z.number()]),
    committed_monthly_recurring_revenue: z.union([z.number().int(), z.number()]),
    checkouts: z.union([z.number().int(), z.number()]),
    succeeded_checkouts: z.union([z.number().int(), z.number()]),
    checkouts_conversion: z.union([z.number().int(), z.number()]),
}).transform((v) => {
    return remap$(v, {
        "net_revenue": "netRevenue",
        "cumulative_revenue": "cumulativeRevenue",
        "net_cumulative_revenue": "netCumulativeRevenue",
        "average_order_value": "averageOrderValue",
        "net_average_order_value": "netAverageOrderValue",
        "one_time_products": "oneTimeProducts",
        "one_time_products_revenue": "oneTimeProductsRevenue",
        "one_time_products_net_revenue": "oneTimeProductsNetRevenue",
        "new_subscriptions": "newSubscriptions",
        "new_subscriptions_revenue": "newSubscriptionsRevenue",
        "new_subscriptions_net_revenue": "newSubscriptionsNetRevenue",
        "renewed_subscriptions": "renewedSubscriptions",
        "renewed_subscriptions_revenue": "renewedSubscriptionsRevenue",
        "renewed_subscriptions_net_revenue": "renewedSubscriptionsNetRevenue",
        "active_subscriptions": "activeSubscriptions",
        "monthly_recurring_revenue": "monthlyRecurringRevenue",
        "committed_monthly_recurring_revenue": "committedMonthlyRecurringRevenue",
        "succeeded_checkouts": "succeededCheckouts",
        "checkouts_conversion": "checkoutsConversion",
    });
});
/** @internal */
export const MetricPeriod$outboundSchema = z.object({
    timestamp: z.date().transform(v => v.toISOString()),
    orders: z.union([z.number().int(), z.number()]),
    revenue: z.union([z.number().int(), z.number()]),
    netRevenue: z.union([z.number().int(), z.number()]),
    cumulativeRevenue: z.union([z.number().int(), z.number()]),
    netCumulativeRevenue: z.union([z.number().int(), z.number()]),
    averageOrderValue: z.union([z.number().int(), z.number()]),
    netAverageOrderValue: z.union([z.number().int(), z.number()]),
    oneTimeProducts: z.union([z.number().int(), z.number()]),
    oneTimeProductsRevenue: z.union([z.number().int(), z.number()]),
    oneTimeProductsNetRevenue: z.union([z.number().int(), z.number()]),
    newSubscriptions: z.union([z.number().int(), z.number()]),
    newSubscriptionsRevenue: z.union([z.number().int(), z.number()]),
    newSubscriptionsNetRevenue: z.union([z.number().int(), z.number()]),
    renewedSubscriptions: z.union([z.number().int(), z.number()]),
    renewedSubscriptionsRevenue: z.union([z.number().int(), z.number()]),
    renewedSubscriptionsNetRevenue: z.union([z.number().int(), z.number()]),
    activeSubscriptions: z.union([z.number().int(), z.number()]),
    monthlyRecurringRevenue: z.union([z.number().int(), z.number()]),
    committedMonthlyRecurringRevenue: z.union([z.number().int(), z.number()]),
    checkouts: z.union([z.number().int(), z.number()]),
    succeededCheckouts: z.union([z.number().int(), z.number()]),
    checkoutsConversion: z.union([z.number().int(), z.number()]),
}).transform((v) => {
    return remap$(v, {
        netRevenue: "net_revenue",
        cumulativeRevenue: "cumulative_revenue",
        netCumulativeRevenue: "net_cumulative_revenue",
        averageOrderValue: "average_order_value",
        netAverageOrderValue: "net_average_order_value",
        oneTimeProducts: "one_time_products",
        oneTimeProductsRevenue: "one_time_products_revenue",
        oneTimeProductsNetRevenue: "one_time_products_net_revenue",
        newSubscriptions: "new_subscriptions",
        newSubscriptionsRevenue: "new_subscriptions_revenue",
        newSubscriptionsNetRevenue: "new_subscriptions_net_revenue",
        renewedSubscriptions: "renewed_subscriptions",
        renewedSubscriptionsRevenue: "renewed_subscriptions_revenue",
        renewedSubscriptionsNetRevenue: "renewed_subscriptions_net_revenue",
        activeSubscriptions: "active_subscriptions",
        monthlyRecurringRevenue: "monthly_recurring_revenue",
        committedMonthlyRecurringRevenue: "committed_monthly_recurring_revenue",
        succeededCheckouts: "succeeded_checkouts",
        checkoutsConversion: "checkouts_conversion",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var MetricPeriod$;
(function (MetricPeriod$) {
    /** @deprecated use `MetricPeriod$inboundSchema` instead. */
    MetricPeriod$.inboundSchema = MetricPeriod$inboundSchema;
    /** @deprecated use `MetricPeriod$outboundSchema` instead. */
    MetricPeriod$.outboundSchema = MetricPeriod$outboundSchema;
})(MetricPeriod$ || (MetricPeriod$ = {}));
export function metricPeriodToJSON(metricPeriod) {
    return JSON.stringify(MetricPeriod$outboundSchema.parse(metricPeriod));
}
export function metricPeriodFromJSON(jsonString) {
    return safeParse(jsonString, (x) => MetricPeriod$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricPeriod' from JSON`);
}
//# sourceMappingURL=metricperiod.js.map