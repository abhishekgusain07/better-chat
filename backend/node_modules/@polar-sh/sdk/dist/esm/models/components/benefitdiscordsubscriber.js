/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitDiscordSubscriberProperties$inboundSchema, BenefitDiscordSubscriberProperties$outboundSchema, } from "./benefitdiscordsubscriberproperties.js";
import { Organization$inboundSchema, Organization$outboundSchema, } from "./organization.js";
/** @internal */
export const BenefitDiscordSubscriberMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const BenefitDiscordSubscriberMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitDiscordSubscriberMetadata$;
(function (BenefitDiscordSubscriberMetadata$) {
    /** @deprecated use `BenefitDiscordSubscriberMetadata$inboundSchema` instead. */
    BenefitDiscordSubscriberMetadata$.inboundSchema = BenefitDiscordSubscriberMetadata$inboundSchema;
    /** @deprecated use `BenefitDiscordSubscriberMetadata$outboundSchema` instead. */
    BenefitDiscordSubscriberMetadata$.outboundSchema = BenefitDiscordSubscriberMetadata$outboundSchema;
})(BenefitDiscordSubscriberMetadata$ || (BenefitDiscordSubscriberMetadata$ = {}));
export function benefitDiscordSubscriberMetadataToJSON(benefitDiscordSubscriberMetadata) {
    return JSON.stringify(BenefitDiscordSubscriberMetadata$outboundSchema.parse(benefitDiscordSubscriberMetadata));
}
export function benefitDiscordSubscriberMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitDiscordSubscriberMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitDiscordSubscriberMetadata' from JSON`);
}
/** @internal */
export const BenefitDiscordSubscriber$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    type: z.literal("discord"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organization_id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    organization: Organization$inboundSchema,
    properties: BenefitDiscordSubscriberProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const BenefitDiscordSubscriber$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    type: z.literal("discord"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organizationId: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    organization: Organization$outboundSchema,
    properties: BenefitDiscordSubscriberProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitDiscordSubscriber$;
(function (BenefitDiscordSubscriber$) {
    /** @deprecated use `BenefitDiscordSubscriber$inboundSchema` instead. */
    BenefitDiscordSubscriber$.inboundSchema = BenefitDiscordSubscriber$inboundSchema;
    /** @deprecated use `BenefitDiscordSubscriber$outboundSchema` instead. */
    BenefitDiscordSubscriber$.outboundSchema = BenefitDiscordSubscriber$outboundSchema;
})(BenefitDiscordSubscriber$ || (BenefitDiscordSubscriber$ = {}));
export function benefitDiscordSubscriberToJSON(benefitDiscordSubscriber) {
    return JSON.stringify(BenefitDiscordSubscriber$outboundSchema.parse(benefitDiscordSubscriber));
}
export function benefitDiscordSubscriberFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitDiscordSubscriber$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitDiscordSubscriber' from JSON`);
}
//# sourceMappingURL=benefitdiscordsubscriber.js.map