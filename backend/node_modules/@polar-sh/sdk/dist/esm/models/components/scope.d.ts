import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
export declare const Scope: {
    readonly Openid: "openid";
    readonly Profile: "profile";
    readonly Email: "email";
    readonly UserRead: "user:read";
    readonly WebDefault: "web_default";
    readonly OrganizationsRead: "organizations:read";
    readonly OrganizationsWrite: "organizations:write";
    readonly CustomFieldsRead: "custom_fields:read";
    readonly CustomFieldsWrite: "custom_fields:write";
    readonly DiscountsRead: "discounts:read";
    readonly DiscountsWrite: "discounts:write";
    readonly CheckoutLinksRead: "checkout_links:read";
    readonly CheckoutLinksWrite: "checkout_links:write";
    readonly CheckoutsRead: "checkouts:read";
    readonly CheckoutsWrite: "checkouts:write";
    readonly TransactionsRead: "transactions:read";
    readonly TransactionsWrite: "transactions:write";
    readonly PayoutsRead: "payouts:read";
    readonly PayoutsWrite: "payouts:write";
    readonly ProductsRead: "products:read";
    readonly ProductsWrite: "products:write";
    readonly BenefitsRead: "benefits:read";
    readonly BenefitsWrite: "benefits:write";
    readonly EventsRead: "events:read";
    readonly EventsWrite: "events:write";
    readonly MetersRead: "meters:read";
    readonly MetersWrite: "meters:write";
    readonly FilesRead: "files:read";
    readonly FilesWrite: "files:write";
    readonly SubscriptionsRead: "subscriptions:read";
    readonly SubscriptionsWrite: "subscriptions:write";
    readonly CustomersRead: "customers:read";
    readonly CustomersWrite: "customers:write";
    readonly CustomerMetersRead: "customer_meters:read";
    readonly CustomerSessionsWrite: "customer_sessions:write";
    readonly OrdersRead: "orders:read";
    readonly OrdersWrite: "orders:write";
    readonly RefundsRead: "refunds:read";
    readonly RefundsWrite: "refunds:write";
    readonly PaymentsRead: "payments:read";
    readonly MetricsRead: "metrics:read";
    readonly WebhooksRead: "webhooks:read";
    readonly WebhooksWrite: "webhooks:write";
    readonly ExternalOrganizationsRead: "external_organizations:read";
    readonly LicenseKeysRead: "license_keys:read";
    readonly LicenseKeysWrite: "license_keys:write";
    readonly RepositoriesRead: "repositories:read";
    readonly RepositoriesWrite: "repositories:write";
    readonly IssuesRead: "issues:read";
    readonly IssuesWrite: "issues:write";
    readonly CustomerPortalRead: "customer_portal:read";
    readonly CustomerPortalWrite: "customer_portal:write";
    readonly NotificationsRead: "notifications:read";
    readonly NotificationsWrite: "notifications:write";
    readonly NotificationRecipientsRead: "notification_recipients:read";
    readonly NotificationRecipientsWrite: "notification_recipients:write";
};
export type Scope = ClosedEnum<typeof Scope>;
/** @internal */
export declare const Scope$inboundSchema: z.ZodNativeEnum<typeof Scope>;
/** @internal */
export declare const Scope$outboundSchema: z.ZodNativeEnum<typeof Scope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Scope$ {
    /** @deprecated use `Scope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Openid: "openid";
        readonly Profile: "profile";
        readonly Email: "email";
        readonly UserRead: "user:read";
        readonly WebDefault: "web_default";
        readonly OrganizationsRead: "organizations:read";
        readonly OrganizationsWrite: "organizations:write";
        readonly CustomFieldsRead: "custom_fields:read";
        readonly CustomFieldsWrite: "custom_fields:write";
        readonly DiscountsRead: "discounts:read";
        readonly DiscountsWrite: "discounts:write";
        readonly CheckoutLinksRead: "checkout_links:read";
        readonly CheckoutLinksWrite: "checkout_links:write";
        readonly CheckoutsRead: "checkouts:read";
        readonly CheckoutsWrite: "checkouts:write";
        readonly TransactionsRead: "transactions:read";
        readonly TransactionsWrite: "transactions:write";
        readonly PayoutsRead: "payouts:read";
        readonly PayoutsWrite: "payouts:write";
        readonly ProductsRead: "products:read";
        readonly ProductsWrite: "products:write";
        readonly BenefitsRead: "benefits:read";
        readonly BenefitsWrite: "benefits:write";
        readonly EventsRead: "events:read";
        readonly EventsWrite: "events:write";
        readonly MetersRead: "meters:read";
        readonly MetersWrite: "meters:write";
        readonly FilesRead: "files:read";
        readonly FilesWrite: "files:write";
        readonly SubscriptionsRead: "subscriptions:read";
        readonly SubscriptionsWrite: "subscriptions:write";
        readonly CustomersRead: "customers:read";
        readonly CustomersWrite: "customers:write";
        readonly CustomerMetersRead: "customer_meters:read";
        readonly CustomerSessionsWrite: "customer_sessions:write";
        readonly OrdersRead: "orders:read";
        readonly OrdersWrite: "orders:write";
        readonly RefundsRead: "refunds:read";
        readonly RefundsWrite: "refunds:write";
        readonly PaymentsRead: "payments:read";
        readonly MetricsRead: "metrics:read";
        readonly WebhooksRead: "webhooks:read";
        readonly WebhooksWrite: "webhooks:write";
        readonly ExternalOrganizationsRead: "external_organizations:read";
        readonly LicenseKeysRead: "license_keys:read";
        readonly LicenseKeysWrite: "license_keys:write";
        readonly RepositoriesRead: "repositories:read";
        readonly RepositoriesWrite: "repositories:write";
        readonly IssuesRead: "issues:read";
        readonly IssuesWrite: "issues:write";
        readonly CustomerPortalRead: "customer_portal:read";
        readonly CustomerPortalWrite: "customer_portal:write";
        readonly NotificationsRead: "notifications:read";
        readonly NotificationsWrite: "notifications:write";
        readonly NotificationRecipientsRead: "notification_recipients:read";
        readonly NotificationRecipientsWrite: "notification_recipients:write";
    }>;
    /** @deprecated use `Scope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Openid: "openid";
        readonly Profile: "profile";
        readonly Email: "email";
        readonly UserRead: "user:read";
        readonly WebDefault: "web_default";
        readonly OrganizationsRead: "organizations:read";
        readonly OrganizationsWrite: "organizations:write";
        readonly CustomFieldsRead: "custom_fields:read";
        readonly CustomFieldsWrite: "custom_fields:write";
        readonly DiscountsRead: "discounts:read";
        readonly DiscountsWrite: "discounts:write";
        readonly CheckoutLinksRead: "checkout_links:read";
        readonly CheckoutLinksWrite: "checkout_links:write";
        readonly CheckoutsRead: "checkouts:read";
        readonly CheckoutsWrite: "checkouts:write";
        readonly TransactionsRead: "transactions:read";
        readonly TransactionsWrite: "transactions:write";
        readonly PayoutsRead: "payouts:read";
        readonly PayoutsWrite: "payouts:write";
        readonly ProductsRead: "products:read";
        readonly ProductsWrite: "products:write";
        readonly BenefitsRead: "benefits:read";
        readonly BenefitsWrite: "benefits:write";
        readonly EventsRead: "events:read";
        readonly EventsWrite: "events:write";
        readonly MetersRead: "meters:read";
        readonly MetersWrite: "meters:write";
        readonly FilesRead: "files:read";
        readonly FilesWrite: "files:write";
        readonly SubscriptionsRead: "subscriptions:read";
        readonly SubscriptionsWrite: "subscriptions:write";
        readonly CustomersRead: "customers:read";
        readonly CustomersWrite: "customers:write";
        readonly CustomerMetersRead: "customer_meters:read";
        readonly CustomerSessionsWrite: "customer_sessions:write";
        readonly OrdersRead: "orders:read";
        readonly OrdersWrite: "orders:write";
        readonly RefundsRead: "refunds:read";
        readonly RefundsWrite: "refunds:write";
        readonly PaymentsRead: "payments:read";
        readonly MetricsRead: "metrics:read";
        readonly WebhooksRead: "webhooks:read";
        readonly WebhooksWrite: "webhooks:write";
        readonly ExternalOrganizationsRead: "external_organizations:read";
        readonly LicenseKeysRead: "license_keys:read";
        readonly LicenseKeysWrite: "license_keys:write";
        readonly RepositoriesRead: "repositories:read";
        readonly RepositoriesWrite: "repositories:write";
        readonly IssuesRead: "issues:read";
        readonly IssuesWrite: "issues:write";
        readonly CustomerPortalRead: "customer_portal:read";
        readonly CustomerPortalWrite: "customer_portal:write";
        readonly NotificationsRead: "notifications:read";
        readonly NotificationsWrite: "notifications:write";
        readonly NotificationRecipientsRead: "notification_recipients:read";
        readonly NotificationRecipientsWrite: "notification_recipients:write";
    }>;
}
//# sourceMappingURL=scope.d.ts.map