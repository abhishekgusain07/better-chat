/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ProductPriceMeter$inboundSchema, ProductPriceMeter$outboundSchema, } from "./productpricemeter.js";
import { ProductPriceType$inboundSchema, ProductPriceType$outboundSchema, } from "./productpricetype.js";
import { SubscriptionRecurringInterval$inboundSchema, SubscriptionRecurringInterval$outboundSchema, } from "./subscriptionrecurringinterval.js";
/** @internal */
export const ProductPriceMeteredUnit$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    amount_type: z.literal("metered_unit"),
    is_archived: z.boolean(),
    product_id: z.string(),
    type: ProductPriceType$inboundSchema,
    recurring_interval: z.nullable(SubscriptionRecurringInterval$inboundSchema),
    price_currency: z.string(),
    unit_amount: z.string(),
    cap_amount: z.nullable(z.number().int()),
    meter_id: z.string(),
    meter: ProductPriceMeter$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "amount_type": "amountType",
        "is_archived": "isArchived",
        "product_id": "productId",
        "recurring_interval": "recurringInterval",
        "price_currency": "priceCurrency",
        "unit_amount": "unitAmount",
        "cap_amount": "capAmount",
        "meter_id": "meterId",
    });
});
/** @internal */
export const ProductPriceMeteredUnit$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    amountType: z.literal("metered_unit"),
    isArchived: z.boolean(),
    productId: z.string(),
    type: ProductPriceType$outboundSchema,
    recurringInterval: z.nullable(SubscriptionRecurringInterval$outboundSchema),
    priceCurrency: z.string(),
    unitAmount: z.string(),
    capAmount: z.nullable(z.number().int()),
    meterId: z.string(),
    meter: ProductPriceMeter$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        amountType: "amount_type",
        isArchived: "is_archived",
        productId: "product_id",
        recurringInterval: "recurring_interval",
        priceCurrency: "price_currency",
        unitAmount: "unit_amount",
        capAmount: "cap_amount",
        meterId: "meter_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductPriceMeteredUnit$;
(function (ProductPriceMeteredUnit$) {
    /** @deprecated use `ProductPriceMeteredUnit$inboundSchema` instead. */
    ProductPriceMeteredUnit$.inboundSchema = ProductPriceMeteredUnit$inboundSchema;
    /** @deprecated use `ProductPriceMeteredUnit$outboundSchema` instead. */
    ProductPriceMeteredUnit$.outboundSchema = ProductPriceMeteredUnit$outboundSchema;
})(ProductPriceMeteredUnit$ || (ProductPriceMeteredUnit$ = {}));
export function productPriceMeteredUnitToJSON(productPriceMeteredUnit) {
    return JSON.stringify(ProductPriceMeteredUnit$outboundSchema.parse(productPriceMeteredUnit));
}
export function productPriceMeteredUnitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductPriceMeteredUnit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductPriceMeteredUnit' from JSON`);
}
//# sourceMappingURL=productpricemeteredunit.js.map