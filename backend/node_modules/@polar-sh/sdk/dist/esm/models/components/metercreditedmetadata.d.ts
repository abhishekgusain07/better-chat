import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type MeterCreditedMetadata = {
    meterId: string;
    units: number;
    rollover: boolean;
};
/** @internal */
export declare const MeterCreditedMetadata$inboundSchema: z.ZodType<MeterCreditedMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type MeterCreditedMetadata$Outbound = {
    meter_id: string;
    units: number;
    rollover: boolean;
};
/** @internal */
export declare const MeterCreditedMetadata$outboundSchema: z.ZodType<MeterCreditedMetadata$Outbound, z.ZodTypeDef, MeterCreditedMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MeterCreditedMetadata$ {
    /** @deprecated use `MeterCreditedMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MeterCreditedMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `MeterCreditedMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MeterCreditedMetadata$Outbound, z.ZodTypeDef, MeterCreditedMetadata>;
    /** @deprecated use `MeterCreditedMetadata$Outbound` instead. */
    type Outbound = MeterCreditedMetadata$Outbound;
}
export declare function meterCreditedMetadataToJSON(meterCreditedMetadata: MeterCreditedMetadata): string;
export declare function meterCreditedMetadataFromJSON(jsonString: string): SafeParseResult<MeterCreditedMetadata, SDKValidationError>;
//# sourceMappingURL=metercreditedmetadata.d.ts.map