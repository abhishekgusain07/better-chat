/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitGrantMetadata$inboundSchema, BenefitGrantMetadata$outboundSchema, } from "./benefitgrantmetadata.js";
import { Customer$inboundSchema, Customer$outboundSchema, } from "./customer.js";
/** @internal */
export const BenefitCycledEvent$inboundSchema = z.object({
    id: z.string(),
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    organization_id: z.string(),
    customer_id: z.nullable(z.string()),
    customer: z.nullable(Customer$inboundSchema),
    external_customer_id: z.nullable(z.string()),
    source: z.literal("system"),
    name: z.literal("benefit.cycled"),
    metadata: BenefitGrantMetadata$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "organization_id": "organizationId",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
    });
});
/** @internal */
export const BenefitCycledEvent$outboundSchema = z.object({
    id: z.string(),
    timestamp: z.date().transform(v => v.toISOString()),
    organizationId: z.string(),
    customerId: z.nullable(z.string()),
    customer: z.nullable(Customer$outboundSchema),
    externalCustomerId: z.nullable(z.string()),
    source: z.literal("system"),
    name: z.literal("benefit.cycled"),
    metadata: BenefitGrantMetadata$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        organizationId: "organization_id",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitCycledEvent$;
(function (BenefitCycledEvent$) {
    /** @deprecated use `BenefitCycledEvent$inboundSchema` instead. */
    BenefitCycledEvent$.inboundSchema = BenefitCycledEvent$inboundSchema;
    /** @deprecated use `BenefitCycledEvent$outboundSchema` instead. */
    BenefitCycledEvent$.outboundSchema = BenefitCycledEvent$outboundSchema;
})(BenefitCycledEvent$ || (BenefitCycledEvent$ = {}));
export function benefitCycledEventToJSON(benefitCycledEvent) {
    return JSON.stringify(BenefitCycledEvent$outboundSchema.parse(benefitCycledEvent));
}
export function benefitCycledEventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitCycledEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitCycledEvent' from JSON`);
}
//# sourceMappingURL=benefitcycledevent.js.map