/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { EventSource$inboundSchema, EventSource$outboundSchema, } from "./eventsource.js";
/** @internal */
export const EventName$inboundSchema = z.object({
    name: z.string(),
    source: EventSource$inboundSchema,
    occurrences: z.number().int(),
    first_seen: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    last_seen: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return remap$(v, {
        "first_seen": "firstSeen",
        "last_seen": "lastSeen",
    });
});
/** @internal */
export const EventName$outboundSchema = z.object({
    name: z.string(),
    source: EventSource$outboundSchema,
    occurrences: z.number().int(),
    firstSeen: z.date().transform(v => v.toISOString()),
    lastSeen: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return remap$(v, {
        firstSeen: "first_seen",
        lastSeen: "last_seen",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventName$;
(function (EventName$) {
    /** @deprecated use `EventName$inboundSchema` instead. */
    EventName$.inboundSchema = EventName$inboundSchema;
    /** @deprecated use `EventName$outboundSchema` instead. */
    EventName$.outboundSchema = EventName$outboundSchema;
})(EventName$ || (EventName$ = {}));
export function eventNameToJSON(eventName) {
    return JSON.stringify(EventName$outboundSchema.parse(eventName));
}
export function eventNameFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventName$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventName' from JSON`);
}
//# sourceMappingURL=eventname.js.map