/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
import { TaxIDFormat$inboundSchema, TaxIDFormat$outboundSchema, } from "./taxidformat.js";
/** @internal */
export const CustomerUpdateExternalIDMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const CustomerUpdateExternalIDMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerUpdateExternalIDMetadata$;
(function (CustomerUpdateExternalIDMetadata$) {
    /** @deprecated use `CustomerUpdateExternalIDMetadata$inboundSchema` instead. */
    CustomerUpdateExternalIDMetadata$.inboundSchema = CustomerUpdateExternalIDMetadata$inboundSchema;
    /** @deprecated use `CustomerUpdateExternalIDMetadata$outboundSchema` instead. */
    CustomerUpdateExternalIDMetadata$.outboundSchema = CustomerUpdateExternalIDMetadata$outboundSchema;
})(CustomerUpdateExternalIDMetadata$ || (CustomerUpdateExternalIDMetadata$ = {}));
export function customerUpdateExternalIDMetadataToJSON(customerUpdateExternalIDMetadata) {
    return JSON.stringify(CustomerUpdateExternalIDMetadata$outboundSchema.parse(customerUpdateExternalIDMetadata));
}
export function customerUpdateExternalIDMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerUpdateExternalIDMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdateExternalIDMetadata' from JSON`);
}
/** @internal */
export const CustomerUpdateExternalIDTaxID$inboundSchema = z.union([z.string(), TaxIDFormat$inboundSchema]);
/** @internal */
export const CustomerUpdateExternalIDTaxID$outboundSchema = z.union([z.string(), TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerUpdateExternalIDTaxID$;
(function (CustomerUpdateExternalIDTaxID$) {
    /** @deprecated use `CustomerUpdateExternalIDTaxID$inboundSchema` instead. */
    CustomerUpdateExternalIDTaxID$.inboundSchema = CustomerUpdateExternalIDTaxID$inboundSchema;
    /** @deprecated use `CustomerUpdateExternalIDTaxID$outboundSchema` instead. */
    CustomerUpdateExternalIDTaxID$.outboundSchema = CustomerUpdateExternalIDTaxID$outboundSchema;
})(CustomerUpdateExternalIDTaxID$ || (CustomerUpdateExternalIDTaxID$ = {}));
export function customerUpdateExternalIDTaxIDToJSON(customerUpdateExternalIDTaxID) {
    return JSON.stringify(CustomerUpdateExternalIDTaxID$outboundSchema.parse(customerUpdateExternalIDTaxID));
}
export function customerUpdateExternalIDTaxIDFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerUpdateExternalIDTaxID$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdateExternalIDTaxID' from JSON`);
}
/** @internal */
export const CustomerUpdateExternalID$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    email: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    billing_address: z.nullable(Address$inboundSchema).optional(),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$inboundSchema])))).optional(),
}).transform((v) => {
    return remap$(v, {
        "billing_address": "billingAddress",
        "tax_id": "taxId",
    });
});
/** @internal */
export const CustomerUpdateExternalID$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    email: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    billingAddress: z.nullable(Address$outboundSchema).optional(),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$outboundSchema])))).optional(),
}).transform((v) => {
    return remap$(v, {
        billingAddress: "billing_address",
        taxId: "tax_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerUpdateExternalID$;
(function (CustomerUpdateExternalID$) {
    /** @deprecated use `CustomerUpdateExternalID$inboundSchema` instead. */
    CustomerUpdateExternalID$.inboundSchema = CustomerUpdateExternalID$inboundSchema;
    /** @deprecated use `CustomerUpdateExternalID$outboundSchema` instead. */
    CustomerUpdateExternalID$.outboundSchema = CustomerUpdateExternalID$outboundSchema;
})(CustomerUpdateExternalID$ || (CustomerUpdateExternalID$ = {}));
export function customerUpdateExternalIDToJSON(customerUpdateExternalID) {
    return JSON.stringify(CustomerUpdateExternalID$outboundSchema.parse(customerUpdateExternalID));
}
export function customerUpdateExternalIDFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerUpdateExternalID$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdateExternalID' from JSON`);
}
//# sourceMappingURL=customerupdateexternalid.js.map