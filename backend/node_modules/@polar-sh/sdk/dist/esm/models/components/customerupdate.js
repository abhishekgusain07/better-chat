/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Address$inboundSchema, Address$outboundSchema, } from "./address.js";
import { TaxIDFormat$inboundSchema, TaxIDFormat$outboundSchema, } from "./taxidformat.js";
/** @internal */
export const CustomerUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const CustomerUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerUpdateMetadata$;
(function (CustomerUpdateMetadata$) {
    /** @deprecated use `CustomerUpdateMetadata$inboundSchema` instead. */
    CustomerUpdateMetadata$.inboundSchema = CustomerUpdateMetadata$inboundSchema;
    /** @deprecated use `CustomerUpdateMetadata$outboundSchema` instead. */
    CustomerUpdateMetadata$.outboundSchema = CustomerUpdateMetadata$outboundSchema;
})(CustomerUpdateMetadata$ || (CustomerUpdateMetadata$ = {}));
export function customerUpdateMetadataToJSON(customerUpdateMetadata) {
    return JSON.stringify(CustomerUpdateMetadata$outboundSchema.parse(customerUpdateMetadata));
}
export function customerUpdateMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdateMetadata' from JSON`);
}
/** @internal */
export const CustomerUpdateTaxId$inboundSchema = z.union([z.string(), TaxIDFormat$inboundSchema]);
/** @internal */
export const CustomerUpdateTaxId$outboundSchema = z.union([z.string(), TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerUpdateTaxId$;
(function (CustomerUpdateTaxId$) {
    /** @deprecated use `CustomerUpdateTaxId$inboundSchema` instead. */
    CustomerUpdateTaxId$.inboundSchema = CustomerUpdateTaxId$inboundSchema;
    /** @deprecated use `CustomerUpdateTaxId$outboundSchema` instead. */
    CustomerUpdateTaxId$.outboundSchema = CustomerUpdateTaxId$outboundSchema;
})(CustomerUpdateTaxId$ || (CustomerUpdateTaxId$ = {}));
export function customerUpdateTaxIdToJSON(customerUpdateTaxId) {
    return JSON.stringify(CustomerUpdateTaxId$outboundSchema.parse(customerUpdateTaxId));
}
export function customerUpdateTaxIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerUpdateTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdateTaxId' from JSON`);
}
/** @internal */
export const CustomerUpdate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    email: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    billing_address: z.nullable(Address$inboundSchema).optional(),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$inboundSchema])))).optional(),
    external_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "external_id": "externalId",
    });
});
/** @internal */
export const CustomerUpdate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    email: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    billingAddress: z.nullable(Address$outboundSchema).optional(),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), TaxIDFormat$outboundSchema])))).optional(),
    externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        billingAddress: "billing_address",
        taxId: "tax_id",
        externalId: "external_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerUpdate$;
(function (CustomerUpdate$) {
    /** @deprecated use `CustomerUpdate$inboundSchema` instead. */
    CustomerUpdate$.inboundSchema = CustomerUpdate$inboundSchema;
    /** @deprecated use `CustomerUpdate$outboundSchema` instead. */
    CustomerUpdate$.outboundSchema = CustomerUpdate$outboundSchema;
})(CustomerUpdate$ || (CustomerUpdate$ = {}));
export function customerUpdateToJSON(customerUpdate) {
    return JSON.stringify(CustomerUpdate$outboundSchema.parse(customerUpdate));
}
export function customerUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdate' from JSON`);
}
//# sourceMappingURL=customerupdate.js.map