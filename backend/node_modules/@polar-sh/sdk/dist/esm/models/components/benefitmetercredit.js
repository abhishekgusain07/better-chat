/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitMeterCreditProperties$inboundSchema, BenefitMeterCreditProperties$outboundSchema, } from "./benefitmetercreditproperties.js";
/** @internal */
export const BenefitMeterCreditMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const BenefitMeterCreditMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitMeterCreditMetadata$;
(function (BenefitMeterCreditMetadata$) {
    /** @deprecated use `BenefitMeterCreditMetadata$inboundSchema` instead. */
    BenefitMeterCreditMetadata$.inboundSchema = BenefitMeterCreditMetadata$inboundSchema;
    /** @deprecated use `BenefitMeterCreditMetadata$outboundSchema` instead. */
    BenefitMeterCreditMetadata$.outboundSchema = BenefitMeterCreditMetadata$outboundSchema;
})(BenefitMeterCreditMetadata$ || (BenefitMeterCreditMetadata$ = {}));
export function benefitMeterCreditMetadataToJSON(benefitMeterCreditMetadata) {
    return JSON.stringify(BenefitMeterCreditMetadata$outboundSchema.parse(benefitMeterCreditMetadata));
}
export function benefitMeterCreditMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitMeterCreditMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitMeterCreditMetadata' from JSON`);
}
/** @internal */
export const BenefitMeterCredit$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    type: z.literal("meter_credit"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organization_id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    properties: BenefitMeterCreditProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const BenefitMeterCredit$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    type: z.literal("meter_credit"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organizationId: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    properties: BenefitMeterCreditProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitMeterCredit$;
(function (BenefitMeterCredit$) {
    /** @deprecated use `BenefitMeterCredit$inboundSchema` instead. */
    BenefitMeterCredit$.inboundSchema = BenefitMeterCredit$inboundSchema;
    /** @deprecated use `BenefitMeterCredit$outboundSchema` instead. */
    BenefitMeterCredit$.outboundSchema = BenefitMeterCredit$outboundSchema;
})(BenefitMeterCredit$ || (BenefitMeterCredit$ = {}));
export function benefitMeterCreditToJSON(benefitMeterCredit) {
    return JSON.stringify(BenefitMeterCredit$outboundSchema.parse(benefitMeterCredit));
}
export function benefitMeterCreditFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitMeterCredit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitMeterCredit' from JSON`);
}
//# sourceMappingURL=benefitmetercredit.js.map