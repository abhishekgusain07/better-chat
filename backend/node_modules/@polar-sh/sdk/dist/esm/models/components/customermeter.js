/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Customer$inboundSchema, Customer$outboundSchema, } from "./customer.js";
import { Meter$inboundSchema, Meter$outboundSchema, } from "./meter.js";
/** @internal */
export const CustomerMeter$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    customer_id: z.string(),
    meter_id: z.string(),
    consumed_units: z.number(),
    credited_units: z.number().int(),
    balance: z.number(),
    customer: Customer$inboundSchema,
    meter: Meter$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "customer_id": "customerId",
        "meter_id": "meterId",
        "consumed_units": "consumedUnits",
        "credited_units": "creditedUnits",
    });
});
/** @internal */
export const CustomerMeter$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    customerId: z.string(),
    meterId: z.string(),
    consumedUnits: z.number(),
    creditedUnits: z.number().int(),
    balance: z.number(),
    customer: Customer$outboundSchema,
    meter: Meter$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        customerId: "customer_id",
        meterId: "meter_id",
        consumedUnits: "consumed_units",
        creditedUnits: "credited_units",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerMeter$;
(function (CustomerMeter$) {
    /** @deprecated use `CustomerMeter$inboundSchema` instead. */
    CustomerMeter$.inboundSchema = CustomerMeter$inboundSchema;
    /** @deprecated use `CustomerMeter$outboundSchema` instead. */
    CustomerMeter$.outboundSchema = CustomerMeter$outboundSchema;
})(CustomerMeter$ || (CustomerMeter$ = {}));
export function customerMeterToJSON(customerMeter) {
    return JSON.stringify(CustomerMeter$outboundSchema.parse(customerMeter));
}
export function customerMeterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerMeter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerMeter' from JSON`);
}
//# sourceMappingURL=customermeter.js.map