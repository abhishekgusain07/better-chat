import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Conditions = string | number | number | boolean;
export type LicenseKeyValidate = {
    key: string;
    organizationId: string;
    activationId?: string | null | undefined;
    benefitId?: string | null | undefined;
    customerId?: string | null | undefined;
    incrementUsage?: number | null | undefined;
    /**
     * Key-value object allowing you to set conditions that must match when validating the license key.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    conditions?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
};
/** @internal */
export declare const Conditions$inboundSchema: z.ZodType<Conditions, z.ZodTypeDef, unknown>;
/** @internal */
export type Conditions$Outbound = string | number | number | boolean;
/** @internal */
export declare const Conditions$outboundSchema: z.ZodType<Conditions$Outbound, z.ZodTypeDef, Conditions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Conditions$ {
    /** @deprecated use `Conditions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Conditions, z.ZodTypeDef, unknown>;
    /** @deprecated use `Conditions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Conditions$Outbound, z.ZodTypeDef, Conditions>;
    /** @deprecated use `Conditions$Outbound` instead. */
    type Outbound = Conditions$Outbound;
}
export declare function conditionsToJSON(conditions: Conditions): string;
export declare function conditionsFromJSON(jsonString: string): SafeParseResult<Conditions, SDKValidationError>;
/** @internal */
export declare const LicenseKeyValidate$inboundSchema: z.ZodType<LicenseKeyValidate, z.ZodTypeDef, unknown>;
/** @internal */
export type LicenseKeyValidate$Outbound = {
    key: string;
    organization_id: string;
    activation_id?: string | null | undefined;
    benefit_id?: string | null | undefined;
    customer_id?: string | null | undefined;
    increment_usage?: number | null | undefined;
    conditions?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
};
/** @internal */
export declare const LicenseKeyValidate$outboundSchema: z.ZodType<LicenseKeyValidate$Outbound, z.ZodTypeDef, LicenseKeyValidate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LicenseKeyValidate$ {
    /** @deprecated use `LicenseKeyValidate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LicenseKeyValidate, z.ZodTypeDef, unknown>;
    /** @deprecated use `LicenseKeyValidate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LicenseKeyValidate$Outbound, z.ZodTypeDef, LicenseKeyValidate>;
    /** @deprecated use `LicenseKeyValidate$Outbound` instead. */
    type Outbound = LicenseKeyValidate$Outbound;
}
export declare function licenseKeyValidateToJSON(licenseKeyValidate: LicenseKeyValidate): string;
export declare function licenseKeyValidateFromJSON(jsonString: string): SafeParseResult<LicenseKeyValidate, SDKValidationError>;
//# sourceMappingURL=licensekeyvalidate.d.ts.map