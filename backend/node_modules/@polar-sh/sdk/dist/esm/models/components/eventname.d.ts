import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { EventSource } from "./eventsource.js";
export type EventName = {
    /**
     * The name of the event.
     */
    name: string;
    source: EventSource;
    /**
     * Number of times the event has occurred.
     */
    occurrences: number;
    /**
     * The first time the event occurred.
     */
    firstSeen: Date;
    /**
     * The last time the event occurred.
     */
    lastSeen: Date;
};
/** @internal */
export declare const EventName$inboundSchema: z.ZodType<EventName, z.ZodTypeDef, unknown>;
/** @internal */
export type EventName$Outbound = {
    name: string;
    source: string;
    occurrences: number;
    first_seen: string;
    last_seen: string;
};
/** @internal */
export declare const EventName$outboundSchema: z.ZodType<EventName$Outbound, z.ZodTypeDef, EventName>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventName$ {
    /** @deprecated use `EventName$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventName, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventName$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventName$Outbound, z.ZodTypeDef, EventName>;
    /** @deprecated use `EventName$Outbound` instead. */
    type Outbound = EventName$Outbound;
}
export declare function eventNameToJSON(eventName: EventName): string;
export declare function eventNameFromJSON(jsonString: string): SafeParseResult<EventName, SDKValidationError>;
//# sourceMappingURL=eventname.d.ts.map