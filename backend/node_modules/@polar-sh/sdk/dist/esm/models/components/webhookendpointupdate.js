/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { WebhookEventType$inboundSchema, WebhookEventType$outboundSchema, } from "./webhookeventtype.js";
import { WebhookFormat$inboundSchema, WebhookFormat$outboundSchema, } from "./webhookformat.js";
/** @internal */
export const WebhookEndpointUpdate$inboundSchema = z.object({
    url: z.nullable(z.string()).optional(),
    secret: z.nullable(z.string()).optional(),
    format: z.nullable(WebhookFormat$inboundSchema).optional(),
    events: z.nullable(z.array(WebhookEventType$inboundSchema)).optional(),
});
/** @internal */
export const WebhookEndpointUpdate$outboundSchema = z.object({
    url: z.nullable(z.string()).optional(),
    secret: z.nullable(z.string()).optional(),
    format: z.nullable(WebhookFormat$outboundSchema).optional(),
    events: z.nullable(z.array(WebhookEventType$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var WebhookEndpointUpdate$;
(function (WebhookEndpointUpdate$) {
    /** @deprecated use `WebhookEndpointUpdate$inboundSchema` instead. */
    WebhookEndpointUpdate$.inboundSchema = WebhookEndpointUpdate$inboundSchema;
    /** @deprecated use `WebhookEndpointUpdate$outboundSchema` instead. */
    WebhookEndpointUpdate$.outboundSchema = WebhookEndpointUpdate$outboundSchema;
})(WebhookEndpointUpdate$ || (WebhookEndpointUpdate$ = {}));
export function webhookEndpointUpdateToJSON(webhookEndpointUpdate) {
    return JSON.stringify(WebhookEndpointUpdate$outboundSchema.parse(webhookEndpointUpdate));
}
export function webhookEndpointUpdateFromJSON(jsonString) {
    return safeParse(jsonString, (x) => WebhookEndpointUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WebhookEndpointUpdate' from JSON`);
}
//# sourceMappingURL=webhookendpointupdate.js.map