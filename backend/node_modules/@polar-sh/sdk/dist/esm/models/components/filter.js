/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { FilterClause$inboundSchema, FilterClause$outboundSchema, } from "./filterclause.js";
import { FilterConjunction$inboundSchema, FilterConjunction$outboundSchema, } from "./filterconjunction.js";
/** @internal */
export const Filter$inboundSchema = z
    .object({
    conjunction: FilterConjunction$inboundSchema,
    clauses: z.array(z.union([FilterClause$inboundSchema, z.lazy(() => Filter$inboundSchema)])),
});
/** @internal */
export const Filter$outboundSchema = z.object({
    conjunction: FilterConjunction$outboundSchema,
    clauses: z.array(z.union([FilterClause$outboundSchema, z.lazy(() => Filter$outboundSchema)])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Filter$;
(function (Filter$) {
    /** @deprecated use `Filter$inboundSchema` instead. */
    Filter$.inboundSchema = Filter$inboundSchema;
    /** @deprecated use `Filter$outboundSchema` instead. */
    Filter$.outboundSchema = Filter$outboundSchema;
})(Filter$ || (Filter$ = {}));
export function filterToJSON(filter) {
    return JSON.stringify(Filter$outboundSchema.parse(filter));
}
export function filterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Filter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Filter' from JSON`);
}
/** @internal */
export const Clauses$inboundSchema = z.union([FilterClause$inboundSchema, z.lazy(() => Filter$inboundSchema)]);
/** @internal */
export const Clauses$outboundSchema = z.union([FilterClause$outboundSchema, z.lazy(() => Filter$outboundSchema)]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Clauses$;
(function (Clauses$) {
    /** @deprecated use `Clauses$inboundSchema` instead. */
    Clauses$.inboundSchema = Clauses$inboundSchema;
    /** @deprecated use `Clauses$outboundSchema` instead. */
    Clauses$.outboundSchema = Clauses$outboundSchema;
})(Clauses$ || (Clauses$ = {}));
export function clausesToJSON(clauses) {
    return JSON.stringify(Clauses$outboundSchema.parse(clauses));
}
export function clausesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Clauses$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Clauses' from JSON`);
}
//# sourceMappingURL=filter.js.map