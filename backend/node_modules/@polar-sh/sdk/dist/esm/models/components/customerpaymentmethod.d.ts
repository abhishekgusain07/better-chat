import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { PaymentMethodCard, PaymentMethodCard$Outbound } from "./paymentmethodcard.js";
import { PaymentMethodGeneric, PaymentMethodGeneric$Outbound } from "./paymentmethodgeneric.js";
export type CustomerPaymentMethod = PaymentMethodCard | PaymentMethodGeneric;
/** @internal */
export declare const CustomerPaymentMethod$inboundSchema: z.ZodType<CustomerPaymentMethod, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerPaymentMethod$Outbound = PaymentMethodCard$Outbound | PaymentMethodGeneric$Outbound;
/** @internal */
export declare const CustomerPaymentMethod$outboundSchema: z.ZodType<CustomerPaymentMethod$Outbound, z.ZodTypeDef, CustomerPaymentMethod>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerPaymentMethod$ {
    /** @deprecated use `CustomerPaymentMethod$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerPaymentMethod, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerPaymentMethod$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerPaymentMethod$Outbound, z.ZodTypeDef, CustomerPaymentMethod>;
    /** @deprecated use `CustomerPaymentMethod$Outbound` instead. */
    type Outbound = CustomerPaymentMethod$Outbound;
}
export declare function customerPaymentMethodToJSON(customerPaymentMethod: CustomerPaymentMethod): string;
export declare function customerPaymentMethodFromJSON(jsonString: string): SafeParseResult<CustomerPaymentMethod, SDKValidationError>;
//# sourceMappingURL=customerpaymentmethod.d.ts.map