/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Metric$inboundSchema, Metric$outboundSchema, } from "./metric.js";
/** @internal */
export const Metrics$inboundSchema = z.object({
    orders: Metric$inboundSchema,
    revenue: Metric$inboundSchema,
    net_revenue: Metric$inboundSchema,
    cumulative_revenue: Metric$inboundSchema,
    net_cumulative_revenue: Metric$inboundSchema,
    average_order_value: Metric$inboundSchema,
    net_average_order_value: Metric$inboundSchema,
    one_time_products: Metric$inboundSchema,
    one_time_products_revenue: Metric$inboundSchema,
    one_time_products_net_revenue: Metric$inboundSchema,
    new_subscriptions: Metric$inboundSchema,
    new_subscriptions_revenue: Metric$inboundSchema,
    new_subscriptions_net_revenue: Metric$inboundSchema,
    renewed_subscriptions: Metric$inboundSchema,
    renewed_subscriptions_revenue: Metric$inboundSchema,
    renewed_subscriptions_net_revenue: Metric$inboundSchema,
    active_subscriptions: Metric$inboundSchema,
    monthly_recurring_revenue: Metric$inboundSchema,
    committed_monthly_recurring_revenue: Metric$inboundSchema,
    checkouts: Metric$inboundSchema,
    succeeded_checkouts: Metric$inboundSchema,
    checkouts_conversion: Metric$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "net_revenue": "netRevenue",
        "cumulative_revenue": "cumulativeRevenue",
        "net_cumulative_revenue": "netCumulativeRevenue",
        "average_order_value": "averageOrderValue",
        "net_average_order_value": "netAverageOrderValue",
        "one_time_products": "oneTimeProducts",
        "one_time_products_revenue": "oneTimeProductsRevenue",
        "one_time_products_net_revenue": "oneTimeProductsNetRevenue",
        "new_subscriptions": "newSubscriptions",
        "new_subscriptions_revenue": "newSubscriptionsRevenue",
        "new_subscriptions_net_revenue": "newSubscriptionsNetRevenue",
        "renewed_subscriptions": "renewedSubscriptions",
        "renewed_subscriptions_revenue": "renewedSubscriptionsRevenue",
        "renewed_subscriptions_net_revenue": "renewedSubscriptionsNetRevenue",
        "active_subscriptions": "activeSubscriptions",
        "monthly_recurring_revenue": "monthlyRecurringRevenue",
        "committed_monthly_recurring_revenue": "committedMonthlyRecurringRevenue",
        "succeeded_checkouts": "succeededCheckouts",
        "checkouts_conversion": "checkoutsConversion",
    });
});
/** @internal */
export const Metrics$outboundSchema = z.object({
    orders: Metric$outboundSchema,
    revenue: Metric$outboundSchema,
    netRevenue: Metric$outboundSchema,
    cumulativeRevenue: Metric$outboundSchema,
    netCumulativeRevenue: Metric$outboundSchema,
    averageOrderValue: Metric$outboundSchema,
    netAverageOrderValue: Metric$outboundSchema,
    oneTimeProducts: Metric$outboundSchema,
    oneTimeProductsRevenue: Metric$outboundSchema,
    oneTimeProductsNetRevenue: Metric$outboundSchema,
    newSubscriptions: Metric$outboundSchema,
    newSubscriptionsRevenue: Metric$outboundSchema,
    newSubscriptionsNetRevenue: Metric$outboundSchema,
    renewedSubscriptions: Metric$outboundSchema,
    renewedSubscriptionsRevenue: Metric$outboundSchema,
    renewedSubscriptionsNetRevenue: Metric$outboundSchema,
    activeSubscriptions: Metric$outboundSchema,
    monthlyRecurringRevenue: Metric$outboundSchema,
    committedMonthlyRecurringRevenue: Metric$outboundSchema,
    checkouts: Metric$outboundSchema,
    succeededCheckouts: Metric$outboundSchema,
    checkoutsConversion: Metric$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        netRevenue: "net_revenue",
        cumulativeRevenue: "cumulative_revenue",
        netCumulativeRevenue: "net_cumulative_revenue",
        averageOrderValue: "average_order_value",
        netAverageOrderValue: "net_average_order_value",
        oneTimeProducts: "one_time_products",
        oneTimeProductsRevenue: "one_time_products_revenue",
        oneTimeProductsNetRevenue: "one_time_products_net_revenue",
        newSubscriptions: "new_subscriptions",
        newSubscriptionsRevenue: "new_subscriptions_revenue",
        newSubscriptionsNetRevenue: "new_subscriptions_net_revenue",
        renewedSubscriptions: "renewed_subscriptions",
        renewedSubscriptionsRevenue: "renewed_subscriptions_revenue",
        renewedSubscriptionsNetRevenue: "renewed_subscriptions_net_revenue",
        activeSubscriptions: "active_subscriptions",
        monthlyRecurringRevenue: "monthly_recurring_revenue",
        committedMonthlyRecurringRevenue: "committed_monthly_recurring_revenue",
        succeededCheckouts: "succeeded_checkouts",
        checkoutsConversion: "checkouts_conversion",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Metrics$;
(function (Metrics$) {
    /** @deprecated use `Metrics$inboundSchema` instead. */
    Metrics$.inboundSchema = Metrics$inboundSchema;
    /** @deprecated use `Metrics$outboundSchema` instead. */
    Metrics$.outboundSchema = Metrics$outboundSchema;
})(Metrics$ || (Metrics$ = {}));
export function metricsToJSON(metrics) {
    return JSON.stringify(Metrics$outboundSchema.parse(metrics));
}
export function metricsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Metrics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Metrics' from JSON`);
}
//# sourceMappingURL=metrics.js.map