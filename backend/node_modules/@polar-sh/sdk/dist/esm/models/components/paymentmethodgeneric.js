/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { PaymentProcessor$inboundSchema, PaymentProcessor$outboundSchema, } from "./paymentprocessor.js";
/** @internal */
export const PaymentMethodGeneric$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    processor: PaymentProcessor$inboundSchema,
    customer_id: z.string(),
    type: z.string(),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "customer_id": "customerId",
    });
});
/** @internal */
export const PaymentMethodGeneric$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    processor: PaymentProcessor$outboundSchema,
    customerId: z.string(),
    type: z.string(),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        customerId: "customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PaymentMethodGeneric$;
(function (PaymentMethodGeneric$) {
    /** @deprecated use `PaymentMethodGeneric$inboundSchema` instead. */
    PaymentMethodGeneric$.inboundSchema = PaymentMethodGeneric$inboundSchema;
    /** @deprecated use `PaymentMethodGeneric$outboundSchema` instead. */
    PaymentMethodGeneric$.outboundSchema = PaymentMethodGeneric$outboundSchema;
})(PaymentMethodGeneric$ || (PaymentMethodGeneric$ = {}));
export function paymentMethodGenericToJSON(paymentMethodGeneric) {
    return JSON.stringify(PaymentMethodGeneric$outboundSchema.parse(paymentMethodGeneric));
}
export function paymentMethodGenericFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PaymentMethodGeneric$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PaymentMethodGeneric' from JSON`);
}
//# sourceMappingURL=paymentmethodgeneric.js.map