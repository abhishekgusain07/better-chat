/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitGitHubRepositorySubscriberProperties$inboundSchema, BenefitGitHubRepositorySubscriberProperties$outboundSchema, } from "./benefitgithubrepositorysubscriberproperties.js";
import { Organization$inboundSchema, Organization$outboundSchema, } from "./organization.js";
/** @internal */
export const BenefitGitHubRepositorySubscriberMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const BenefitGitHubRepositorySubscriberMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGitHubRepositorySubscriberMetadata$;
(function (BenefitGitHubRepositorySubscriberMetadata$) {
    /** @deprecated use `BenefitGitHubRepositorySubscriberMetadata$inboundSchema` instead. */
    BenefitGitHubRepositorySubscriberMetadata$.inboundSchema = BenefitGitHubRepositorySubscriberMetadata$inboundSchema;
    /** @deprecated use `BenefitGitHubRepositorySubscriberMetadata$outboundSchema` instead. */
    BenefitGitHubRepositorySubscriberMetadata$.outboundSchema = BenefitGitHubRepositorySubscriberMetadata$outboundSchema;
})(BenefitGitHubRepositorySubscriberMetadata$ || (BenefitGitHubRepositorySubscriberMetadata$ = {}));
export function benefitGitHubRepositorySubscriberMetadataToJSON(benefitGitHubRepositorySubscriberMetadata) {
    return JSON.stringify(BenefitGitHubRepositorySubscriberMetadata$outboundSchema.parse(benefitGitHubRepositorySubscriberMetadata));
}
export function benefitGitHubRepositorySubscriberMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitGitHubRepositorySubscriberMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitGitHubRepositorySubscriberMetadata' from JSON`);
}
/** @internal */
export const BenefitGitHubRepositorySubscriber$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    type: z.literal("github_repository"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organization_id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    organization: Organization$inboundSchema,
    properties: BenefitGitHubRepositorySubscriberProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const BenefitGitHubRepositorySubscriber$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    type: z.literal("github_repository"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organizationId: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    organization: Organization$outboundSchema,
    properties: BenefitGitHubRepositorySubscriberProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGitHubRepositorySubscriber$;
(function (BenefitGitHubRepositorySubscriber$) {
    /** @deprecated use `BenefitGitHubRepositorySubscriber$inboundSchema` instead. */
    BenefitGitHubRepositorySubscriber$.inboundSchema = BenefitGitHubRepositorySubscriber$inboundSchema;
    /** @deprecated use `BenefitGitHubRepositorySubscriber$outboundSchema` instead. */
    BenefitGitHubRepositorySubscriber$.outboundSchema = BenefitGitHubRepositorySubscriber$outboundSchema;
})(BenefitGitHubRepositorySubscriber$ || (BenefitGitHubRepositorySubscriber$ = {}));
export function benefitGitHubRepositorySubscriberToJSON(benefitGitHubRepositorySubscriber) {
    return JSON.stringify(BenefitGitHubRepositorySubscriber$outboundSchema.parse(benefitGitHubRepositorySubscriber));
}
export function benefitGitHubRepositorySubscriberFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitGitHubRepositorySubscriber$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitGitHubRepositorySubscriber' from JSON`);
}
//# sourceMappingURL=benefitgithubrepositorysubscriber.js.map