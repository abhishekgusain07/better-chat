import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { WebhookEvent, WebhookEvent$Outbound } from "./webhookevent.js";
/**
 * A webhook delivery for a webhook event.
 */
export type WebhookDelivery = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * The HTTP code returned by the URL. `null` if the endpoint was unreachable.
     */
    httpCode?: number | null | undefined;
    /**
     * Whether the delivery was successful.
     */
    succeeded: boolean;
    /**
     * A webhook event.
     *
     * @remarks
     *
     * An event represent something that happened in the system
     * that should be sent to the webhook endpoint.
     *
     * It can be delivered multiple times until it's marked as succeeded,
     * each one creating a new delivery.
     */
    webhookEvent: WebhookEvent;
};
/** @internal */
export declare const WebhookDelivery$inboundSchema: z.ZodType<WebhookDelivery, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookDelivery$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    http_code?: number | null | undefined;
    succeeded: boolean;
    webhook_event: WebhookEvent$Outbound;
};
/** @internal */
export declare const WebhookDelivery$outboundSchema: z.ZodType<WebhookDelivery$Outbound, z.ZodTypeDef, WebhookDelivery>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookDelivery$ {
    /** @deprecated use `WebhookDelivery$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookDelivery, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookDelivery$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookDelivery$Outbound, z.ZodTypeDef, WebhookDelivery>;
    /** @deprecated use `WebhookDelivery$Outbound` instead. */
    type Outbound = WebhookDelivery$Outbound;
}
export declare function webhookDeliveryToJSON(webhookDelivery: WebhookDelivery): string;
export declare function webhookDeliveryFromJSON(jsonString: string): SafeParseResult<WebhookDelivery, SDKValidationError>;
//# sourceMappingURL=webhookdelivery.d.ts.map