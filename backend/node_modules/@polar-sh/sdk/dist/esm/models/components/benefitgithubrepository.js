/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { BenefitGitHubRepositoryProperties$inboundSchema, BenefitGitHubRepositoryProperties$outboundSchema, } from "./benefitgithubrepositoryproperties.js";
/** @internal */
export const BenefitGitHubRepositoryMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
export const BenefitGitHubRepositoryMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGitHubRepositoryMetadata$;
(function (BenefitGitHubRepositoryMetadata$) {
    /** @deprecated use `BenefitGitHubRepositoryMetadata$inboundSchema` instead. */
    BenefitGitHubRepositoryMetadata$.inboundSchema = BenefitGitHubRepositoryMetadata$inboundSchema;
    /** @deprecated use `BenefitGitHubRepositoryMetadata$outboundSchema` instead. */
    BenefitGitHubRepositoryMetadata$.outboundSchema = BenefitGitHubRepositoryMetadata$outboundSchema;
})(BenefitGitHubRepositoryMetadata$ || (BenefitGitHubRepositoryMetadata$ = {}));
export function benefitGitHubRepositoryMetadataToJSON(benefitGitHubRepositoryMetadata) {
    return JSON.stringify(BenefitGitHubRepositoryMetadata$outboundSchema.parse(benefitGitHubRepositoryMetadata));
}
export function benefitGitHubRepositoryMetadataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitGitHubRepositoryMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitGitHubRepositoryMetadata' from JSON`);
}
/** @internal */
export const BenefitGitHubRepository$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    type: z.literal("github_repository"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organization_id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    properties: BenefitGitHubRepositoryProperties$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
export const BenefitGitHubRepository$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    type: z.literal("github_repository"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organizationId: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    properties: BenefitGitHubRepositoryProperties$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var BenefitGitHubRepository$;
(function (BenefitGitHubRepository$) {
    /** @deprecated use `BenefitGitHubRepository$inboundSchema` instead. */
    BenefitGitHubRepository$.inboundSchema = BenefitGitHubRepository$inboundSchema;
    /** @deprecated use `BenefitGitHubRepository$outboundSchema` instead. */
    BenefitGitHubRepository$.outboundSchema = BenefitGitHubRepository$outboundSchema;
})(BenefitGitHubRepository$ || (BenefitGitHubRepository$ = {}));
export function benefitGitHubRepositoryToJSON(benefitGitHubRepository) {
    return JSON.stringify(BenefitGitHubRepository$outboundSchema.parse(benefitGitHubRepository));
}
export function benefitGitHubRepositoryFromJSON(jsonString) {
    return safeParse(jsonString, (x) => BenefitGitHubRepository$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitGitHubRepository' from JSON`);
}
//# sourceMappingURL=benefitgithubrepository.js.map