import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { WebhookEndpoint } from "../models/components/webhookendpoint.js";
import { WebhookEndpointCreate } from "../models/components/webhookendpointcreate.js";
import { WebhooksDeleteWebhookEndpointRequest } from "../models/operations/webhooksdeletewebhookendpoint.js";
import { WebhooksGetWebhookEndpointRequest } from "../models/operations/webhooksgetwebhookendpoint.js";
import { WebhooksListWebhookDeliveriesRequest, WebhooksListWebhookDeliveriesResponse } from "../models/operations/webhookslistwebhookdeliveries.js";
import { WebhooksListWebhookEndpointsRequest, WebhooksListWebhookEndpointsResponse } from "../models/operations/webhookslistwebhookendpoints.js";
import { WebhooksRedeliverWebhookEventRequest } from "../models/operations/webhooksredeliverwebhookevent.js";
import { WebhooksResetWebhookEndpointSecretRequest } from "../models/operations/webhooksresetwebhookendpointsecret.js";
import { WebhooksUpdateWebhookEndpointRequest } from "../models/operations/webhooksupdatewebhookendpoint.js";
import { PageIterator } from "../types/operations.js";
export declare class Webhooks extends ClientSDK {
    /**
     * List Webhook Endpoints
     *
     * @remarks
     * List webhook endpoints.
     *
     * **Scopes**: `webhooks:read` `webhooks:write`
     */
    listWebhookEndpoints(request: WebhooksListWebhookEndpointsRequest, options?: RequestOptions): Promise<PageIterator<WebhooksListWebhookEndpointsResponse, {
        page: number;
    }>>;
    /**
     * Create Webhook Endpoint
     *
     * @remarks
     * Create a webhook endpoint.
     *
     * **Scopes**: `webhooks:write`
     */
    createWebhookEndpoint(request: WebhookEndpointCreate, options?: RequestOptions): Promise<WebhookEndpoint>;
    /**
     * Get Webhook Endpoint
     *
     * @remarks
     * Get a webhook endpoint by ID.
     *
     * **Scopes**: `webhooks:read` `webhooks:write`
     */
    getWebhookEndpoint(request: WebhooksGetWebhookEndpointRequest, options?: RequestOptions): Promise<WebhookEndpoint>;
    /**
     * Update Webhook Endpoint
     *
     * @remarks
     * Update a webhook endpoint.
     *
     * **Scopes**: `webhooks:write`
     */
    updateWebhookEndpoint(request: WebhooksUpdateWebhookEndpointRequest, options?: RequestOptions): Promise<WebhookEndpoint>;
    /**
     * Delete Webhook Endpoint
     *
     * @remarks
     * Delete a webhook endpoint.
     *
     * **Scopes**: `webhooks:write`
     */
    deleteWebhookEndpoint(request: WebhooksDeleteWebhookEndpointRequest, options?: RequestOptions): Promise<void>;
    /**
     * Reset Webhook Endpoint Secret
     *
     * @remarks
     * Regenerate a webhook endpoint secret.
     *
     * **Scopes**: `webhooks:write`
     */
    resetWebhookEndpointSecret(request: WebhooksResetWebhookEndpointSecretRequest, options?: RequestOptions): Promise<WebhookEndpoint>;
    /**
     * List Webhook Deliveries
     *
     * @remarks
     * List webhook deliveries.
     *
     * Deliveries are all the attempts to deliver a webhook event to an endpoint.
     *
     * **Scopes**: `webhooks:read` `webhooks:write`
     */
    listWebhookDeliveries(request: WebhooksListWebhookDeliveriesRequest, options?: RequestOptions): Promise<PageIterator<WebhooksListWebhookDeliveriesResponse, {
        page: number;
    }>>;
    /**
     * Redeliver Webhook Event
     *
     * @remarks
     * Schedule the re-delivery of a webhook event.
     *
     * **Scopes**: `webhooks:write`
     */
    redeliverWebhookEvent(request: WebhooksRedeliverWebhookEventRequest, options?: RequestOptions): Promise<any>;
}
//# sourceMappingURL=webhooks.d.ts.map