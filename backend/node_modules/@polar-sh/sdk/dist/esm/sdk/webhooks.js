/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { webhooksCreateWebhookEndpoint } from "../funcs/webhooksCreateWebhookEndpoint.js";
import { webhooksDeleteWebhookEndpoint } from "../funcs/webhooksDeleteWebhookEndpoint.js";
import { webhooksGetWebhookEndpoint } from "../funcs/webhooksGetWebhookEndpoint.js";
import { webhooksListWebhookDeliveries } from "../funcs/webhooksListWebhookDeliveries.js";
import { webhooksListWebhookEndpoints } from "../funcs/webhooksListWebhookEndpoints.js";
import { webhooksRedeliverWebhookEvent } from "../funcs/webhooksRedeliverWebhookEvent.js";
import { webhooksResetWebhookEndpointSecret } from "../funcs/webhooksResetWebhookEndpointSecret.js";
import { webhooksUpdateWebhookEndpoint } from "../funcs/webhooksUpdateWebhookEndpoint.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { unwrapResultIterator } from "../types/operations.js";
export class Webhooks extends ClientSDK {
    /**
     * List Webhook Endpoints
     *
     * @remarks
     * List webhook endpoints.
     *
     * **Scopes**: `webhooks:read` `webhooks:write`
     */
    async listWebhookEndpoints(request, options) {
        return unwrapResultIterator(webhooksListWebhookEndpoints(this, request, options));
    }
    /**
     * Create Webhook Endpoint
     *
     * @remarks
     * Create a webhook endpoint.
     *
     * **Scopes**: `webhooks:write`
     */
    async createWebhookEndpoint(request, options) {
        return unwrapAsync(webhooksCreateWebhookEndpoint(this, request, options));
    }
    /**
     * Get Webhook Endpoint
     *
     * @remarks
     * Get a webhook endpoint by ID.
     *
     * **Scopes**: `webhooks:read` `webhooks:write`
     */
    async getWebhookEndpoint(request, options) {
        return unwrapAsync(webhooksGetWebhookEndpoint(this, request, options));
    }
    /**
     * Update Webhook Endpoint
     *
     * @remarks
     * Update a webhook endpoint.
     *
     * **Scopes**: `webhooks:write`
     */
    async updateWebhookEndpoint(request, options) {
        return unwrapAsync(webhooksUpdateWebhookEndpoint(this, request, options));
    }
    /**
     * Delete Webhook Endpoint
     *
     * @remarks
     * Delete a webhook endpoint.
     *
     * **Scopes**: `webhooks:write`
     */
    async deleteWebhookEndpoint(request, options) {
        return unwrapAsync(webhooksDeleteWebhookEndpoint(this, request, options));
    }
    /**
     * Reset Webhook Endpoint Secret
     *
     * @remarks
     * Regenerate a webhook endpoint secret.
     *
     * **Scopes**: `webhooks:write`
     */
    async resetWebhookEndpointSecret(request, options) {
        return unwrapAsync(webhooksResetWebhookEndpointSecret(this, request, options));
    }
    /**
     * List Webhook Deliveries
     *
     * @remarks
     * List webhook deliveries.
     *
     * Deliveries are all the attempts to deliver a webhook event to an endpoint.
     *
     * **Scopes**: `webhooks:read` `webhooks:write`
     */
    async listWebhookDeliveries(request, options) {
        return unwrapResultIterator(webhooksListWebhookDeliveries(this, request, options));
    }
    /**
     * Redeliver Webhook Event
     *
     * @remarks
     * Schedule the re-delivery of a webhook event.
     *
     * **Scopes**: `webhooks:write`
     */
    async redeliverWebhookEvent(request, options) {
        return unwrapAsync(webhooksRedeliverWebhookEvent(this, request, options));
    }
}
//# sourceMappingURL=webhooks.js.map