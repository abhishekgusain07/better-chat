import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { CustomerMeterSortProperty } from "../components/customermetersortproperty.js";
import { ListResourceCustomerMeter, ListResourceCustomerMeter$Outbound } from "../components/listresourcecustomermeter.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Filter by organization ID.
 */
export type CustomerMetersListQueryParamOrganizationIDFilter = string | Array<string>;
/**
 * Filter by customer ID.
 */
export type CustomerMetersListQueryParamCustomerIDFilter = string | Array<string>;
/**
 * Filter by external customer ID.
 */
export type CustomerMetersListQueryParamExternalCustomerIDFilter = string | Array<string>;
/**
 * Filter by meter ID.
 */
export type QueryParamMeterIDFilter = string | Array<string>;
export type CustomerMetersListRequest = {
    /**
     * Filter by organization ID.
     */
    organizationId?: string | Array<string> | null | undefined;
    /**
     * Filter by customer ID.
     */
    customerId?: string | Array<string> | null | undefined;
    /**
     * Filter by external customer ID.
     */
    externalCustomerId?: string | Array<string> | null | undefined;
    /**
     * Filter by meter ID.
     */
    meterId?: string | Array<string> | null | undefined;
    /**
     * Page number, defaults to 1.
     */
    page?: number | undefined;
    /**
     * Size of a page, defaults to 10. Maximum is 100.
     */
    limit?: number | undefined;
    /**
     * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
     */
    sorting?: Array<CustomerMeterSortProperty> | null | undefined;
};
export type CustomerMetersListResponse = {
    result: ListResourceCustomerMeter;
};
/** @internal */
export declare const CustomerMetersListQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<CustomerMetersListQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerMetersListQueryParamOrganizationIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const CustomerMetersListQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<CustomerMetersListQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, CustomerMetersListQueryParamOrganizationIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerMetersListQueryParamOrganizationIDFilter$ {
    /** @deprecated use `CustomerMetersListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerMetersListQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerMetersListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerMetersListQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, CustomerMetersListQueryParamOrganizationIDFilter>;
    /** @deprecated use `CustomerMetersListQueryParamOrganizationIDFilter$Outbound` instead. */
    type Outbound = CustomerMetersListQueryParamOrganizationIDFilter$Outbound;
}
export declare function customerMetersListQueryParamOrganizationIDFilterToJSON(customerMetersListQueryParamOrganizationIDFilter: CustomerMetersListQueryParamOrganizationIDFilter): string;
export declare function customerMetersListQueryParamOrganizationIDFilterFromJSON(jsonString: string): SafeParseResult<CustomerMetersListQueryParamOrganizationIDFilter, SDKValidationError>;
/** @internal */
export declare const CustomerMetersListQueryParamCustomerIDFilter$inboundSchema: z.ZodType<CustomerMetersListQueryParamCustomerIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerMetersListQueryParamCustomerIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const CustomerMetersListQueryParamCustomerIDFilter$outboundSchema: z.ZodType<CustomerMetersListQueryParamCustomerIDFilter$Outbound, z.ZodTypeDef, CustomerMetersListQueryParamCustomerIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerMetersListQueryParamCustomerIDFilter$ {
    /** @deprecated use `CustomerMetersListQueryParamCustomerIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerMetersListQueryParamCustomerIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerMetersListQueryParamCustomerIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerMetersListQueryParamCustomerIDFilter$Outbound, z.ZodTypeDef, CustomerMetersListQueryParamCustomerIDFilter>;
    /** @deprecated use `CustomerMetersListQueryParamCustomerIDFilter$Outbound` instead. */
    type Outbound = CustomerMetersListQueryParamCustomerIDFilter$Outbound;
}
export declare function customerMetersListQueryParamCustomerIDFilterToJSON(customerMetersListQueryParamCustomerIDFilter: CustomerMetersListQueryParamCustomerIDFilter): string;
export declare function customerMetersListQueryParamCustomerIDFilterFromJSON(jsonString: string): SafeParseResult<CustomerMetersListQueryParamCustomerIDFilter, SDKValidationError>;
/** @internal */
export declare const CustomerMetersListQueryParamExternalCustomerIDFilter$inboundSchema: z.ZodType<CustomerMetersListQueryParamExternalCustomerIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerMetersListQueryParamExternalCustomerIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const CustomerMetersListQueryParamExternalCustomerIDFilter$outboundSchema: z.ZodType<CustomerMetersListQueryParamExternalCustomerIDFilter$Outbound, z.ZodTypeDef, CustomerMetersListQueryParamExternalCustomerIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerMetersListQueryParamExternalCustomerIDFilter$ {
    /** @deprecated use `CustomerMetersListQueryParamExternalCustomerIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerMetersListQueryParamExternalCustomerIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerMetersListQueryParamExternalCustomerIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerMetersListQueryParamExternalCustomerIDFilter$Outbound, z.ZodTypeDef, CustomerMetersListQueryParamExternalCustomerIDFilter>;
    /** @deprecated use `CustomerMetersListQueryParamExternalCustomerIDFilter$Outbound` instead. */
    type Outbound = CustomerMetersListQueryParamExternalCustomerIDFilter$Outbound;
}
export declare function customerMetersListQueryParamExternalCustomerIDFilterToJSON(customerMetersListQueryParamExternalCustomerIDFilter: CustomerMetersListQueryParamExternalCustomerIDFilter): string;
export declare function customerMetersListQueryParamExternalCustomerIDFilterFromJSON(jsonString: string): SafeParseResult<CustomerMetersListQueryParamExternalCustomerIDFilter, SDKValidationError>;
/** @internal */
export declare const QueryParamMeterIDFilter$inboundSchema: z.ZodType<QueryParamMeterIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryParamMeterIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const QueryParamMeterIDFilter$outboundSchema: z.ZodType<QueryParamMeterIDFilter$Outbound, z.ZodTypeDef, QueryParamMeterIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamMeterIDFilter$ {
    /** @deprecated use `QueryParamMeterIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryParamMeterIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryParamMeterIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryParamMeterIDFilter$Outbound, z.ZodTypeDef, QueryParamMeterIDFilter>;
    /** @deprecated use `QueryParamMeterIDFilter$Outbound` instead. */
    type Outbound = QueryParamMeterIDFilter$Outbound;
}
export declare function queryParamMeterIDFilterToJSON(queryParamMeterIDFilter: QueryParamMeterIDFilter): string;
export declare function queryParamMeterIDFilterFromJSON(jsonString: string): SafeParseResult<QueryParamMeterIDFilter, SDKValidationError>;
/** @internal */
export declare const CustomerMetersListRequest$inboundSchema: z.ZodType<CustomerMetersListRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerMetersListRequest$Outbound = {
    organization_id?: string | Array<string> | null | undefined;
    customer_id?: string | Array<string> | null | undefined;
    external_customer_id?: string | Array<string> | null | undefined;
    meter_id?: string | Array<string> | null | undefined;
    page: number;
    limit: number;
    sorting?: Array<string> | null | undefined;
};
/** @internal */
export declare const CustomerMetersListRequest$outboundSchema: z.ZodType<CustomerMetersListRequest$Outbound, z.ZodTypeDef, CustomerMetersListRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerMetersListRequest$ {
    /** @deprecated use `CustomerMetersListRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerMetersListRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerMetersListRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerMetersListRequest$Outbound, z.ZodTypeDef, CustomerMetersListRequest>;
    /** @deprecated use `CustomerMetersListRequest$Outbound` instead. */
    type Outbound = CustomerMetersListRequest$Outbound;
}
export declare function customerMetersListRequestToJSON(customerMetersListRequest: CustomerMetersListRequest): string;
export declare function customerMetersListRequestFromJSON(jsonString: string): SafeParseResult<CustomerMetersListRequest, SDKValidationError>;
/** @internal */
export declare const CustomerMetersListResponse$inboundSchema: z.ZodType<CustomerMetersListResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerMetersListResponse$Outbound = {
    Result: ListResourceCustomerMeter$Outbound;
};
/** @internal */
export declare const CustomerMetersListResponse$outboundSchema: z.ZodType<CustomerMetersListResponse$Outbound, z.ZodTypeDef, CustomerMetersListResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerMetersListResponse$ {
    /** @deprecated use `CustomerMetersListResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerMetersListResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerMetersListResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerMetersListResponse$Outbound, z.ZodTypeDef, CustomerMetersListResponse>;
    /** @deprecated use `CustomerMetersListResponse$Outbound` instead. */
    type Outbound = CustomerMetersListResponse$Outbound;
}
export declare function customerMetersListResponseToJSON(customerMetersListResponse: CustomerMetersListResponse): string;
export declare function customerMetersListResponseFromJSON(jsonString: string): SafeParseResult<CustomerMetersListResponse, SDKValidationError>;
//# sourceMappingURL=customermeterslist.d.ts.map