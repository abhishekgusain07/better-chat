"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetersQuantitiesRequest$ = exports.MetersQuantitiesRequest$outboundSchema = exports.MetersQuantitiesRequest$inboundSchema = exports.MetersQuantitiesQueryParamExternalCustomerIDFilter$ = exports.MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema = exports.MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema = exports.MetersQuantitiesQueryParamCustomerIDFilter$ = exports.MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema = exports.MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema = void 0;
exports.metersQuantitiesQueryParamCustomerIDFilterToJSON = metersQuantitiesQueryParamCustomerIDFilterToJSON;
exports.metersQuantitiesQueryParamCustomerIDFilterFromJSON = metersQuantitiesQueryParamCustomerIDFilterFromJSON;
exports.metersQuantitiesQueryParamExternalCustomerIDFilterToJSON = metersQuantitiesQueryParamExternalCustomerIDFilterToJSON;
exports.metersQuantitiesQueryParamExternalCustomerIDFilterFromJSON = metersQuantitiesQueryParamExternalCustomerIDFilterFromJSON;
exports.metersQuantitiesRequestToJSON = metersQuantitiesRequestToJSON;
exports.metersQuantitiesRequestFromJSON = metersQuantitiesRequestFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const subscriptionslist_js_1 = require("../components/subscriptionslist.js");
const timeinterval_js_1 = require("../components/timeinterval.js");
/** @internal */
exports.MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetersQuantitiesQueryParamCustomerIDFilter$;
(function (MetersQuantitiesQueryParamCustomerIDFilter$) {
    /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema` instead. */
    MetersQuantitiesQueryParamCustomerIDFilter$.inboundSchema = exports.MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema;
    /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema` instead. */
    MetersQuantitiesQueryParamCustomerIDFilter$.outboundSchema = exports.MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema;
})(MetersQuantitiesQueryParamCustomerIDFilter$ || (exports.MetersQuantitiesQueryParamCustomerIDFilter$ = MetersQuantitiesQueryParamCustomerIDFilter$ = {}));
function metersQuantitiesQueryParamCustomerIDFilterToJSON(metersQuantitiesQueryParamCustomerIDFilter) {
    return JSON.stringify(exports.MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema.parse(metersQuantitiesQueryParamCustomerIDFilter));
}
function metersQuantitiesQueryParamCustomerIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersQuantitiesQueryParamCustomerIDFilter' from JSON`);
}
/** @internal */
exports.MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetersQuantitiesQueryParamExternalCustomerIDFilter$;
(function (MetersQuantitiesQueryParamExternalCustomerIDFilter$) {
    /** @deprecated use `MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema` instead. */
    MetersQuantitiesQueryParamExternalCustomerIDFilter$.inboundSchema = exports.MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema;
    /** @deprecated use `MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema` instead. */
    MetersQuantitiesQueryParamExternalCustomerIDFilter$.outboundSchema = exports.MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema;
})(MetersQuantitiesQueryParamExternalCustomerIDFilter$ || (exports.MetersQuantitiesQueryParamExternalCustomerIDFilter$ = MetersQuantitiesQueryParamExternalCustomerIDFilter$ = {}));
function metersQuantitiesQueryParamExternalCustomerIDFilterToJSON(metersQuantitiesQueryParamExternalCustomerIDFilter) {
    return JSON.stringify(exports.MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema.parse(metersQuantitiesQueryParamExternalCustomerIDFilter));
}
function metersQuantitiesQueryParamExternalCustomerIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersQuantitiesQueryParamExternalCustomerIDFilter' from JSON`);
}
/** @internal */
exports.MetersQuantitiesRequest$inboundSchema = z.object({
    id: z.string(),
    start_timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    end_timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    interval: timeinterval_js_1.TimeInterval$inboundSchema,
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    metadata: z.nullable(z.record(subscriptionslist_js_1.MetadataQuery$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "start_timestamp": "startTimestamp",
        "end_timestamp": "endTimestamp",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
    });
});
/** @internal */
exports.MetersQuantitiesRequest$outboundSchema = z.object({
    id: z.string(),
    startTimestamp: z.date().transform(v => v.toISOString()),
    endTimestamp: z.date().transform(v => v.toISOString()),
    interval: timeinterval_js_1.TimeInterval$outboundSchema,
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    metadata: z.nullable(z.record(subscriptionslist_js_1.MetadataQuery$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        startTimestamp: "start_timestamp",
        endTimestamp: "end_timestamp",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetersQuantitiesRequest$;
(function (MetersQuantitiesRequest$) {
    /** @deprecated use `MetersQuantitiesRequest$inboundSchema` instead. */
    MetersQuantitiesRequest$.inboundSchema = exports.MetersQuantitiesRequest$inboundSchema;
    /** @deprecated use `MetersQuantitiesRequest$outboundSchema` instead. */
    MetersQuantitiesRequest$.outboundSchema = exports.MetersQuantitiesRequest$outboundSchema;
})(MetersQuantitiesRequest$ || (exports.MetersQuantitiesRequest$ = MetersQuantitiesRequest$ = {}));
function metersQuantitiesRequestToJSON(metersQuantitiesRequest) {
    return JSON.stringify(exports.MetersQuantitiesRequest$outboundSchema.parse(metersQuantitiesRequest));
}
function metersQuantitiesRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetersQuantitiesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetersQuantitiesRequest' from JSON`);
}
//# sourceMappingURL=metersquantities.js.map