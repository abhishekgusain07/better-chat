import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { ListResourceFileRead, ListResourceFileRead$Outbound } from "../components/listresourcefileread.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Filter by organization ID.
 */
export type FilesListQueryParamOrganizationIDFilter = string | Array<string>;
/**
 * Filter by file ID.
 */
export type FileIDFilter = string | Array<string>;
export type FilesListRequest = {
    /**
     * Filter by organization ID.
     */
    organizationId?: string | Array<string> | null | undefined;
    /**
     * Filter by file ID.
     */
    ids?: string | Array<string> | null | undefined;
    /**
     * Page number, defaults to 1.
     */
    page?: number | undefined;
    /**
     * Size of a page, defaults to 10. Maximum is 100.
     */
    limit?: number | undefined;
};
export type FilesListResponse = {
    result: ListResourceFileRead;
};
/** @internal */
export declare const FilesListQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<FilesListQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type FilesListQueryParamOrganizationIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const FilesListQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<FilesListQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, FilesListQueryParamOrganizationIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FilesListQueryParamOrganizationIDFilter$ {
    /** @deprecated use `FilesListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FilesListQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `FilesListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FilesListQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, FilesListQueryParamOrganizationIDFilter>;
    /** @deprecated use `FilesListQueryParamOrganizationIDFilter$Outbound` instead. */
    type Outbound = FilesListQueryParamOrganizationIDFilter$Outbound;
}
export declare function filesListQueryParamOrganizationIDFilterToJSON(filesListQueryParamOrganizationIDFilter: FilesListQueryParamOrganizationIDFilter): string;
export declare function filesListQueryParamOrganizationIDFilterFromJSON(jsonString: string): SafeParseResult<FilesListQueryParamOrganizationIDFilter, SDKValidationError>;
/** @internal */
export declare const FileIDFilter$inboundSchema: z.ZodType<FileIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type FileIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const FileIDFilter$outboundSchema: z.ZodType<FileIDFilter$Outbound, z.ZodTypeDef, FileIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FileIDFilter$ {
    /** @deprecated use `FileIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FileIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `FileIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FileIDFilter$Outbound, z.ZodTypeDef, FileIDFilter>;
    /** @deprecated use `FileIDFilter$Outbound` instead. */
    type Outbound = FileIDFilter$Outbound;
}
export declare function fileIDFilterToJSON(fileIDFilter: FileIDFilter): string;
export declare function fileIDFilterFromJSON(jsonString: string): SafeParseResult<FileIDFilter, SDKValidationError>;
/** @internal */
export declare const FilesListRequest$inboundSchema: z.ZodType<FilesListRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type FilesListRequest$Outbound = {
    organization_id?: string | Array<string> | null | undefined;
    ids?: string | Array<string> | null | undefined;
    page: number;
    limit: number;
};
/** @internal */
export declare const FilesListRequest$outboundSchema: z.ZodType<FilesListRequest$Outbound, z.ZodTypeDef, FilesListRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FilesListRequest$ {
    /** @deprecated use `FilesListRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FilesListRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `FilesListRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FilesListRequest$Outbound, z.ZodTypeDef, FilesListRequest>;
    /** @deprecated use `FilesListRequest$Outbound` instead. */
    type Outbound = FilesListRequest$Outbound;
}
export declare function filesListRequestToJSON(filesListRequest: FilesListRequest): string;
export declare function filesListRequestFromJSON(jsonString: string): SafeParseResult<FilesListRequest, SDKValidationError>;
/** @internal */
export declare const FilesListResponse$inboundSchema: z.ZodType<FilesListResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type FilesListResponse$Outbound = {
    Result: ListResourceFileRead$Outbound;
};
/** @internal */
export declare const FilesListResponse$outboundSchema: z.ZodType<FilesListResponse$Outbound, z.ZodTypeDef, FilesListResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FilesListResponse$ {
    /** @deprecated use `FilesListResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FilesListResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `FilesListResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FilesListResponse$Outbound, z.ZodTypeDef, FilesListResponse>;
    /** @deprecated use `FilesListResponse$Outbound` instead. */
    type Outbound = FilesListResponse$Outbound;
}
export declare function filesListResponseToJSON(filesListResponse: FilesListResponse): string;
export declare function filesListResponseFromJSON(jsonString: string): SafeParseResult<FilesListResponse, SDKValidationError>;
//# sourceMappingURL=fileslist.d.ts.map