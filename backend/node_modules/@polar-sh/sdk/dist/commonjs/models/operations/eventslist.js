"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsListResponse$ = exports.EventsListResponse$outboundSchema = exports.EventsListResponse$inboundSchema = exports.EventsListRequest$ = exports.EventsListRequest$outboundSchema = exports.EventsListRequest$inboundSchema = exports.SourceFilter$ = exports.SourceFilter$outboundSchema = exports.SourceFilter$inboundSchema = exports.NameFilter$ = exports.NameFilter$outboundSchema = exports.NameFilter$inboundSchema = exports.QueryParamExternalCustomerIDFilter$ = exports.QueryParamExternalCustomerIDFilter$outboundSchema = exports.QueryParamExternalCustomerIDFilter$inboundSchema = exports.EventsListQueryParamCustomerIDFilter$ = exports.EventsListQueryParamCustomerIDFilter$outboundSchema = exports.EventsListQueryParamCustomerIDFilter$inboundSchema = exports.EventsListQueryParamOrganizationIDFilter$ = exports.EventsListQueryParamOrganizationIDFilter$outboundSchema = exports.EventsListQueryParamOrganizationIDFilter$inboundSchema = void 0;
exports.eventsListQueryParamOrganizationIDFilterToJSON = eventsListQueryParamOrganizationIDFilterToJSON;
exports.eventsListQueryParamOrganizationIDFilterFromJSON = eventsListQueryParamOrganizationIDFilterFromJSON;
exports.eventsListQueryParamCustomerIDFilterToJSON = eventsListQueryParamCustomerIDFilterToJSON;
exports.eventsListQueryParamCustomerIDFilterFromJSON = eventsListQueryParamCustomerIDFilterFromJSON;
exports.queryParamExternalCustomerIDFilterToJSON = queryParamExternalCustomerIDFilterToJSON;
exports.queryParamExternalCustomerIDFilterFromJSON = queryParamExternalCustomerIDFilterFromJSON;
exports.nameFilterToJSON = nameFilterToJSON;
exports.nameFilterFromJSON = nameFilterFromJSON;
exports.sourceFilterToJSON = sourceFilterToJSON;
exports.sourceFilterFromJSON = sourceFilterFromJSON;
exports.eventsListRequestToJSON = eventsListRequestToJSON;
exports.eventsListRequestFromJSON = eventsListRequestFromJSON;
exports.eventsListResponseToJSON = eventsListResponseToJSON;
exports.eventsListResponseFromJSON = eventsListResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const eventsortproperty_js_1 = require("../components/eventsortproperty.js");
const eventsource_js_1 = require("../components/eventsource.js");
const listresourceevent_js_1 = require("../components/listresourceevent.js");
const subscriptionslist_js_1 = require("../components/subscriptionslist.js");
/** @internal */
exports.EventsListQueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.EventsListQueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventsListQueryParamOrganizationIDFilter$;
(function (EventsListQueryParamOrganizationIDFilter$) {
    /** @deprecated use `EventsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
    EventsListQueryParamOrganizationIDFilter$.inboundSchema = exports.EventsListQueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `EventsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
    EventsListQueryParamOrganizationIDFilter$.outboundSchema = exports.EventsListQueryParamOrganizationIDFilter$outboundSchema;
})(EventsListQueryParamOrganizationIDFilter$ || (exports.EventsListQueryParamOrganizationIDFilter$ = EventsListQueryParamOrganizationIDFilter$ = {}));
function eventsListQueryParamOrganizationIDFilterToJSON(eventsListQueryParamOrganizationIDFilter) {
    return JSON.stringify(exports.EventsListQueryParamOrganizationIDFilter$outboundSchema.parse(eventsListQueryParamOrganizationIDFilter));
}
function eventsListQueryParamOrganizationIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventsListQueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListQueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
exports.EventsListQueryParamCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.EventsListQueryParamCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventsListQueryParamCustomerIDFilter$;
(function (EventsListQueryParamCustomerIDFilter$) {
    /** @deprecated use `EventsListQueryParamCustomerIDFilter$inboundSchema` instead. */
    EventsListQueryParamCustomerIDFilter$.inboundSchema = exports.EventsListQueryParamCustomerIDFilter$inboundSchema;
    /** @deprecated use `EventsListQueryParamCustomerIDFilter$outboundSchema` instead. */
    EventsListQueryParamCustomerIDFilter$.outboundSchema = exports.EventsListQueryParamCustomerIDFilter$outboundSchema;
})(EventsListQueryParamCustomerIDFilter$ || (exports.EventsListQueryParamCustomerIDFilter$ = EventsListQueryParamCustomerIDFilter$ = {}));
function eventsListQueryParamCustomerIDFilterToJSON(eventsListQueryParamCustomerIDFilter) {
    return JSON.stringify(exports.EventsListQueryParamCustomerIDFilter$outboundSchema.parse(eventsListQueryParamCustomerIDFilter));
}
function eventsListQueryParamCustomerIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventsListQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListQueryParamCustomerIDFilter' from JSON`);
}
/** @internal */
exports.QueryParamExternalCustomerIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.QueryParamExternalCustomerIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryParamExternalCustomerIDFilter$;
(function (QueryParamExternalCustomerIDFilter$) {
    /** @deprecated use `QueryParamExternalCustomerIDFilter$inboundSchema` instead. */
    QueryParamExternalCustomerIDFilter$.inboundSchema = exports.QueryParamExternalCustomerIDFilter$inboundSchema;
    /** @deprecated use `QueryParamExternalCustomerIDFilter$outboundSchema` instead. */
    QueryParamExternalCustomerIDFilter$.outboundSchema = exports.QueryParamExternalCustomerIDFilter$outboundSchema;
})(QueryParamExternalCustomerIDFilter$ || (exports.QueryParamExternalCustomerIDFilter$ = QueryParamExternalCustomerIDFilter$ = {}));
function queryParamExternalCustomerIDFilterToJSON(queryParamExternalCustomerIDFilter) {
    return JSON.stringify(exports.QueryParamExternalCustomerIDFilter$outboundSchema.parse(queryParamExternalCustomerIDFilter));
}
function queryParamExternalCustomerIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QueryParamExternalCustomerIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamExternalCustomerIDFilter' from JSON`);
}
/** @internal */
exports.NameFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.NameFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NameFilter$;
(function (NameFilter$) {
    /** @deprecated use `NameFilter$inboundSchema` instead. */
    NameFilter$.inboundSchema = exports.NameFilter$inboundSchema;
    /** @deprecated use `NameFilter$outboundSchema` instead. */
    NameFilter$.outboundSchema = exports.NameFilter$outboundSchema;
})(NameFilter$ || (exports.NameFilter$ = NameFilter$ = {}));
function nameFilterToJSON(nameFilter) {
    return JSON.stringify(exports.NameFilter$outboundSchema.parse(nameFilter));
}
function nameFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.NameFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NameFilter' from JSON`);
}
/** @internal */
exports.SourceFilter$inboundSchema = z.union([eventsource_js_1.EventSource$inboundSchema, z.array(eventsource_js_1.EventSource$inboundSchema)]);
/** @internal */
exports.SourceFilter$outboundSchema = z.union([eventsource_js_1.EventSource$outboundSchema, z.array(eventsource_js_1.EventSource$outboundSchema)]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SourceFilter$;
(function (SourceFilter$) {
    /** @deprecated use `SourceFilter$inboundSchema` instead. */
    SourceFilter$.inboundSchema = exports.SourceFilter$inboundSchema;
    /** @deprecated use `SourceFilter$outboundSchema` instead. */
    SourceFilter$.outboundSchema = exports.SourceFilter$outboundSchema;
})(SourceFilter$ || (exports.SourceFilter$ = SourceFilter$ = {}));
function sourceFilterToJSON(sourceFilter) {
    return JSON.stringify(exports.SourceFilter$outboundSchema.parse(sourceFilter));
}
function sourceFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SourceFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SourceFilter' from JSON`);
}
/** @internal */
exports.EventsListRequest$inboundSchema = z.object({
    filter: z.nullable(z.string()).optional(),
    start_timestamp: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    end_timestamp: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    meter_id: z.nullable(z.string()).optional(),
    name: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    source: z.nullable(z.union([eventsource_js_1.EventSource$inboundSchema, z.array(eventsource_js_1.EventSource$inboundSchema)])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(eventsortproperty_js_1.EventSortProperty$inboundSchema)).optional(),
    metadata: z.nullable(z.record(subscriptionslist_js_1.MetadataQuery$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "start_timestamp": "startTimestamp",
        "end_timestamp": "endTimestamp",
        "organization_id": "organizationId",
        "customer_id": "customerId",
        "external_customer_id": "externalCustomerId",
        "meter_id": "meterId",
    });
});
/** @internal */
exports.EventsListRequest$outboundSchema = z.object({
    filter: z.nullable(z.string()).optional(),
    startTimestamp: z.nullable(z.date().transform(v => v.toISOString()))
        .optional(),
    endTimestamp: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    meterId: z.nullable(z.string()).optional(),
    name: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    source: z.nullable(z.union([eventsource_js_1.EventSource$outboundSchema, z.array(eventsource_js_1.EventSource$outboundSchema)])).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(eventsortproperty_js_1.EventSortProperty$outboundSchema)).optional(),
    metadata: z.nullable(z.record(subscriptionslist_js_1.MetadataQuery$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        startTimestamp: "start_timestamp",
        endTimestamp: "end_timestamp",
        organizationId: "organization_id",
        customerId: "customer_id",
        externalCustomerId: "external_customer_id",
        meterId: "meter_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventsListRequest$;
(function (EventsListRequest$) {
    /** @deprecated use `EventsListRequest$inboundSchema` instead. */
    EventsListRequest$.inboundSchema = exports.EventsListRequest$inboundSchema;
    /** @deprecated use `EventsListRequest$outboundSchema` instead. */
    EventsListRequest$.outboundSchema = exports.EventsListRequest$outboundSchema;
})(EventsListRequest$ || (exports.EventsListRequest$ = EventsListRequest$ = {}));
function eventsListRequestToJSON(eventsListRequest) {
    return JSON.stringify(exports.EventsListRequest$outboundSchema.parse(eventsListRequest));
}
function eventsListRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListRequest' from JSON`);
}
/** @internal */
exports.EventsListResponse$inboundSchema = z.object({
    Result: listresourceevent_js_1.ListResourceEvent$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Result": "result",
    });
});
/** @internal */
exports.EventsListResponse$outboundSchema = z.object({
    result: listresourceevent_js_1.ListResourceEvent$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventsListResponse$;
(function (EventsListResponse$) {
    /** @deprecated use `EventsListResponse$inboundSchema` instead. */
    EventsListResponse$.inboundSchema = exports.EventsListResponse$inboundSchema;
    /** @deprecated use `EventsListResponse$outboundSchema` instead. */
    EventsListResponse$.outboundSchema = exports.EventsListResponse$outboundSchema;
})(EventsListResponse$ || (exports.EventsListResponse$ = EventsListResponse$ = {}));
function eventsListResponseToJSON(eventsListResponse) {
    return JSON.stringify(exports.EventsListResponse$outboundSchema.parse(eventsListResponse));
}
function eventsListResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsListResponse' from JSON`);
}
//# sourceMappingURL=eventslist.js.map