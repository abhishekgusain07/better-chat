"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerPortalCustomerMetersListResponse$ = exports.CustomerPortalCustomerMetersListResponse$outboundSchema = exports.CustomerPortalCustomerMetersListResponse$inboundSchema = exports.CustomerPortalCustomerMetersListRequest$ = exports.CustomerPortalCustomerMetersListRequest$outboundSchema = exports.CustomerPortalCustomerMetersListRequest$inboundSchema = exports.MeterIDFilter$ = exports.MeterIDFilter$outboundSchema = exports.MeterIDFilter$inboundSchema = exports.CustomerPortalCustomerMetersListSecurity$ = exports.CustomerPortalCustomerMetersListSecurity$outboundSchema = exports.CustomerPortalCustomerMetersListSecurity$inboundSchema = void 0;
exports.customerPortalCustomerMetersListSecurityToJSON = customerPortalCustomerMetersListSecurityToJSON;
exports.customerPortalCustomerMetersListSecurityFromJSON = customerPortalCustomerMetersListSecurityFromJSON;
exports.meterIDFilterToJSON = meterIDFilterToJSON;
exports.meterIDFilterFromJSON = meterIDFilterFromJSON;
exports.customerPortalCustomerMetersListRequestToJSON = customerPortalCustomerMetersListRequestToJSON;
exports.customerPortalCustomerMetersListRequestFromJSON = customerPortalCustomerMetersListRequestFromJSON;
exports.customerPortalCustomerMetersListResponseToJSON = customerPortalCustomerMetersListResponseToJSON;
exports.customerPortalCustomerMetersListResponseFromJSON = customerPortalCustomerMetersListResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customercustomermetersortproperty_js_1 = require("../components/customercustomermetersortproperty.js");
const listresourcecustomercustomermeter_js_1 = require("../components/listresourcecustomercustomermeter.js");
/** @internal */
exports.CustomerPortalCustomerMetersListSecurity$inboundSchema = z.object({
    customer_session: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "customer_session": "customerSession",
    });
});
/** @internal */
exports.CustomerPortalCustomerMetersListSecurity$outboundSchema = z.object({
    customerSession: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        customerSession: "customer_session",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerPortalCustomerMetersListSecurity$;
(function (CustomerPortalCustomerMetersListSecurity$) {
    /** @deprecated use `CustomerPortalCustomerMetersListSecurity$inboundSchema` instead. */
    CustomerPortalCustomerMetersListSecurity$.inboundSchema = exports.CustomerPortalCustomerMetersListSecurity$inboundSchema;
    /** @deprecated use `CustomerPortalCustomerMetersListSecurity$outboundSchema` instead. */
    CustomerPortalCustomerMetersListSecurity$.outboundSchema = exports.CustomerPortalCustomerMetersListSecurity$outboundSchema;
})(CustomerPortalCustomerMetersListSecurity$ || (exports.CustomerPortalCustomerMetersListSecurity$ = CustomerPortalCustomerMetersListSecurity$ = {}));
function customerPortalCustomerMetersListSecurityToJSON(customerPortalCustomerMetersListSecurity) {
    return JSON.stringify(exports.CustomerPortalCustomerMetersListSecurity$outboundSchema.parse(customerPortalCustomerMetersListSecurity));
}
function customerPortalCustomerMetersListSecurityFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerPortalCustomerMetersListSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalCustomerMetersListSecurity' from JSON`);
}
/** @internal */
exports.MeterIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.MeterIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MeterIDFilter$;
(function (MeterIDFilter$) {
    /** @deprecated use `MeterIDFilter$inboundSchema` instead. */
    MeterIDFilter$.inboundSchema = exports.MeterIDFilter$inboundSchema;
    /** @deprecated use `MeterIDFilter$outboundSchema` instead. */
    MeterIDFilter$.outboundSchema = exports.MeterIDFilter$outboundSchema;
})(MeterIDFilter$ || (exports.MeterIDFilter$ = MeterIDFilter$ = {}));
function meterIDFilterToJSON(meterIDFilter) {
    return JSON.stringify(exports.MeterIDFilter$outboundSchema.parse(meterIDFilter));
}
function meterIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MeterIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MeterIDFilter' from JSON`);
}
/** @internal */
exports.CustomerPortalCustomerMetersListRequest$inboundSchema = z.object({
    meter_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(customercustomermetersortproperty_js_1.CustomerCustomerMeterSortProperty$inboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "meter_id": "meterId",
    });
});
/** @internal */
exports.CustomerPortalCustomerMetersListRequest$outboundSchema = z.object({
    meterId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(customercustomermetersortproperty_js_1.CustomerCustomerMeterSortProperty$outboundSchema))
        .optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        meterId: "meter_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerPortalCustomerMetersListRequest$;
(function (CustomerPortalCustomerMetersListRequest$) {
    /** @deprecated use `CustomerPortalCustomerMetersListRequest$inboundSchema` instead. */
    CustomerPortalCustomerMetersListRequest$.inboundSchema = exports.CustomerPortalCustomerMetersListRequest$inboundSchema;
    /** @deprecated use `CustomerPortalCustomerMetersListRequest$outboundSchema` instead. */
    CustomerPortalCustomerMetersListRequest$.outboundSchema = exports.CustomerPortalCustomerMetersListRequest$outboundSchema;
})(CustomerPortalCustomerMetersListRequest$ || (exports.CustomerPortalCustomerMetersListRequest$ = CustomerPortalCustomerMetersListRequest$ = {}));
function customerPortalCustomerMetersListRequestToJSON(customerPortalCustomerMetersListRequest) {
    return JSON.stringify(exports.CustomerPortalCustomerMetersListRequest$outboundSchema.parse(customerPortalCustomerMetersListRequest));
}
function customerPortalCustomerMetersListRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerPortalCustomerMetersListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalCustomerMetersListRequest' from JSON`);
}
/** @internal */
exports.CustomerPortalCustomerMetersListResponse$inboundSchema = z.object({
    Result: listresourcecustomercustomermeter_js_1.ListResourceCustomerCustomerMeter$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Result": "result",
    });
});
/** @internal */
exports.CustomerPortalCustomerMetersListResponse$outboundSchema = z.object({
    result: listresourcecustomercustomermeter_js_1.ListResourceCustomerCustomerMeter$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerPortalCustomerMetersListResponse$;
(function (CustomerPortalCustomerMetersListResponse$) {
    /** @deprecated use `CustomerPortalCustomerMetersListResponse$inboundSchema` instead. */
    CustomerPortalCustomerMetersListResponse$.inboundSchema = exports.CustomerPortalCustomerMetersListResponse$inboundSchema;
    /** @deprecated use `CustomerPortalCustomerMetersListResponse$outboundSchema` instead. */
    CustomerPortalCustomerMetersListResponse$.outboundSchema = exports.CustomerPortalCustomerMetersListResponse$outboundSchema;
})(CustomerPortalCustomerMetersListResponse$ || (exports.CustomerPortalCustomerMetersListResponse$ = CustomerPortalCustomerMetersListResponse$ = {}));
function customerPortalCustomerMetersListResponseToJSON(customerPortalCustomerMetersListResponse) {
    return JSON.stringify(exports.CustomerPortalCustomerMetersListResponse$outboundSchema.parse(customerPortalCustomerMetersListResponse));
}
function customerPortalCustomerMetersListResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerPortalCustomerMetersListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerPortalCustomerMetersListResponse' from JSON`);
}
//# sourceMappingURL=customerportalcustomermeterslist.js.map