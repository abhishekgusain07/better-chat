"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BenefitsListResponse$ = exports.BenefitsListResponse$outboundSchema = exports.BenefitsListResponse$inboundSchema = exports.BenefitsListRequest$ = exports.BenefitsListRequest$outboundSchema = exports.BenefitsListRequest$inboundSchema = exports.BenefitTypeFilter$ = exports.BenefitTypeFilter$outboundSchema = exports.BenefitTypeFilter$inboundSchema = exports.QueryParamOrganizationIDFilter$ = exports.QueryParamOrganizationIDFilter$outboundSchema = exports.QueryParamOrganizationIDFilter$inboundSchema = void 0;
exports.queryParamOrganizationIDFilterToJSON = queryParamOrganizationIDFilterToJSON;
exports.queryParamOrganizationIDFilterFromJSON = queryParamOrganizationIDFilterFromJSON;
exports.benefitTypeFilterToJSON = benefitTypeFilterToJSON;
exports.benefitTypeFilterFromJSON = benefitTypeFilterFromJSON;
exports.benefitsListRequestToJSON = benefitsListRequestToJSON;
exports.benefitsListRequestFromJSON = benefitsListRequestFromJSON;
exports.benefitsListResponseToJSON = benefitsListResponseToJSON;
exports.benefitsListResponseFromJSON = benefitsListResponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const benefitsortproperty_js_1 = require("../components/benefitsortproperty.js");
const benefittype_js_1 = require("../components/benefittype.js");
const listresourcebenefit_js_1 = require("../components/listresourcebenefit.js");
const subscriptionslist_js_1 = require("../components/subscriptionslist.js");
/** @internal */
exports.QueryParamOrganizationIDFilter$inboundSchema = z.union([z.string(), z.array(z.string())]);
/** @internal */
exports.QueryParamOrganizationIDFilter$outboundSchema = z.union([z.string(), z.array(z.string())]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryParamOrganizationIDFilter$;
(function (QueryParamOrganizationIDFilter$) {
    /** @deprecated use `QueryParamOrganizationIDFilter$inboundSchema` instead. */
    QueryParamOrganizationIDFilter$.inboundSchema = exports.QueryParamOrganizationIDFilter$inboundSchema;
    /** @deprecated use `QueryParamOrganizationIDFilter$outboundSchema` instead. */
    QueryParamOrganizationIDFilter$.outboundSchema = exports.QueryParamOrganizationIDFilter$outboundSchema;
})(QueryParamOrganizationIDFilter$ || (exports.QueryParamOrganizationIDFilter$ = QueryParamOrganizationIDFilter$ = {}));
function queryParamOrganizationIDFilterToJSON(queryParamOrganizationIDFilter) {
    return JSON.stringify(exports.QueryParamOrganizationIDFilter$outboundSchema.parse(queryParamOrganizationIDFilter));
}
function queryParamOrganizationIDFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryParamOrganizationIDFilter' from JSON`);
}
/** @internal */
exports.BenefitTypeFilter$inboundSchema = z.union([benefittype_js_1.BenefitType$inboundSchema, z.array(benefittype_js_1.BenefitType$inboundSchema)]);
/** @internal */
exports.BenefitTypeFilter$outboundSchema = z.union([benefittype_js_1.BenefitType$outboundSchema, z.array(benefittype_js_1.BenefitType$outboundSchema)]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BenefitTypeFilter$;
(function (BenefitTypeFilter$) {
    /** @deprecated use `BenefitTypeFilter$inboundSchema` instead. */
    BenefitTypeFilter$.inboundSchema = exports.BenefitTypeFilter$inboundSchema;
    /** @deprecated use `BenefitTypeFilter$outboundSchema` instead. */
    BenefitTypeFilter$.outboundSchema = exports.BenefitTypeFilter$outboundSchema;
})(BenefitTypeFilter$ || (exports.BenefitTypeFilter$ = BenefitTypeFilter$ = {}));
function benefitTypeFilterToJSON(benefitTypeFilter) {
    return JSON.stringify(exports.BenefitTypeFilter$outboundSchema.parse(benefitTypeFilter));
}
function benefitTypeFilterFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BenefitTypeFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitTypeFilter' from JSON`);
}
/** @internal */
exports.BenefitsListRequest$inboundSchema = z.object({
    organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    type_filter: z.nullable(z.union([benefittype_js_1.BenefitType$inboundSchema, z.array(benefittype_js_1.BenefitType$inboundSchema)])).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(benefitsortproperty_js_1.BenefitSortProperty$inboundSchema)).optional(),
    metadata: z.nullable(z.record(subscriptionslist_js_1.MetadataQuery$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "organization_id": "organizationId",
        "type_filter": "typeFilter",
    });
});
/** @internal */
exports.BenefitsListRequest$outboundSchema = z.object({
    organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
        .optional(),
    typeFilter: z.nullable(z.union([benefittype_js_1.BenefitType$outboundSchema, z.array(benefittype_js_1.BenefitType$outboundSchema)])).optional(),
    query: z.nullable(z.string()).optional(),
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
    sorting: z.nullable(z.array(benefitsortproperty_js_1.BenefitSortProperty$outboundSchema)).optional(),
    metadata: z.nullable(z.record(subscriptionslist_js_1.MetadataQuery$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        organizationId: "organization_id",
        typeFilter: "type_filter",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BenefitsListRequest$;
(function (BenefitsListRequest$) {
    /** @deprecated use `BenefitsListRequest$inboundSchema` instead. */
    BenefitsListRequest$.inboundSchema = exports.BenefitsListRequest$inboundSchema;
    /** @deprecated use `BenefitsListRequest$outboundSchema` instead. */
    BenefitsListRequest$.outboundSchema = exports.BenefitsListRequest$outboundSchema;
})(BenefitsListRequest$ || (exports.BenefitsListRequest$ = BenefitsListRequest$ = {}));
function benefitsListRequestToJSON(benefitsListRequest) {
    return JSON.stringify(exports.BenefitsListRequest$outboundSchema.parse(benefitsListRequest));
}
function benefitsListRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BenefitsListRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitsListRequest' from JSON`);
}
/** @internal */
exports.BenefitsListResponse$inboundSchema = z.object({
    Result: listresourcebenefit_js_1.ListResourceBenefit$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "Result": "result",
    });
});
/** @internal */
exports.BenefitsListResponse$outboundSchema = z.object({
    result: listresourcebenefit_js_1.ListResourceBenefit$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        result: "Result",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BenefitsListResponse$;
(function (BenefitsListResponse$) {
    /** @deprecated use `BenefitsListResponse$inboundSchema` instead. */
    BenefitsListResponse$.inboundSchema = exports.BenefitsListResponse$inboundSchema;
    /** @deprecated use `BenefitsListResponse$outboundSchema` instead. */
    BenefitsListResponse$.outboundSchema = exports.BenefitsListResponse$outboundSchema;
})(BenefitsListResponse$ || (exports.BenefitsListResponse$ = BenefitsListResponse$ = {}));
function benefitsListResponseToJSON(benefitsListResponse) {
    return JSON.stringify(exports.BenefitsListResponse$outboundSchema.parse(benefitsListResponse));
}
function benefitsListResponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BenefitsListResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitsListResponse' from JSON`);
}
//# sourceMappingURL=benefitslist.js.map