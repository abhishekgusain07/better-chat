import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { EventNamesSortProperty } from "../components/eventnamessortproperty.js";
import { EventSource } from "../components/eventsource.js";
import { ListResourceEventName, ListResourceEventName$Outbound } from "../components/listresourceeventname.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Filter by organization ID.
 */
export type EventsListNamesQueryParamOrganizationIDFilter = string | Array<string>;
/**
 * Filter by customer ID.
 */
export type EventsListNamesQueryParamCustomerIDFilter = string | Array<string>;
/**
 * Filter by external customer ID.
 */
export type EventsListNamesQueryParamExternalCustomerIDFilter = string | Array<string>;
/**
 * Filter by event source.
 */
export type QueryParamSourceFilter = EventSource | Array<EventSource>;
export type EventsListNamesRequest = {
    /**
     * Filter by organization ID.
     */
    organizationId?: string | Array<string> | null | undefined;
    /**
     * Filter by customer ID.
     */
    customerId?: string | Array<string> | null | undefined;
    /**
     * Filter by external customer ID.
     */
    externalCustomerId?: string | Array<string> | null | undefined;
    /**
     * Filter by event source.
     */
    source?: EventSource | Array<EventSource> | null | undefined;
    /**
     * Query to filter event names.
     */
    query?: string | null | undefined;
    /**
     * Page number, defaults to 1.
     */
    page?: number | undefined;
    /**
     * Size of a page, defaults to 10. Maximum is 100.
     */
    limit?: number | undefined;
    /**
     * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
     */
    sorting?: Array<EventNamesSortProperty> | null | undefined;
};
export type EventsListNamesResponse = {
    result: ListResourceEventName;
};
/** @internal */
export declare const EventsListNamesQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<EventsListNamesQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsListNamesQueryParamOrganizationIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const EventsListNamesQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<EventsListNamesQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, EventsListNamesQueryParamOrganizationIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsListNamesQueryParamOrganizationIDFilter$ {
    /** @deprecated use `EventsListNamesQueryParamOrganizationIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsListNamesQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsListNamesQueryParamOrganizationIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsListNamesQueryParamOrganizationIDFilter$Outbound, z.ZodTypeDef, EventsListNamesQueryParamOrganizationIDFilter>;
    /** @deprecated use `EventsListNamesQueryParamOrganizationIDFilter$Outbound` instead. */
    type Outbound = EventsListNamesQueryParamOrganizationIDFilter$Outbound;
}
export declare function eventsListNamesQueryParamOrganizationIDFilterToJSON(eventsListNamesQueryParamOrganizationIDFilter: EventsListNamesQueryParamOrganizationIDFilter): string;
export declare function eventsListNamesQueryParamOrganizationIDFilterFromJSON(jsonString: string): SafeParseResult<EventsListNamesQueryParamOrganizationIDFilter, SDKValidationError>;
/** @internal */
export declare const EventsListNamesQueryParamCustomerIDFilter$inboundSchema: z.ZodType<EventsListNamesQueryParamCustomerIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsListNamesQueryParamCustomerIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const EventsListNamesQueryParamCustomerIDFilter$outboundSchema: z.ZodType<EventsListNamesQueryParamCustomerIDFilter$Outbound, z.ZodTypeDef, EventsListNamesQueryParamCustomerIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsListNamesQueryParamCustomerIDFilter$ {
    /** @deprecated use `EventsListNamesQueryParamCustomerIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsListNamesQueryParamCustomerIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsListNamesQueryParamCustomerIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsListNamesQueryParamCustomerIDFilter$Outbound, z.ZodTypeDef, EventsListNamesQueryParamCustomerIDFilter>;
    /** @deprecated use `EventsListNamesQueryParamCustomerIDFilter$Outbound` instead. */
    type Outbound = EventsListNamesQueryParamCustomerIDFilter$Outbound;
}
export declare function eventsListNamesQueryParamCustomerIDFilterToJSON(eventsListNamesQueryParamCustomerIDFilter: EventsListNamesQueryParamCustomerIDFilter): string;
export declare function eventsListNamesQueryParamCustomerIDFilterFromJSON(jsonString: string): SafeParseResult<EventsListNamesQueryParamCustomerIDFilter, SDKValidationError>;
/** @internal */
export declare const EventsListNamesQueryParamExternalCustomerIDFilter$inboundSchema: z.ZodType<EventsListNamesQueryParamExternalCustomerIDFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsListNamesQueryParamExternalCustomerIDFilter$Outbound = string | Array<string>;
/** @internal */
export declare const EventsListNamesQueryParamExternalCustomerIDFilter$outboundSchema: z.ZodType<EventsListNamesQueryParamExternalCustomerIDFilter$Outbound, z.ZodTypeDef, EventsListNamesQueryParamExternalCustomerIDFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsListNamesQueryParamExternalCustomerIDFilter$ {
    /** @deprecated use `EventsListNamesQueryParamExternalCustomerIDFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsListNamesQueryParamExternalCustomerIDFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsListNamesQueryParamExternalCustomerIDFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsListNamesQueryParamExternalCustomerIDFilter$Outbound, z.ZodTypeDef, EventsListNamesQueryParamExternalCustomerIDFilter>;
    /** @deprecated use `EventsListNamesQueryParamExternalCustomerIDFilter$Outbound` instead. */
    type Outbound = EventsListNamesQueryParamExternalCustomerIDFilter$Outbound;
}
export declare function eventsListNamesQueryParamExternalCustomerIDFilterToJSON(eventsListNamesQueryParamExternalCustomerIDFilter: EventsListNamesQueryParamExternalCustomerIDFilter): string;
export declare function eventsListNamesQueryParamExternalCustomerIDFilterFromJSON(jsonString: string): SafeParseResult<EventsListNamesQueryParamExternalCustomerIDFilter, SDKValidationError>;
/** @internal */
export declare const QueryParamSourceFilter$inboundSchema: z.ZodType<QueryParamSourceFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryParamSourceFilter$Outbound = string | Array<string>;
/** @internal */
export declare const QueryParamSourceFilter$outboundSchema: z.ZodType<QueryParamSourceFilter$Outbound, z.ZodTypeDef, QueryParamSourceFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamSourceFilter$ {
    /** @deprecated use `QueryParamSourceFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryParamSourceFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryParamSourceFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryParamSourceFilter$Outbound, z.ZodTypeDef, QueryParamSourceFilter>;
    /** @deprecated use `QueryParamSourceFilter$Outbound` instead. */
    type Outbound = QueryParamSourceFilter$Outbound;
}
export declare function queryParamSourceFilterToJSON(queryParamSourceFilter: QueryParamSourceFilter): string;
export declare function queryParamSourceFilterFromJSON(jsonString: string): SafeParseResult<QueryParamSourceFilter, SDKValidationError>;
/** @internal */
export declare const EventsListNamesRequest$inboundSchema: z.ZodType<EventsListNamesRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsListNamesRequest$Outbound = {
    organization_id?: string | Array<string> | null | undefined;
    customer_id?: string | Array<string> | null | undefined;
    external_customer_id?: string | Array<string> | null | undefined;
    source?: string | Array<string> | null | undefined;
    query?: string | null | undefined;
    page: number;
    limit: number;
    sorting?: Array<string> | null | undefined;
};
/** @internal */
export declare const EventsListNamesRequest$outboundSchema: z.ZodType<EventsListNamesRequest$Outbound, z.ZodTypeDef, EventsListNamesRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsListNamesRequest$ {
    /** @deprecated use `EventsListNamesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsListNamesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsListNamesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsListNamesRequest$Outbound, z.ZodTypeDef, EventsListNamesRequest>;
    /** @deprecated use `EventsListNamesRequest$Outbound` instead. */
    type Outbound = EventsListNamesRequest$Outbound;
}
export declare function eventsListNamesRequestToJSON(eventsListNamesRequest: EventsListNamesRequest): string;
export declare function eventsListNamesRequestFromJSON(jsonString: string): SafeParseResult<EventsListNamesRequest, SDKValidationError>;
/** @internal */
export declare const EventsListNamesResponse$inboundSchema: z.ZodType<EventsListNamesResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsListNamesResponse$Outbound = {
    Result: ListResourceEventName$Outbound;
};
/** @internal */
export declare const EventsListNamesResponse$outboundSchema: z.ZodType<EventsListNamesResponse$Outbound, z.ZodTypeDef, EventsListNamesResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsListNamesResponse$ {
    /** @deprecated use `EventsListNamesResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsListNamesResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsListNamesResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsListNamesResponse$Outbound, z.ZodTypeDef, EventsListNamesResponse>;
    /** @deprecated use `EventsListNamesResponse$Outbound` instead. */
    type Outbound = EventsListNamesResponse$Outbound;
}
export declare function eventsListNamesResponseToJSON(eventsListNamesResponse: EventsListNamesResponse): string;
export declare function eventsListNamesResponseFromJSON(jsonString: string): SafeParseResult<EventsListNamesResponse, SDKValidationError>;
//# sourceMappingURL=eventslistnames.d.ts.map