"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActiveSubscriptions$outboundSchema = exports.ActiveSubscriptions$inboundSchema = exports.RenewedSubscriptionsNetRevenue$ = exports.RenewedSubscriptionsNetRevenue$outboundSchema = exports.RenewedSubscriptionsNetRevenue$inboundSchema = exports.RenewedSubscriptionsRevenue$ = exports.RenewedSubscriptionsRevenue$outboundSchema = exports.RenewedSubscriptionsRevenue$inboundSchema = exports.RenewedSubscriptions$ = exports.RenewedSubscriptions$outboundSchema = exports.RenewedSubscriptions$inboundSchema = exports.NewSubscriptionsNetRevenue$ = exports.NewSubscriptionsNetRevenue$outboundSchema = exports.NewSubscriptionsNetRevenue$inboundSchema = exports.NewSubscriptionsRevenue$ = exports.NewSubscriptionsRevenue$outboundSchema = exports.NewSubscriptionsRevenue$inboundSchema = exports.NewSubscriptions$ = exports.NewSubscriptions$outboundSchema = exports.NewSubscriptions$inboundSchema = exports.OneTimeProductsNetRevenue$ = exports.OneTimeProductsNetRevenue$outboundSchema = exports.OneTimeProductsNetRevenue$inboundSchema = exports.OneTimeProductsRevenue$ = exports.OneTimeProductsRevenue$outboundSchema = exports.OneTimeProductsRevenue$inboundSchema = exports.OneTimeProducts$ = exports.OneTimeProducts$outboundSchema = exports.OneTimeProducts$inboundSchema = exports.NetAverageOrderValue$ = exports.NetAverageOrderValue$outboundSchema = exports.NetAverageOrderValue$inboundSchema = exports.AverageOrderValue$ = exports.AverageOrderValue$outboundSchema = exports.AverageOrderValue$inboundSchema = exports.NetCumulativeRevenue$ = exports.NetCumulativeRevenue$outboundSchema = exports.NetCumulativeRevenue$inboundSchema = exports.CumulativeRevenue$ = exports.CumulativeRevenue$outboundSchema = exports.CumulativeRevenue$inboundSchema = exports.NetRevenue$ = exports.NetRevenue$outboundSchema = exports.NetRevenue$inboundSchema = exports.Revenue$ = exports.Revenue$outboundSchema = exports.Revenue$inboundSchema = exports.Orders$ = exports.Orders$outboundSchema = exports.Orders$inboundSchema = void 0;
exports.MetricPeriod$ = exports.MetricPeriod$outboundSchema = exports.MetricPeriod$inboundSchema = exports.CheckoutsConversion$ = exports.CheckoutsConversion$outboundSchema = exports.CheckoutsConversion$inboundSchema = exports.SucceededCheckouts$ = exports.SucceededCheckouts$outboundSchema = exports.SucceededCheckouts$inboundSchema = exports.Checkouts$ = exports.Checkouts$outboundSchema = exports.Checkouts$inboundSchema = exports.CommittedMonthlyRecurringRevenue$ = exports.CommittedMonthlyRecurringRevenue$outboundSchema = exports.CommittedMonthlyRecurringRevenue$inboundSchema = exports.MonthlyRecurringRevenue$ = exports.MonthlyRecurringRevenue$outboundSchema = exports.MonthlyRecurringRevenue$inboundSchema = exports.ActiveSubscriptions$ = void 0;
exports.ordersToJSON = ordersToJSON;
exports.ordersFromJSON = ordersFromJSON;
exports.revenueToJSON = revenueToJSON;
exports.revenueFromJSON = revenueFromJSON;
exports.netRevenueToJSON = netRevenueToJSON;
exports.netRevenueFromJSON = netRevenueFromJSON;
exports.cumulativeRevenueToJSON = cumulativeRevenueToJSON;
exports.cumulativeRevenueFromJSON = cumulativeRevenueFromJSON;
exports.netCumulativeRevenueToJSON = netCumulativeRevenueToJSON;
exports.netCumulativeRevenueFromJSON = netCumulativeRevenueFromJSON;
exports.averageOrderValueToJSON = averageOrderValueToJSON;
exports.averageOrderValueFromJSON = averageOrderValueFromJSON;
exports.netAverageOrderValueToJSON = netAverageOrderValueToJSON;
exports.netAverageOrderValueFromJSON = netAverageOrderValueFromJSON;
exports.oneTimeProductsToJSON = oneTimeProductsToJSON;
exports.oneTimeProductsFromJSON = oneTimeProductsFromJSON;
exports.oneTimeProductsRevenueToJSON = oneTimeProductsRevenueToJSON;
exports.oneTimeProductsRevenueFromJSON = oneTimeProductsRevenueFromJSON;
exports.oneTimeProductsNetRevenueToJSON = oneTimeProductsNetRevenueToJSON;
exports.oneTimeProductsNetRevenueFromJSON = oneTimeProductsNetRevenueFromJSON;
exports.newSubscriptionsToJSON = newSubscriptionsToJSON;
exports.newSubscriptionsFromJSON = newSubscriptionsFromJSON;
exports.newSubscriptionsRevenueToJSON = newSubscriptionsRevenueToJSON;
exports.newSubscriptionsRevenueFromJSON = newSubscriptionsRevenueFromJSON;
exports.newSubscriptionsNetRevenueToJSON = newSubscriptionsNetRevenueToJSON;
exports.newSubscriptionsNetRevenueFromJSON = newSubscriptionsNetRevenueFromJSON;
exports.renewedSubscriptionsToJSON = renewedSubscriptionsToJSON;
exports.renewedSubscriptionsFromJSON = renewedSubscriptionsFromJSON;
exports.renewedSubscriptionsRevenueToJSON = renewedSubscriptionsRevenueToJSON;
exports.renewedSubscriptionsRevenueFromJSON = renewedSubscriptionsRevenueFromJSON;
exports.renewedSubscriptionsNetRevenueToJSON = renewedSubscriptionsNetRevenueToJSON;
exports.renewedSubscriptionsNetRevenueFromJSON = renewedSubscriptionsNetRevenueFromJSON;
exports.activeSubscriptionsToJSON = activeSubscriptionsToJSON;
exports.activeSubscriptionsFromJSON = activeSubscriptionsFromJSON;
exports.monthlyRecurringRevenueToJSON = monthlyRecurringRevenueToJSON;
exports.monthlyRecurringRevenueFromJSON = monthlyRecurringRevenueFromJSON;
exports.committedMonthlyRecurringRevenueToJSON = committedMonthlyRecurringRevenueToJSON;
exports.committedMonthlyRecurringRevenueFromJSON = committedMonthlyRecurringRevenueFromJSON;
exports.checkoutsToJSON = checkoutsToJSON;
exports.checkoutsFromJSON = checkoutsFromJSON;
exports.succeededCheckoutsToJSON = succeededCheckoutsToJSON;
exports.succeededCheckoutsFromJSON = succeededCheckoutsFromJSON;
exports.checkoutsConversionToJSON = checkoutsConversionToJSON;
exports.checkoutsConversionFromJSON = checkoutsConversionFromJSON;
exports.metricPeriodToJSON = metricPeriodToJSON;
exports.metricPeriodFromJSON = metricPeriodFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.Orders$inboundSchema = z
    .union([z.number().int(), z.number()]);
/** @internal */
exports.Orders$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Orders$;
(function (Orders$) {
    /** @deprecated use `Orders$inboundSchema` instead. */
    Orders$.inboundSchema = exports.Orders$inboundSchema;
    /** @deprecated use `Orders$outboundSchema` instead. */
    Orders$.outboundSchema = exports.Orders$outboundSchema;
})(Orders$ || (exports.Orders$ = Orders$ = {}));
function ordersToJSON(orders) {
    return JSON.stringify(exports.Orders$outboundSchema.parse(orders));
}
function ordersFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Orders$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Orders' from JSON`);
}
/** @internal */
exports.Revenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.Revenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Revenue$;
(function (Revenue$) {
    /** @deprecated use `Revenue$inboundSchema` instead. */
    Revenue$.inboundSchema = exports.Revenue$inboundSchema;
    /** @deprecated use `Revenue$outboundSchema` instead. */
    Revenue$.outboundSchema = exports.Revenue$outboundSchema;
})(Revenue$ || (exports.Revenue$ = Revenue$ = {}));
function revenueToJSON(revenue) {
    return JSON.stringify(exports.Revenue$outboundSchema.parse(revenue));
}
function revenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Revenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Revenue' from JSON`);
}
/** @internal */
exports.NetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.NetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NetRevenue$;
(function (NetRevenue$) {
    /** @deprecated use `NetRevenue$inboundSchema` instead. */
    NetRevenue$.inboundSchema = exports.NetRevenue$inboundSchema;
    /** @deprecated use `NetRevenue$outboundSchema` instead. */
    NetRevenue$.outboundSchema = exports.NetRevenue$outboundSchema;
})(NetRevenue$ || (exports.NetRevenue$ = NetRevenue$ = {}));
function netRevenueToJSON(netRevenue) {
    return JSON.stringify(exports.NetRevenue$outboundSchema.parse(netRevenue));
}
function netRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.NetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NetRevenue' from JSON`);
}
/** @internal */
exports.CumulativeRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.CumulativeRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CumulativeRevenue$;
(function (CumulativeRevenue$) {
    /** @deprecated use `CumulativeRevenue$inboundSchema` instead. */
    CumulativeRevenue$.inboundSchema = exports.CumulativeRevenue$inboundSchema;
    /** @deprecated use `CumulativeRevenue$outboundSchema` instead. */
    CumulativeRevenue$.outboundSchema = exports.CumulativeRevenue$outboundSchema;
})(CumulativeRevenue$ || (exports.CumulativeRevenue$ = CumulativeRevenue$ = {}));
function cumulativeRevenueToJSON(cumulativeRevenue) {
    return JSON.stringify(exports.CumulativeRevenue$outboundSchema.parse(cumulativeRevenue));
}
function cumulativeRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CumulativeRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CumulativeRevenue' from JSON`);
}
/** @internal */
exports.NetCumulativeRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.NetCumulativeRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NetCumulativeRevenue$;
(function (NetCumulativeRevenue$) {
    /** @deprecated use `NetCumulativeRevenue$inboundSchema` instead. */
    NetCumulativeRevenue$.inboundSchema = exports.NetCumulativeRevenue$inboundSchema;
    /** @deprecated use `NetCumulativeRevenue$outboundSchema` instead. */
    NetCumulativeRevenue$.outboundSchema = exports.NetCumulativeRevenue$outboundSchema;
})(NetCumulativeRevenue$ || (exports.NetCumulativeRevenue$ = NetCumulativeRevenue$ = {}));
function netCumulativeRevenueToJSON(netCumulativeRevenue) {
    return JSON.stringify(exports.NetCumulativeRevenue$outboundSchema.parse(netCumulativeRevenue));
}
function netCumulativeRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.NetCumulativeRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NetCumulativeRevenue' from JSON`);
}
/** @internal */
exports.AverageOrderValue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.AverageOrderValue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AverageOrderValue$;
(function (AverageOrderValue$) {
    /** @deprecated use `AverageOrderValue$inboundSchema` instead. */
    AverageOrderValue$.inboundSchema = exports.AverageOrderValue$inboundSchema;
    /** @deprecated use `AverageOrderValue$outboundSchema` instead. */
    AverageOrderValue$.outboundSchema = exports.AverageOrderValue$outboundSchema;
})(AverageOrderValue$ || (exports.AverageOrderValue$ = AverageOrderValue$ = {}));
function averageOrderValueToJSON(averageOrderValue) {
    return JSON.stringify(exports.AverageOrderValue$outboundSchema.parse(averageOrderValue));
}
function averageOrderValueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AverageOrderValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AverageOrderValue' from JSON`);
}
/** @internal */
exports.NetAverageOrderValue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.NetAverageOrderValue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NetAverageOrderValue$;
(function (NetAverageOrderValue$) {
    /** @deprecated use `NetAverageOrderValue$inboundSchema` instead. */
    NetAverageOrderValue$.inboundSchema = exports.NetAverageOrderValue$inboundSchema;
    /** @deprecated use `NetAverageOrderValue$outboundSchema` instead. */
    NetAverageOrderValue$.outboundSchema = exports.NetAverageOrderValue$outboundSchema;
})(NetAverageOrderValue$ || (exports.NetAverageOrderValue$ = NetAverageOrderValue$ = {}));
function netAverageOrderValueToJSON(netAverageOrderValue) {
    return JSON.stringify(exports.NetAverageOrderValue$outboundSchema.parse(netAverageOrderValue));
}
function netAverageOrderValueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.NetAverageOrderValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NetAverageOrderValue' from JSON`);
}
/** @internal */
exports.OneTimeProducts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.OneTimeProducts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OneTimeProducts$;
(function (OneTimeProducts$) {
    /** @deprecated use `OneTimeProducts$inboundSchema` instead. */
    OneTimeProducts$.inboundSchema = exports.OneTimeProducts$inboundSchema;
    /** @deprecated use `OneTimeProducts$outboundSchema` instead. */
    OneTimeProducts$.outboundSchema = exports.OneTimeProducts$outboundSchema;
})(OneTimeProducts$ || (exports.OneTimeProducts$ = OneTimeProducts$ = {}));
function oneTimeProductsToJSON(oneTimeProducts) {
    return JSON.stringify(exports.OneTimeProducts$outboundSchema.parse(oneTimeProducts));
}
function oneTimeProductsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OneTimeProducts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneTimeProducts' from JSON`);
}
/** @internal */
exports.OneTimeProductsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.OneTimeProductsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OneTimeProductsRevenue$;
(function (OneTimeProductsRevenue$) {
    /** @deprecated use `OneTimeProductsRevenue$inboundSchema` instead. */
    OneTimeProductsRevenue$.inboundSchema = exports.OneTimeProductsRevenue$inboundSchema;
    /** @deprecated use `OneTimeProductsRevenue$outboundSchema` instead. */
    OneTimeProductsRevenue$.outboundSchema = exports.OneTimeProductsRevenue$outboundSchema;
})(OneTimeProductsRevenue$ || (exports.OneTimeProductsRevenue$ = OneTimeProductsRevenue$ = {}));
function oneTimeProductsRevenueToJSON(oneTimeProductsRevenue) {
    return JSON.stringify(exports.OneTimeProductsRevenue$outboundSchema.parse(oneTimeProductsRevenue));
}
function oneTimeProductsRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OneTimeProductsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneTimeProductsRevenue' from JSON`);
}
/** @internal */
exports.OneTimeProductsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.OneTimeProductsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OneTimeProductsNetRevenue$;
(function (OneTimeProductsNetRevenue$) {
    /** @deprecated use `OneTimeProductsNetRevenue$inboundSchema` instead. */
    OneTimeProductsNetRevenue$.inboundSchema = exports.OneTimeProductsNetRevenue$inboundSchema;
    /** @deprecated use `OneTimeProductsNetRevenue$outboundSchema` instead. */
    OneTimeProductsNetRevenue$.outboundSchema = exports.OneTimeProductsNetRevenue$outboundSchema;
})(OneTimeProductsNetRevenue$ || (exports.OneTimeProductsNetRevenue$ = OneTimeProductsNetRevenue$ = {}));
function oneTimeProductsNetRevenueToJSON(oneTimeProductsNetRevenue) {
    return JSON.stringify(exports.OneTimeProductsNetRevenue$outboundSchema.parse(oneTimeProductsNetRevenue));
}
function oneTimeProductsNetRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OneTimeProductsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OneTimeProductsNetRevenue' from JSON`);
}
/** @internal */
exports.NewSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.NewSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NewSubscriptions$;
(function (NewSubscriptions$) {
    /** @deprecated use `NewSubscriptions$inboundSchema` instead. */
    NewSubscriptions$.inboundSchema = exports.NewSubscriptions$inboundSchema;
    /** @deprecated use `NewSubscriptions$outboundSchema` instead. */
    NewSubscriptions$.outboundSchema = exports.NewSubscriptions$outboundSchema;
})(NewSubscriptions$ || (exports.NewSubscriptions$ = NewSubscriptions$ = {}));
function newSubscriptionsToJSON(newSubscriptions) {
    return JSON.stringify(exports.NewSubscriptions$outboundSchema.parse(newSubscriptions));
}
function newSubscriptionsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.NewSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewSubscriptions' from JSON`);
}
/** @internal */
exports.NewSubscriptionsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.NewSubscriptionsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NewSubscriptionsRevenue$;
(function (NewSubscriptionsRevenue$) {
    /** @deprecated use `NewSubscriptionsRevenue$inboundSchema` instead. */
    NewSubscriptionsRevenue$.inboundSchema = exports.NewSubscriptionsRevenue$inboundSchema;
    /** @deprecated use `NewSubscriptionsRevenue$outboundSchema` instead. */
    NewSubscriptionsRevenue$.outboundSchema = exports.NewSubscriptionsRevenue$outboundSchema;
})(NewSubscriptionsRevenue$ || (exports.NewSubscriptionsRevenue$ = NewSubscriptionsRevenue$ = {}));
function newSubscriptionsRevenueToJSON(newSubscriptionsRevenue) {
    return JSON.stringify(exports.NewSubscriptionsRevenue$outboundSchema.parse(newSubscriptionsRevenue));
}
function newSubscriptionsRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.NewSubscriptionsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewSubscriptionsRevenue' from JSON`);
}
/** @internal */
exports.NewSubscriptionsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.NewSubscriptionsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var NewSubscriptionsNetRevenue$;
(function (NewSubscriptionsNetRevenue$) {
    /** @deprecated use `NewSubscriptionsNetRevenue$inboundSchema` instead. */
    NewSubscriptionsNetRevenue$.inboundSchema = exports.NewSubscriptionsNetRevenue$inboundSchema;
    /** @deprecated use `NewSubscriptionsNetRevenue$outboundSchema` instead. */
    NewSubscriptionsNetRevenue$.outboundSchema = exports.NewSubscriptionsNetRevenue$outboundSchema;
})(NewSubscriptionsNetRevenue$ || (exports.NewSubscriptionsNetRevenue$ = NewSubscriptionsNetRevenue$ = {}));
function newSubscriptionsNetRevenueToJSON(newSubscriptionsNetRevenue) {
    return JSON.stringify(exports.NewSubscriptionsNetRevenue$outboundSchema.parse(newSubscriptionsNetRevenue));
}
function newSubscriptionsNetRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.NewSubscriptionsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NewSubscriptionsNetRevenue' from JSON`);
}
/** @internal */
exports.RenewedSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.RenewedSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RenewedSubscriptions$;
(function (RenewedSubscriptions$) {
    /** @deprecated use `RenewedSubscriptions$inboundSchema` instead. */
    RenewedSubscriptions$.inboundSchema = exports.RenewedSubscriptions$inboundSchema;
    /** @deprecated use `RenewedSubscriptions$outboundSchema` instead. */
    RenewedSubscriptions$.outboundSchema = exports.RenewedSubscriptions$outboundSchema;
})(RenewedSubscriptions$ || (exports.RenewedSubscriptions$ = RenewedSubscriptions$ = {}));
function renewedSubscriptionsToJSON(renewedSubscriptions) {
    return JSON.stringify(exports.RenewedSubscriptions$outboundSchema.parse(renewedSubscriptions));
}
function renewedSubscriptionsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RenewedSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RenewedSubscriptions' from JSON`);
}
/** @internal */
exports.RenewedSubscriptionsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.RenewedSubscriptionsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RenewedSubscriptionsRevenue$;
(function (RenewedSubscriptionsRevenue$) {
    /** @deprecated use `RenewedSubscriptionsRevenue$inboundSchema` instead. */
    RenewedSubscriptionsRevenue$.inboundSchema = exports.RenewedSubscriptionsRevenue$inboundSchema;
    /** @deprecated use `RenewedSubscriptionsRevenue$outboundSchema` instead. */
    RenewedSubscriptionsRevenue$.outboundSchema = exports.RenewedSubscriptionsRevenue$outboundSchema;
})(RenewedSubscriptionsRevenue$ || (exports.RenewedSubscriptionsRevenue$ = RenewedSubscriptionsRevenue$ = {}));
function renewedSubscriptionsRevenueToJSON(renewedSubscriptionsRevenue) {
    return JSON.stringify(exports.RenewedSubscriptionsRevenue$outboundSchema.parse(renewedSubscriptionsRevenue));
}
function renewedSubscriptionsRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RenewedSubscriptionsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RenewedSubscriptionsRevenue' from JSON`);
}
/** @internal */
exports.RenewedSubscriptionsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.RenewedSubscriptionsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RenewedSubscriptionsNetRevenue$;
(function (RenewedSubscriptionsNetRevenue$) {
    /** @deprecated use `RenewedSubscriptionsNetRevenue$inboundSchema` instead. */
    RenewedSubscriptionsNetRevenue$.inboundSchema = exports.RenewedSubscriptionsNetRevenue$inboundSchema;
    /** @deprecated use `RenewedSubscriptionsNetRevenue$outboundSchema` instead. */
    RenewedSubscriptionsNetRevenue$.outboundSchema = exports.RenewedSubscriptionsNetRevenue$outboundSchema;
})(RenewedSubscriptionsNetRevenue$ || (exports.RenewedSubscriptionsNetRevenue$ = RenewedSubscriptionsNetRevenue$ = {}));
function renewedSubscriptionsNetRevenueToJSON(renewedSubscriptionsNetRevenue) {
    return JSON.stringify(exports.RenewedSubscriptionsNetRevenue$outboundSchema.parse(renewedSubscriptionsNetRevenue));
}
function renewedSubscriptionsNetRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RenewedSubscriptionsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RenewedSubscriptionsNetRevenue' from JSON`);
}
/** @internal */
exports.ActiveSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.ActiveSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActiveSubscriptions$;
(function (ActiveSubscriptions$) {
    /** @deprecated use `ActiveSubscriptions$inboundSchema` instead. */
    ActiveSubscriptions$.inboundSchema = exports.ActiveSubscriptions$inboundSchema;
    /** @deprecated use `ActiveSubscriptions$outboundSchema` instead. */
    ActiveSubscriptions$.outboundSchema = exports.ActiveSubscriptions$outboundSchema;
})(ActiveSubscriptions$ || (exports.ActiveSubscriptions$ = ActiveSubscriptions$ = {}));
function activeSubscriptionsToJSON(activeSubscriptions) {
    return JSON.stringify(exports.ActiveSubscriptions$outboundSchema.parse(activeSubscriptions));
}
function activeSubscriptionsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ActiveSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActiveSubscriptions' from JSON`);
}
/** @internal */
exports.MonthlyRecurringRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MonthlyRecurringRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MonthlyRecurringRevenue$;
(function (MonthlyRecurringRevenue$) {
    /** @deprecated use `MonthlyRecurringRevenue$inboundSchema` instead. */
    MonthlyRecurringRevenue$.inboundSchema = exports.MonthlyRecurringRevenue$inboundSchema;
    /** @deprecated use `MonthlyRecurringRevenue$outboundSchema` instead. */
    MonthlyRecurringRevenue$.outboundSchema = exports.MonthlyRecurringRevenue$outboundSchema;
})(MonthlyRecurringRevenue$ || (exports.MonthlyRecurringRevenue$ = MonthlyRecurringRevenue$ = {}));
function monthlyRecurringRevenueToJSON(monthlyRecurringRevenue) {
    return JSON.stringify(exports.MonthlyRecurringRevenue$outboundSchema.parse(monthlyRecurringRevenue));
}
function monthlyRecurringRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MonthlyRecurringRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MonthlyRecurringRevenue' from JSON`);
}
/** @internal */
exports.CommittedMonthlyRecurringRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.CommittedMonthlyRecurringRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CommittedMonthlyRecurringRevenue$;
(function (CommittedMonthlyRecurringRevenue$) {
    /** @deprecated use `CommittedMonthlyRecurringRevenue$inboundSchema` instead. */
    CommittedMonthlyRecurringRevenue$.inboundSchema = exports.CommittedMonthlyRecurringRevenue$inboundSchema;
    /** @deprecated use `CommittedMonthlyRecurringRevenue$outboundSchema` instead. */
    CommittedMonthlyRecurringRevenue$.outboundSchema = exports.CommittedMonthlyRecurringRevenue$outboundSchema;
})(CommittedMonthlyRecurringRevenue$ || (exports.CommittedMonthlyRecurringRevenue$ = CommittedMonthlyRecurringRevenue$ = {}));
function committedMonthlyRecurringRevenueToJSON(committedMonthlyRecurringRevenue) {
    return JSON.stringify(exports.CommittedMonthlyRecurringRevenue$outboundSchema.parse(committedMonthlyRecurringRevenue));
}
function committedMonthlyRecurringRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CommittedMonthlyRecurringRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CommittedMonthlyRecurringRevenue' from JSON`);
}
/** @internal */
exports.Checkouts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.Checkouts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Checkouts$;
(function (Checkouts$) {
    /** @deprecated use `Checkouts$inboundSchema` instead. */
    Checkouts$.inboundSchema = exports.Checkouts$inboundSchema;
    /** @deprecated use `Checkouts$outboundSchema` instead. */
    Checkouts$.outboundSchema = exports.Checkouts$outboundSchema;
})(Checkouts$ || (exports.Checkouts$ = Checkouts$ = {}));
function checkoutsToJSON(checkouts) {
    return JSON.stringify(exports.Checkouts$outboundSchema.parse(checkouts));
}
function checkoutsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Checkouts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Checkouts' from JSON`);
}
/** @internal */
exports.SucceededCheckouts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.SucceededCheckouts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SucceededCheckouts$;
(function (SucceededCheckouts$) {
    /** @deprecated use `SucceededCheckouts$inboundSchema` instead. */
    SucceededCheckouts$.inboundSchema = exports.SucceededCheckouts$inboundSchema;
    /** @deprecated use `SucceededCheckouts$outboundSchema` instead. */
    SucceededCheckouts$.outboundSchema = exports.SucceededCheckouts$outboundSchema;
})(SucceededCheckouts$ || (exports.SucceededCheckouts$ = SucceededCheckouts$ = {}));
function succeededCheckoutsToJSON(succeededCheckouts) {
    return JSON.stringify(exports.SucceededCheckouts$outboundSchema.parse(succeededCheckouts));
}
function succeededCheckoutsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SucceededCheckouts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SucceededCheckouts' from JSON`);
}
/** @internal */
exports.CheckoutsConversion$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.CheckoutsConversion$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutsConversion$;
(function (CheckoutsConversion$) {
    /** @deprecated use `CheckoutsConversion$inboundSchema` instead. */
    CheckoutsConversion$.inboundSchema = exports.CheckoutsConversion$inboundSchema;
    /** @deprecated use `CheckoutsConversion$outboundSchema` instead. */
    CheckoutsConversion$.outboundSchema = exports.CheckoutsConversion$outboundSchema;
})(CheckoutsConversion$ || (exports.CheckoutsConversion$ = CheckoutsConversion$ = {}));
function checkoutsConversionToJSON(checkoutsConversion) {
    return JSON.stringify(exports.CheckoutsConversion$outboundSchema.parse(checkoutsConversion));
}
function checkoutsConversionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutsConversion$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutsConversion' from JSON`);
}
/** @internal */
exports.MetricPeriod$inboundSchema = z.object({
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    orders: z.union([z.number().int(), z.number()]),
    revenue: z.union([z.number().int(), z.number()]),
    net_revenue: z.union([z.number().int(), z.number()]),
    cumulative_revenue: z.union([z.number().int(), z.number()]),
    net_cumulative_revenue: z.union([z.number().int(), z.number()]),
    average_order_value: z.union([z.number().int(), z.number()]),
    net_average_order_value: z.union([z.number().int(), z.number()]),
    one_time_products: z.union([z.number().int(), z.number()]),
    one_time_products_revenue: z.union([z.number().int(), z.number()]),
    one_time_products_net_revenue: z.union([z.number().int(), z.number()]),
    new_subscriptions: z.union([z.number().int(), z.number()]),
    new_subscriptions_revenue: z.union([z.number().int(), z.number()]),
    new_subscriptions_net_revenue: z.union([z.number().int(), z.number()]),
    renewed_subscriptions: z.union([z.number().int(), z.number()]),
    renewed_subscriptions_revenue: z.union([z.number().int(), z.number()]),
    renewed_subscriptions_net_revenue: z.union([z.number().int(), z.number()]),
    active_subscriptions: z.union([z.number().int(), z.number()]),
    monthly_recurring_revenue: z.union([z.number().int(), z.number()]),
    committed_monthly_recurring_revenue: z.union([z.number().int(), z.number()]),
    checkouts: z.union([z.number().int(), z.number()]),
    succeeded_checkouts: z.union([z.number().int(), z.number()]),
    checkouts_conversion: z.union([z.number().int(), z.number()]),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "net_revenue": "netRevenue",
        "cumulative_revenue": "cumulativeRevenue",
        "net_cumulative_revenue": "netCumulativeRevenue",
        "average_order_value": "averageOrderValue",
        "net_average_order_value": "netAverageOrderValue",
        "one_time_products": "oneTimeProducts",
        "one_time_products_revenue": "oneTimeProductsRevenue",
        "one_time_products_net_revenue": "oneTimeProductsNetRevenue",
        "new_subscriptions": "newSubscriptions",
        "new_subscriptions_revenue": "newSubscriptionsRevenue",
        "new_subscriptions_net_revenue": "newSubscriptionsNetRevenue",
        "renewed_subscriptions": "renewedSubscriptions",
        "renewed_subscriptions_revenue": "renewedSubscriptionsRevenue",
        "renewed_subscriptions_net_revenue": "renewedSubscriptionsNetRevenue",
        "active_subscriptions": "activeSubscriptions",
        "monthly_recurring_revenue": "monthlyRecurringRevenue",
        "committed_monthly_recurring_revenue": "committedMonthlyRecurringRevenue",
        "succeeded_checkouts": "succeededCheckouts",
        "checkouts_conversion": "checkoutsConversion",
    });
});
/** @internal */
exports.MetricPeriod$outboundSchema = z.object({
    timestamp: z.date().transform(v => v.toISOString()),
    orders: z.union([z.number().int(), z.number()]),
    revenue: z.union([z.number().int(), z.number()]),
    netRevenue: z.union([z.number().int(), z.number()]),
    cumulativeRevenue: z.union([z.number().int(), z.number()]),
    netCumulativeRevenue: z.union([z.number().int(), z.number()]),
    averageOrderValue: z.union([z.number().int(), z.number()]),
    netAverageOrderValue: z.union([z.number().int(), z.number()]),
    oneTimeProducts: z.union([z.number().int(), z.number()]),
    oneTimeProductsRevenue: z.union([z.number().int(), z.number()]),
    oneTimeProductsNetRevenue: z.union([z.number().int(), z.number()]),
    newSubscriptions: z.union([z.number().int(), z.number()]),
    newSubscriptionsRevenue: z.union([z.number().int(), z.number()]),
    newSubscriptionsNetRevenue: z.union([z.number().int(), z.number()]),
    renewedSubscriptions: z.union([z.number().int(), z.number()]),
    renewedSubscriptionsRevenue: z.union([z.number().int(), z.number()]),
    renewedSubscriptionsNetRevenue: z.union([z.number().int(), z.number()]),
    activeSubscriptions: z.union([z.number().int(), z.number()]),
    monthlyRecurringRevenue: z.union([z.number().int(), z.number()]),
    committedMonthlyRecurringRevenue: z.union([z.number().int(), z.number()]),
    checkouts: z.union([z.number().int(), z.number()]),
    succeededCheckouts: z.union([z.number().int(), z.number()]),
    checkoutsConversion: z.union([z.number().int(), z.number()]),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        netRevenue: "net_revenue",
        cumulativeRevenue: "cumulative_revenue",
        netCumulativeRevenue: "net_cumulative_revenue",
        averageOrderValue: "average_order_value",
        netAverageOrderValue: "net_average_order_value",
        oneTimeProducts: "one_time_products",
        oneTimeProductsRevenue: "one_time_products_revenue",
        oneTimeProductsNetRevenue: "one_time_products_net_revenue",
        newSubscriptions: "new_subscriptions",
        newSubscriptionsRevenue: "new_subscriptions_revenue",
        newSubscriptionsNetRevenue: "new_subscriptions_net_revenue",
        renewedSubscriptions: "renewed_subscriptions",
        renewedSubscriptionsRevenue: "renewed_subscriptions_revenue",
        renewedSubscriptionsNetRevenue: "renewed_subscriptions_net_revenue",
        activeSubscriptions: "active_subscriptions",
        monthlyRecurringRevenue: "monthly_recurring_revenue",
        committedMonthlyRecurringRevenue: "committed_monthly_recurring_revenue",
        succeededCheckouts: "succeeded_checkouts",
        checkoutsConversion: "checkouts_conversion",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricPeriod$;
(function (MetricPeriod$) {
    /** @deprecated use `MetricPeriod$inboundSchema` instead. */
    MetricPeriod$.inboundSchema = exports.MetricPeriod$inboundSchema;
    /** @deprecated use `MetricPeriod$outboundSchema` instead. */
    MetricPeriod$.outboundSchema = exports.MetricPeriod$outboundSchema;
})(MetricPeriod$ || (exports.MetricPeriod$ = MetricPeriod$ = {}));
function metricPeriodToJSON(metricPeriod) {
    return JSON.stringify(exports.MetricPeriod$outboundSchema.parse(metricPeriod));
}
function metricPeriodFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricPeriod$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricPeriod' from JSON`);
}
//# sourceMappingURL=metricperiod.js.map