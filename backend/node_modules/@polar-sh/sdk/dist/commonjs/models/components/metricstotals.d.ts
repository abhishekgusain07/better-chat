import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type MetricsTotalsOrders = number | number;
export type MetricsTotalsRevenue = number | number;
export type MetricsTotalsNetRevenue = number | number;
export type MetricsTotalsCumulativeRevenue = number | number;
export type MetricsTotalsNetCumulativeRevenue = number | number;
export type MetricsTotalsAverageOrderValue = number | number;
export type MetricsTotalsNetAverageOrderValue = number | number;
export type MetricsTotalsOneTimeProducts = number | number;
export type MetricsTotalsOneTimeProductsRevenue = number | number;
export type MetricsTotalsOneTimeProductsNetRevenue = number | number;
export type MetricsTotalsNewSubscriptions = number | number;
export type MetricsTotalsNewSubscriptionsRevenue = number | number;
export type MetricsTotalsNewSubscriptionsNetRevenue = number | number;
export type MetricsTotalsRenewedSubscriptions = number | number;
export type MetricsTotalsRenewedSubscriptionsRevenue = number | number;
export type MetricsTotalsRenewedSubscriptionsNetRevenue = number | number;
export type MetricsTotalsActiveSubscriptions = number | number;
export type MetricsTotalsMonthlyRecurringRevenue = number | number;
export type MetricsTotalsCommittedMonthlyRecurringRevenue = number | number;
export type MetricsTotalsCheckouts = number | number;
export type MetricsTotalsSucceededCheckouts = number | number;
export type MetricsTotalsCheckoutsConversion = number | number;
export type MetricsTotals = {
    orders: number | number;
    revenue: number | number;
    netRevenue: number | number;
    cumulativeRevenue: number | number;
    netCumulativeRevenue: number | number;
    averageOrderValue: number | number;
    netAverageOrderValue: number | number;
    oneTimeProducts: number | number;
    oneTimeProductsRevenue: number | number;
    oneTimeProductsNetRevenue: number | number;
    newSubscriptions: number | number;
    newSubscriptionsRevenue: number | number;
    newSubscriptionsNetRevenue: number | number;
    renewedSubscriptions: number | number;
    renewedSubscriptionsRevenue: number | number;
    renewedSubscriptionsNetRevenue: number | number;
    activeSubscriptions: number | number;
    monthlyRecurringRevenue: number | number;
    committedMonthlyRecurringRevenue: number | number;
    checkouts: number | number;
    succeededCheckouts: number | number;
    checkoutsConversion: number | number;
};
/** @internal */
export declare const MetricsTotalsOrders$inboundSchema: z.ZodType<MetricsTotalsOrders, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsOrders$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsOrders$outboundSchema: z.ZodType<MetricsTotalsOrders$Outbound, z.ZodTypeDef, MetricsTotalsOrders>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsOrders$ {
    /** @deprecated use `MetricsTotalsOrders$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsOrders$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsOrders$Outbound` instead. */
    type Outbound = MetricsTotalsOrders$Outbound;
}
export declare function metricsTotalsOrdersToJSON(metricsTotalsOrders: MetricsTotalsOrders): string;
export declare function metricsTotalsOrdersFromJSON(jsonString: string): SafeParseResult<MetricsTotalsOrders, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsRevenue$inboundSchema: z.ZodType<MetricsTotalsRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsRevenue$outboundSchema: z.ZodType<MetricsTotalsRevenue$Outbound, z.ZodTypeDef, MetricsTotalsRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsRevenue$ {
    /** @deprecated use `MetricsTotalsRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsRevenue$Outbound;
}
export declare function metricsTotalsRevenueToJSON(metricsTotalsRevenue: MetricsTotalsRevenue): string;
export declare function metricsTotalsRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsNetRevenue$inboundSchema: z.ZodType<MetricsTotalsNetRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsNetRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsNetRevenue$outboundSchema: z.ZodType<MetricsTotalsNetRevenue$Outbound, z.ZodTypeDef, MetricsTotalsNetRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsNetRevenue$ {
    /** @deprecated use `MetricsTotalsNetRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsNetRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsNetRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsNetRevenue$Outbound;
}
export declare function metricsTotalsNetRevenueToJSON(metricsTotalsNetRevenue: MetricsTotalsNetRevenue): string;
export declare function metricsTotalsNetRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsNetRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsCumulativeRevenue$inboundSchema: z.ZodType<MetricsTotalsCumulativeRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsCumulativeRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsCumulativeRevenue$outboundSchema: z.ZodType<MetricsTotalsCumulativeRevenue$Outbound, z.ZodTypeDef, MetricsTotalsCumulativeRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsCumulativeRevenue$ {
    /** @deprecated use `MetricsTotalsCumulativeRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsCumulativeRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsCumulativeRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsCumulativeRevenue$Outbound;
}
export declare function metricsTotalsCumulativeRevenueToJSON(metricsTotalsCumulativeRevenue: MetricsTotalsCumulativeRevenue): string;
export declare function metricsTotalsCumulativeRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsCumulativeRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsNetCumulativeRevenue$inboundSchema: z.ZodType<MetricsTotalsNetCumulativeRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsNetCumulativeRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsNetCumulativeRevenue$outboundSchema: z.ZodType<MetricsTotalsNetCumulativeRevenue$Outbound, z.ZodTypeDef, MetricsTotalsNetCumulativeRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsNetCumulativeRevenue$ {
    /** @deprecated use `MetricsTotalsNetCumulativeRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsNetCumulativeRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsNetCumulativeRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsNetCumulativeRevenue$Outbound;
}
export declare function metricsTotalsNetCumulativeRevenueToJSON(metricsTotalsNetCumulativeRevenue: MetricsTotalsNetCumulativeRevenue): string;
export declare function metricsTotalsNetCumulativeRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsNetCumulativeRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsAverageOrderValue$inboundSchema: z.ZodType<MetricsTotalsAverageOrderValue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsAverageOrderValue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsAverageOrderValue$outboundSchema: z.ZodType<MetricsTotalsAverageOrderValue$Outbound, z.ZodTypeDef, MetricsTotalsAverageOrderValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsAverageOrderValue$ {
    /** @deprecated use `MetricsTotalsAverageOrderValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsAverageOrderValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsAverageOrderValue$Outbound` instead. */
    type Outbound = MetricsTotalsAverageOrderValue$Outbound;
}
export declare function metricsTotalsAverageOrderValueToJSON(metricsTotalsAverageOrderValue: MetricsTotalsAverageOrderValue): string;
export declare function metricsTotalsAverageOrderValueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsAverageOrderValue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsNetAverageOrderValue$inboundSchema: z.ZodType<MetricsTotalsNetAverageOrderValue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsNetAverageOrderValue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsNetAverageOrderValue$outboundSchema: z.ZodType<MetricsTotalsNetAverageOrderValue$Outbound, z.ZodTypeDef, MetricsTotalsNetAverageOrderValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsNetAverageOrderValue$ {
    /** @deprecated use `MetricsTotalsNetAverageOrderValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsNetAverageOrderValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsNetAverageOrderValue$Outbound` instead. */
    type Outbound = MetricsTotalsNetAverageOrderValue$Outbound;
}
export declare function metricsTotalsNetAverageOrderValueToJSON(metricsTotalsNetAverageOrderValue: MetricsTotalsNetAverageOrderValue): string;
export declare function metricsTotalsNetAverageOrderValueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsNetAverageOrderValue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsOneTimeProducts$inboundSchema: z.ZodType<MetricsTotalsOneTimeProducts, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsOneTimeProducts$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsOneTimeProducts$outboundSchema: z.ZodType<MetricsTotalsOneTimeProducts$Outbound, z.ZodTypeDef, MetricsTotalsOneTimeProducts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsOneTimeProducts$ {
    /** @deprecated use `MetricsTotalsOneTimeProducts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsOneTimeProducts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsOneTimeProducts$Outbound` instead. */
    type Outbound = MetricsTotalsOneTimeProducts$Outbound;
}
export declare function metricsTotalsOneTimeProductsToJSON(metricsTotalsOneTimeProducts: MetricsTotalsOneTimeProducts): string;
export declare function metricsTotalsOneTimeProductsFromJSON(jsonString: string): SafeParseResult<MetricsTotalsOneTimeProducts, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsOneTimeProductsRevenue$inboundSchema: z.ZodType<MetricsTotalsOneTimeProductsRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsOneTimeProductsRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsOneTimeProductsRevenue$outboundSchema: z.ZodType<MetricsTotalsOneTimeProductsRevenue$Outbound, z.ZodTypeDef, MetricsTotalsOneTimeProductsRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsOneTimeProductsRevenue$ {
    /** @deprecated use `MetricsTotalsOneTimeProductsRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsOneTimeProductsRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsOneTimeProductsRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsOneTimeProductsRevenue$Outbound;
}
export declare function metricsTotalsOneTimeProductsRevenueToJSON(metricsTotalsOneTimeProductsRevenue: MetricsTotalsOneTimeProductsRevenue): string;
export declare function metricsTotalsOneTimeProductsRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsOneTimeProductsRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsOneTimeProductsNetRevenue$inboundSchema: z.ZodType<MetricsTotalsOneTimeProductsNetRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsOneTimeProductsNetRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsOneTimeProductsNetRevenue$outboundSchema: z.ZodType<MetricsTotalsOneTimeProductsNetRevenue$Outbound, z.ZodTypeDef, MetricsTotalsOneTimeProductsNetRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsOneTimeProductsNetRevenue$ {
    /** @deprecated use `MetricsTotalsOneTimeProductsNetRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsOneTimeProductsNetRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsOneTimeProductsNetRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsOneTimeProductsNetRevenue$Outbound;
}
export declare function metricsTotalsOneTimeProductsNetRevenueToJSON(metricsTotalsOneTimeProductsNetRevenue: MetricsTotalsOneTimeProductsNetRevenue): string;
export declare function metricsTotalsOneTimeProductsNetRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsOneTimeProductsNetRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsNewSubscriptions$inboundSchema: z.ZodType<MetricsTotalsNewSubscriptions, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsNewSubscriptions$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsNewSubscriptions$outboundSchema: z.ZodType<MetricsTotalsNewSubscriptions$Outbound, z.ZodTypeDef, MetricsTotalsNewSubscriptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsNewSubscriptions$ {
    /** @deprecated use `MetricsTotalsNewSubscriptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsNewSubscriptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsNewSubscriptions$Outbound` instead. */
    type Outbound = MetricsTotalsNewSubscriptions$Outbound;
}
export declare function metricsTotalsNewSubscriptionsToJSON(metricsTotalsNewSubscriptions: MetricsTotalsNewSubscriptions): string;
export declare function metricsTotalsNewSubscriptionsFromJSON(jsonString: string): SafeParseResult<MetricsTotalsNewSubscriptions, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsNewSubscriptionsRevenue$inboundSchema: z.ZodType<MetricsTotalsNewSubscriptionsRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsNewSubscriptionsRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsNewSubscriptionsRevenue$outboundSchema: z.ZodType<MetricsTotalsNewSubscriptionsRevenue$Outbound, z.ZodTypeDef, MetricsTotalsNewSubscriptionsRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsNewSubscriptionsRevenue$ {
    /** @deprecated use `MetricsTotalsNewSubscriptionsRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsNewSubscriptionsRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsNewSubscriptionsRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsNewSubscriptionsRevenue$Outbound;
}
export declare function metricsTotalsNewSubscriptionsRevenueToJSON(metricsTotalsNewSubscriptionsRevenue: MetricsTotalsNewSubscriptionsRevenue): string;
export declare function metricsTotalsNewSubscriptionsRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsNewSubscriptionsRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema: z.ZodType<MetricsTotalsNewSubscriptionsNetRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsNewSubscriptionsNetRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema: z.ZodType<MetricsTotalsNewSubscriptionsNetRevenue$Outbound, z.ZodTypeDef, MetricsTotalsNewSubscriptionsNetRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsNewSubscriptionsNetRevenue$ {
    /** @deprecated use `MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsNewSubscriptionsNetRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsNewSubscriptionsNetRevenue$Outbound;
}
export declare function metricsTotalsNewSubscriptionsNetRevenueToJSON(metricsTotalsNewSubscriptionsNetRevenue: MetricsTotalsNewSubscriptionsNetRevenue): string;
export declare function metricsTotalsNewSubscriptionsNetRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsNewSubscriptionsNetRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsRenewedSubscriptions$inboundSchema: z.ZodType<MetricsTotalsRenewedSubscriptions, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsRenewedSubscriptions$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsRenewedSubscriptions$outboundSchema: z.ZodType<MetricsTotalsRenewedSubscriptions$Outbound, z.ZodTypeDef, MetricsTotalsRenewedSubscriptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsRenewedSubscriptions$ {
    /** @deprecated use `MetricsTotalsRenewedSubscriptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsRenewedSubscriptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsRenewedSubscriptions$Outbound` instead. */
    type Outbound = MetricsTotalsRenewedSubscriptions$Outbound;
}
export declare function metricsTotalsRenewedSubscriptionsToJSON(metricsTotalsRenewedSubscriptions: MetricsTotalsRenewedSubscriptions): string;
export declare function metricsTotalsRenewedSubscriptionsFromJSON(jsonString: string): SafeParseResult<MetricsTotalsRenewedSubscriptions, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema: z.ZodType<MetricsTotalsRenewedSubscriptionsRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsRenewedSubscriptionsRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema: z.ZodType<MetricsTotalsRenewedSubscriptionsRevenue$Outbound, z.ZodTypeDef, MetricsTotalsRenewedSubscriptionsRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsRenewedSubscriptionsRevenue$ {
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsRenewedSubscriptionsRevenue$Outbound;
}
export declare function metricsTotalsRenewedSubscriptionsRevenueToJSON(metricsTotalsRenewedSubscriptionsRevenue: MetricsTotalsRenewedSubscriptionsRevenue): string;
export declare function metricsTotalsRenewedSubscriptionsRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsRenewedSubscriptionsRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema: z.ZodType<MetricsTotalsRenewedSubscriptionsNetRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsRenewedSubscriptionsNetRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema: z.ZodType<MetricsTotalsRenewedSubscriptionsNetRevenue$Outbound, z.ZodTypeDef, MetricsTotalsRenewedSubscriptionsNetRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsRenewedSubscriptionsNetRevenue$ {
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsNetRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsRenewedSubscriptionsNetRevenue$Outbound;
}
export declare function metricsTotalsRenewedSubscriptionsNetRevenueToJSON(metricsTotalsRenewedSubscriptionsNetRevenue: MetricsTotalsRenewedSubscriptionsNetRevenue): string;
export declare function metricsTotalsRenewedSubscriptionsNetRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsRenewedSubscriptionsNetRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsActiveSubscriptions$inboundSchema: z.ZodType<MetricsTotalsActiveSubscriptions, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsActiveSubscriptions$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsActiveSubscriptions$outboundSchema: z.ZodType<MetricsTotalsActiveSubscriptions$Outbound, z.ZodTypeDef, MetricsTotalsActiveSubscriptions>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsActiveSubscriptions$ {
    /** @deprecated use `MetricsTotalsActiveSubscriptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsActiveSubscriptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsActiveSubscriptions$Outbound` instead. */
    type Outbound = MetricsTotalsActiveSubscriptions$Outbound;
}
export declare function metricsTotalsActiveSubscriptionsToJSON(metricsTotalsActiveSubscriptions: MetricsTotalsActiveSubscriptions): string;
export declare function metricsTotalsActiveSubscriptionsFromJSON(jsonString: string): SafeParseResult<MetricsTotalsActiveSubscriptions, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsMonthlyRecurringRevenue$inboundSchema: z.ZodType<MetricsTotalsMonthlyRecurringRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsMonthlyRecurringRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsMonthlyRecurringRevenue$outboundSchema: z.ZodType<MetricsTotalsMonthlyRecurringRevenue$Outbound, z.ZodTypeDef, MetricsTotalsMonthlyRecurringRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsMonthlyRecurringRevenue$ {
    /** @deprecated use `MetricsTotalsMonthlyRecurringRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsMonthlyRecurringRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsMonthlyRecurringRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsMonthlyRecurringRevenue$Outbound;
}
export declare function metricsTotalsMonthlyRecurringRevenueToJSON(metricsTotalsMonthlyRecurringRevenue: MetricsTotalsMonthlyRecurringRevenue): string;
export declare function metricsTotalsMonthlyRecurringRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsMonthlyRecurringRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema: z.ZodType<MetricsTotalsCommittedMonthlyRecurringRevenue, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsCommittedMonthlyRecurringRevenue$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema: z.ZodType<MetricsTotalsCommittedMonthlyRecurringRevenue$Outbound, z.ZodTypeDef, MetricsTotalsCommittedMonthlyRecurringRevenue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsCommittedMonthlyRecurringRevenue$ {
    /** @deprecated use `MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsCommittedMonthlyRecurringRevenue$Outbound` instead. */
    type Outbound = MetricsTotalsCommittedMonthlyRecurringRevenue$Outbound;
}
export declare function metricsTotalsCommittedMonthlyRecurringRevenueToJSON(metricsTotalsCommittedMonthlyRecurringRevenue: MetricsTotalsCommittedMonthlyRecurringRevenue): string;
export declare function metricsTotalsCommittedMonthlyRecurringRevenueFromJSON(jsonString: string): SafeParseResult<MetricsTotalsCommittedMonthlyRecurringRevenue, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsCheckouts$inboundSchema: z.ZodType<MetricsTotalsCheckouts, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsCheckouts$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsCheckouts$outboundSchema: z.ZodType<MetricsTotalsCheckouts$Outbound, z.ZodTypeDef, MetricsTotalsCheckouts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsCheckouts$ {
    /** @deprecated use `MetricsTotalsCheckouts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsCheckouts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsCheckouts$Outbound` instead. */
    type Outbound = MetricsTotalsCheckouts$Outbound;
}
export declare function metricsTotalsCheckoutsToJSON(metricsTotalsCheckouts: MetricsTotalsCheckouts): string;
export declare function metricsTotalsCheckoutsFromJSON(jsonString: string): SafeParseResult<MetricsTotalsCheckouts, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsSucceededCheckouts$inboundSchema: z.ZodType<MetricsTotalsSucceededCheckouts, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsSucceededCheckouts$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsSucceededCheckouts$outboundSchema: z.ZodType<MetricsTotalsSucceededCheckouts$Outbound, z.ZodTypeDef, MetricsTotalsSucceededCheckouts>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsSucceededCheckouts$ {
    /** @deprecated use `MetricsTotalsSucceededCheckouts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsSucceededCheckouts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsSucceededCheckouts$Outbound` instead. */
    type Outbound = MetricsTotalsSucceededCheckouts$Outbound;
}
export declare function metricsTotalsSucceededCheckoutsToJSON(metricsTotalsSucceededCheckouts: MetricsTotalsSucceededCheckouts): string;
export declare function metricsTotalsSucceededCheckoutsFromJSON(jsonString: string): SafeParseResult<MetricsTotalsSucceededCheckouts, SDKValidationError>;
/** @internal */
export declare const MetricsTotalsCheckoutsConversion$inboundSchema: z.ZodType<MetricsTotalsCheckoutsConversion, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotalsCheckoutsConversion$Outbound = number | number;
/** @internal */
export declare const MetricsTotalsCheckoutsConversion$outboundSchema: z.ZodType<MetricsTotalsCheckoutsConversion$Outbound, z.ZodTypeDef, MetricsTotalsCheckoutsConversion>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotalsCheckoutsConversion$ {
    /** @deprecated use `MetricsTotalsCheckoutsConversion$inboundSchema` instead. */
    const inboundSchema: z.ZodType<number, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotalsCheckoutsConversion$outboundSchema` instead. */
    const outboundSchema: z.ZodType<number, z.ZodTypeDef, number>;
    /** @deprecated use `MetricsTotalsCheckoutsConversion$Outbound` instead. */
    type Outbound = MetricsTotalsCheckoutsConversion$Outbound;
}
export declare function metricsTotalsCheckoutsConversionToJSON(metricsTotalsCheckoutsConversion: MetricsTotalsCheckoutsConversion): string;
export declare function metricsTotalsCheckoutsConversionFromJSON(jsonString: string): SafeParseResult<MetricsTotalsCheckoutsConversion, SDKValidationError>;
/** @internal */
export declare const MetricsTotals$inboundSchema: z.ZodType<MetricsTotals, z.ZodTypeDef, unknown>;
/** @internal */
export type MetricsTotals$Outbound = {
    orders: number | number;
    revenue: number | number;
    net_revenue: number | number;
    cumulative_revenue: number | number;
    net_cumulative_revenue: number | number;
    average_order_value: number | number;
    net_average_order_value: number | number;
    one_time_products: number | number;
    one_time_products_revenue: number | number;
    one_time_products_net_revenue: number | number;
    new_subscriptions: number | number;
    new_subscriptions_revenue: number | number;
    new_subscriptions_net_revenue: number | number;
    renewed_subscriptions: number | number;
    renewed_subscriptions_revenue: number | number;
    renewed_subscriptions_net_revenue: number | number;
    active_subscriptions: number | number;
    monthly_recurring_revenue: number | number;
    committed_monthly_recurring_revenue: number | number;
    checkouts: number | number;
    succeeded_checkouts: number | number;
    checkouts_conversion: number | number;
};
/** @internal */
export declare const MetricsTotals$outboundSchema: z.ZodType<MetricsTotals$Outbound, z.ZodTypeDef, MetricsTotals>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MetricsTotals$ {
    /** @deprecated use `MetricsTotals$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MetricsTotals, z.ZodTypeDef, unknown>;
    /** @deprecated use `MetricsTotals$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MetricsTotals$Outbound, z.ZodTypeDef, MetricsTotals>;
    /** @deprecated use `MetricsTotals$Outbound` instead. */
    type Outbound = MetricsTotals$Outbound;
}
export declare function metricsTotalsToJSON(metricsTotals: MetricsTotals): string;
export declare function metricsTotalsFromJSON(jsonString: string): SafeParseResult<MetricsTotals, SDKValidationError>;
//# sourceMappingURL=metricstotals.d.ts.map