"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metrics$ = exports.Metrics$outboundSchema = exports.Metrics$inboundSchema = void 0;
exports.metricsToJSON = metricsToJSON;
exports.metricsFromJSON = metricsFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const metric_js_1 = require("./metric.js");
/** @internal */
exports.Metrics$inboundSchema = z.object({
    orders: metric_js_1.Metric$inboundSchema,
    revenue: metric_js_1.Metric$inboundSchema,
    net_revenue: metric_js_1.Metric$inboundSchema,
    cumulative_revenue: metric_js_1.Metric$inboundSchema,
    net_cumulative_revenue: metric_js_1.Metric$inboundSchema,
    average_order_value: metric_js_1.Metric$inboundSchema,
    net_average_order_value: metric_js_1.Metric$inboundSchema,
    one_time_products: metric_js_1.Metric$inboundSchema,
    one_time_products_revenue: metric_js_1.Metric$inboundSchema,
    one_time_products_net_revenue: metric_js_1.Metric$inboundSchema,
    new_subscriptions: metric_js_1.Metric$inboundSchema,
    new_subscriptions_revenue: metric_js_1.Metric$inboundSchema,
    new_subscriptions_net_revenue: metric_js_1.Metric$inboundSchema,
    renewed_subscriptions: metric_js_1.Metric$inboundSchema,
    renewed_subscriptions_revenue: metric_js_1.Metric$inboundSchema,
    renewed_subscriptions_net_revenue: metric_js_1.Metric$inboundSchema,
    active_subscriptions: metric_js_1.Metric$inboundSchema,
    monthly_recurring_revenue: metric_js_1.Metric$inboundSchema,
    committed_monthly_recurring_revenue: metric_js_1.Metric$inboundSchema,
    checkouts: metric_js_1.Metric$inboundSchema,
    succeeded_checkouts: metric_js_1.Metric$inboundSchema,
    checkouts_conversion: metric_js_1.Metric$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "net_revenue": "netRevenue",
        "cumulative_revenue": "cumulativeRevenue",
        "net_cumulative_revenue": "netCumulativeRevenue",
        "average_order_value": "averageOrderValue",
        "net_average_order_value": "netAverageOrderValue",
        "one_time_products": "oneTimeProducts",
        "one_time_products_revenue": "oneTimeProductsRevenue",
        "one_time_products_net_revenue": "oneTimeProductsNetRevenue",
        "new_subscriptions": "newSubscriptions",
        "new_subscriptions_revenue": "newSubscriptionsRevenue",
        "new_subscriptions_net_revenue": "newSubscriptionsNetRevenue",
        "renewed_subscriptions": "renewedSubscriptions",
        "renewed_subscriptions_revenue": "renewedSubscriptionsRevenue",
        "renewed_subscriptions_net_revenue": "renewedSubscriptionsNetRevenue",
        "active_subscriptions": "activeSubscriptions",
        "monthly_recurring_revenue": "monthlyRecurringRevenue",
        "committed_monthly_recurring_revenue": "committedMonthlyRecurringRevenue",
        "succeeded_checkouts": "succeededCheckouts",
        "checkouts_conversion": "checkoutsConversion",
    });
});
/** @internal */
exports.Metrics$outboundSchema = z.object({
    orders: metric_js_1.Metric$outboundSchema,
    revenue: metric_js_1.Metric$outboundSchema,
    netRevenue: metric_js_1.Metric$outboundSchema,
    cumulativeRevenue: metric_js_1.Metric$outboundSchema,
    netCumulativeRevenue: metric_js_1.Metric$outboundSchema,
    averageOrderValue: metric_js_1.Metric$outboundSchema,
    netAverageOrderValue: metric_js_1.Metric$outboundSchema,
    oneTimeProducts: metric_js_1.Metric$outboundSchema,
    oneTimeProductsRevenue: metric_js_1.Metric$outboundSchema,
    oneTimeProductsNetRevenue: metric_js_1.Metric$outboundSchema,
    newSubscriptions: metric_js_1.Metric$outboundSchema,
    newSubscriptionsRevenue: metric_js_1.Metric$outboundSchema,
    newSubscriptionsNetRevenue: metric_js_1.Metric$outboundSchema,
    renewedSubscriptions: metric_js_1.Metric$outboundSchema,
    renewedSubscriptionsRevenue: metric_js_1.Metric$outboundSchema,
    renewedSubscriptionsNetRevenue: metric_js_1.Metric$outboundSchema,
    activeSubscriptions: metric_js_1.Metric$outboundSchema,
    monthlyRecurringRevenue: metric_js_1.Metric$outboundSchema,
    committedMonthlyRecurringRevenue: metric_js_1.Metric$outboundSchema,
    checkouts: metric_js_1.Metric$outboundSchema,
    succeededCheckouts: metric_js_1.Metric$outboundSchema,
    checkoutsConversion: metric_js_1.Metric$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        netRevenue: "net_revenue",
        cumulativeRevenue: "cumulative_revenue",
        netCumulativeRevenue: "net_cumulative_revenue",
        averageOrderValue: "average_order_value",
        netAverageOrderValue: "net_average_order_value",
        oneTimeProducts: "one_time_products",
        oneTimeProductsRevenue: "one_time_products_revenue",
        oneTimeProductsNetRevenue: "one_time_products_net_revenue",
        newSubscriptions: "new_subscriptions",
        newSubscriptionsRevenue: "new_subscriptions_revenue",
        newSubscriptionsNetRevenue: "new_subscriptions_net_revenue",
        renewedSubscriptions: "renewed_subscriptions",
        renewedSubscriptionsRevenue: "renewed_subscriptions_revenue",
        renewedSubscriptionsNetRevenue: "renewed_subscriptions_net_revenue",
        activeSubscriptions: "active_subscriptions",
        monthlyRecurringRevenue: "monthly_recurring_revenue",
        committedMonthlyRecurringRevenue: "committed_monthly_recurring_revenue",
        succeededCheckouts: "succeeded_checkouts",
        checkoutsConversion: "checkouts_conversion",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Metrics$;
(function (Metrics$) {
    /** @deprecated use `Metrics$inboundSchema` instead. */
    Metrics$.inboundSchema = exports.Metrics$inboundSchema;
    /** @deprecated use `Metrics$outboundSchema` instead. */
    Metrics$.outboundSchema = exports.Metrics$outboundSchema;
})(Metrics$ || (exports.Metrics$ = Metrics$ = {}));
function metricsToJSON(metrics) {
    return JSON.stringify(exports.Metrics$outboundSchema.parse(metrics));
}
function metricsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Metrics$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Metrics' from JSON`);
}
//# sourceMappingURL=metrics.js.map