"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckoutUpdate$ = exports.CheckoutUpdate$outboundSchema = exports.CheckoutUpdate$inboundSchema = exports.CheckoutUpdateCustomerMetadata$ = exports.CheckoutUpdateCustomerMetadata$outboundSchema = exports.CheckoutUpdateCustomerMetadata$inboundSchema = exports.CheckoutUpdateMetadata$ = exports.CheckoutUpdateMetadata$outboundSchema = exports.CheckoutUpdateMetadata$inboundSchema = exports.CheckoutUpdateCustomFieldData$ = exports.CheckoutUpdateCustomFieldData$outboundSchema = exports.CheckoutUpdateCustomFieldData$inboundSchema = void 0;
exports.checkoutUpdateCustomFieldDataToJSON = checkoutUpdateCustomFieldDataToJSON;
exports.checkoutUpdateCustomFieldDataFromJSON = checkoutUpdateCustomFieldDataFromJSON;
exports.checkoutUpdateMetadataToJSON = checkoutUpdateMetadataToJSON;
exports.checkoutUpdateMetadataFromJSON = checkoutUpdateMetadataFromJSON;
exports.checkoutUpdateCustomerMetadataToJSON = checkoutUpdateCustomerMetadataToJSON;
exports.checkoutUpdateCustomerMetadataFromJSON = checkoutUpdateCustomerMetadataFromJSON;
exports.checkoutUpdateToJSON = checkoutUpdateToJSON;
exports.checkoutUpdateFromJSON = checkoutUpdateFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const address_js_1 = require("./address.js");
/** @internal */
exports.CheckoutUpdateCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
exports.CheckoutUpdateCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutUpdateCustomFieldData$;
(function (CheckoutUpdateCustomFieldData$) {
    /** @deprecated use `CheckoutUpdateCustomFieldData$inboundSchema` instead. */
    CheckoutUpdateCustomFieldData$.inboundSchema = exports.CheckoutUpdateCustomFieldData$inboundSchema;
    /** @deprecated use `CheckoutUpdateCustomFieldData$outboundSchema` instead. */
    CheckoutUpdateCustomFieldData$.outboundSchema = exports.CheckoutUpdateCustomFieldData$outboundSchema;
})(CheckoutUpdateCustomFieldData$ || (exports.CheckoutUpdateCustomFieldData$ = CheckoutUpdateCustomFieldData$ = {}));
function checkoutUpdateCustomFieldDataToJSON(checkoutUpdateCustomFieldData) {
    return JSON.stringify(exports.CheckoutUpdateCustomFieldData$outboundSchema.parse(checkoutUpdateCustomFieldData));
}
function checkoutUpdateCustomFieldDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutUpdateCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutUpdateCustomFieldData' from JSON`);
}
/** @internal */
exports.CheckoutUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
exports.CheckoutUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutUpdateMetadata$;
(function (CheckoutUpdateMetadata$) {
    /** @deprecated use `CheckoutUpdateMetadata$inboundSchema` instead. */
    CheckoutUpdateMetadata$.inboundSchema = exports.CheckoutUpdateMetadata$inboundSchema;
    /** @deprecated use `CheckoutUpdateMetadata$outboundSchema` instead. */
    CheckoutUpdateMetadata$.outboundSchema = exports.CheckoutUpdateMetadata$outboundSchema;
})(CheckoutUpdateMetadata$ || (exports.CheckoutUpdateMetadata$ = CheckoutUpdateMetadata$ = {}));
function checkoutUpdateMetadataToJSON(checkoutUpdateMetadata) {
    return JSON.stringify(exports.CheckoutUpdateMetadata$outboundSchema.parse(checkoutUpdateMetadata));
}
function checkoutUpdateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutUpdateMetadata' from JSON`);
}
/** @internal */
exports.CheckoutUpdateCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
exports.CheckoutUpdateCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutUpdateCustomerMetadata$;
(function (CheckoutUpdateCustomerMetadata$) {
    /** @deprecated use `CheckoutUpdateCustomerMetadata$inboundSchema` instead. */
    CheckoutUpdateCustomerMetadata$.inboundSchema = exports.CheckoutUpdateCustomerMetadata$inboundSchema;
    /** @deprecated use `CheckoutUpdateCustomerMetadata$outboundSchema` instead. */
    CheckoutUpdateCustomerMetadata$.outboundSchema = exports.CheckoutUpdateCustomerMetadata$outboundSchema;
})(CheckoutUpdateCustomerMetadata$ || (exports.CheckoutUpdateCustomerMetadata$ = CheckoutUpdateCustomerMetadata$ = {}));
function checkoutUpdateCustomerMetadataToJSON(checkoutUpdateCustomerMetadata) {
    return JSON.stringify(exports.CheckoutUpdateCustomerMetadata$outboundSchema.parse(checkoutUpdateCustomerMetadata));
}
function checkoutUpdateCustomerMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutUpdateCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutUpdateCustomerMetadata' from JSON`);
}
/** @internal */
exports.CheckoutUpdate$inboundSchema = z.object({
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    product_id: z.nullable(z.string()).optional(),
    product_price_id: z.nullable(z.string()).optional(),
    amount: z.nullable(z.number().int()).optional(),
    is_business_customer: z.nullable(z.boolean()).optional(),
    customer_name: z.nullable(z.string()).optional(),
    customer_email: z.nullable(z.string()).optional(),
    customer_billing_name: z.nullable(z.string()).optional(),
    customer_billing_address: z.nullable(address_js_1.Address$inboundSchema).optional(),
    customer_tax_id: z.nullable(z.string()).optional(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    discount_id: z.nullable(z.string()).optional(),
    allow_discount_codes: z.nullable(z.boolean()).optional(),
    require_billing_address: z.nullable(z.boolean()).optional(),
    customer_ip_address: z.nullable(z.string()).optional(),
    customer_metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()]))).optional(),
    success_url: z.nullable(z.string()).optional(),
    embed_origin: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "custom_field_data": "customFieldData",
        "product_id": "productId",
        "product_price_id": "productPriceId",
        "is_business_customer": "isBusinessCustomer",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_billing_name": "customerBillingName",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "discount_id": "discountId",
        "allow_discount_codes": "allowDiscountCodes",
        "require_billing_address": "requireBillingAddress",
        "customer_ip_address": "customerIpAddress",
        "customer_metadata": "customerMetadata",
        "success_url": "successUrl",
        "embed_origin": "embedOrigin",
    });
});
/** @internal */
exports.CheckoutUpdate$outboundSchema = z.object({
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    productId: z.nullable(z.string()).optional(),
    productPriceId: z.nullable(z.string()).optional(),
    amount: z.nullable(z.number().int()).optional(),
    isBusinessCustomer: z.nullable(z.boolean()).optional(),
    customerName: z.nullable(z.string()).optional(),
    customerEmail: z.nullable(z.string()).optional(),
    customerBillingName: z.nullable(z.string()).optional(),
    customerBillingAddress: z.nullable(address_js_1.Address$outboundSchema).optional(),
    customerTaxId: z.nullable(z.string()).optional(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    discountId: z.nullable(z.string()).optional(),
    allowDiscountCodes: z.nullable(z.boolean()).optional(),
    requireBillingAddress: z.nullable(z.boolean()).optional(),
    customerIpAddress: z.nullable(z.string()).optional(),
    customerMetadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()]))).optional(),
    successUrl: z.nullable(z.string()).optional(),
    embedOrigin: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        customFieldData: "custom_field_data",
        productId: "product_id",
        productPriceId: "product_price_id",
        isBusinessCustomer: "is_business_customer",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerBillingName: "customer_billing_name",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        discountId: "discount_id",
        allowDiscountCodes: "allow_discount_codes",
        requireBillingAddress: "require_billing_address",
        customerIpAddress: "customer_ip_address",
        customerMetadata: "customer_metadata",
        successUrl: "success_url",
        embedOrigin: "embed_origin",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutUpdate$;
(function (CheckoutUpdate$) {
    /** @deprecated use `CheckoutUpdate$inboundSchema` instead. */
    CheckoutUpdate$.inboundSchema = exports.CheckoutUpdate$inboundSchema;
    /** @deprecated use `CheckoutUpdate$outboundSchema` instead. */
    CheckoutUpdate$.outboundSchema = exports.CheckoutUpdate$outboundSchema;
})(CheckoutUpdate$ || (exports.CheckoutUpdate$ = CheckoutUpdate$ = {}));
function checkoutUpdateToJSON(checkoutUpdate) {
    return JSON.stringify(exports.CheckoutUpdate$outboundSchema.parse(checkoutUpdate));
}
function checkoutUpdateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutUpdate' from JSON`);
}
//# sourceMappingURL=checkoutupdate.js.map