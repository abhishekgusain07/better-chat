import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { BenefitDownloadablesCreateProperties, BenefitDownloadablesCreateProperties$Outbound } from "./benefitdownloadablescreateproperties.js";
export type BenefitDownloadablesUpdateMetadata = string | number | number | boolean;
export type BenefitDownloadablesUpdate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    /**
     * The description of the benefit. Will be displayed on products having this benefit.
     */
    description?: string | null | undefined;
    type: "downloadables";
    properties?: BenefitDownloadablesCreateProperties | null | undefined;
};
/** @internal */
export declare const BenefitDownloadablesUpdateMetadata$inboundSchema: z.ZodType<BenefitDownloadablesUpdateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitDownloadablesUpdateMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const BenefitDownloadablesUpdateMetadata$outboundSchema: z.ZodType<BenefitDownloadablesUpdateMetadata$Outbound, z.ZodTypeDef, BenefitDownloadablesUpdateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitDownloadablesUpdateMetadata$ {
    /** @deprecated use `BenefitDownloadablesUpdateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitDownloadablesUpdateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitDownloadablesUpdateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitDownloadablesUpdateMetadata$Outbound, z.ZodTypeDef, BenefitDownloadablesUpdateMetadata>;
    /** @deprecated use `BenefitDownloadablesUpdateMetadata$Outbound` instead. */
    type Outbound = BenefitDownloadablesUpdateMetadata$Outbound;
}
export declare function benefitDownloadablesUpdateMetadataToJSON(benefitDownloadablesUpdateMetadata: BenefitDownloadablesUpdateMetadata): string;
export declare function benefitDownloadablesUpdateMetadataFromJSON(jsonString: string): SafeParseResult<BenefitDownloadablesUpdateMetadata, SDKValidationError>;
/** @internal */
export declare const BenefitDownloadablesUpdate$inboundSchema: z.ZodType<BenefitDownloadablesUpdate, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitDownloadablesUpdate$Outbound = {
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    description?: string | null | undefined;
    type: "downloadables";
    properties?: BenefitDownloadablesCreateProperties$Outbound | null | undefined;
};
/** @internal */
export declare const BenefitDownloadablesUpdate$outboundSchema: z.ZodType<BenefitDownloadablesUpdate$Outbound, z.ZodTypeDef, BenefitDownloadablesUpdate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitDownloadablesUpdate$ {
    /** @deprecated use `BenefitDownloadablesUpdate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitDownloadablesUpdate, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitDownloadablesUpdate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitDownloadablesUpdate$Outbound, z.ZodTypeDef, BenefitDownloadablesUpdate>;
    /** @deprecated use `BenefitDownloadablesUpdate$Outbound` instead. */
    type Outbound = BenefitDownloadablesUpdate$Outbound;
}
export declare function benefitDownloadablesUpdateToJSON(benefitDownloadablesUpdate: BenefitDownloadablesUpdate): string;
export declare function benefitDownloadablesUpdateFromJSON(jsonString: string): SafeParseResult<BenefitDownloadablesUpdate, SDKValidationError>;
//# sourceMappingURL=benefitdownloadablesupdate.d.ts.map