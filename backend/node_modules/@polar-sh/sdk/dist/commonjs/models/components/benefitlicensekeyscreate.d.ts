import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { BenefitLicenseKeysCreateProperties, BenefitLicenseKeysCreateProperties$Outbound } from "./benefitlicensekeyscreateproperties.js";
export type BenefitLicenseKeysCreateMetadata = string | number | number | boolean;
export type BenefitLicenseKeysCreate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    type: "license_keys";
    /**
     * The description of the benefit. Will be displayed on products having this benefit.
     */
    description: string;
    /**
     * The ID of the organization owning the benefit. **Required unless you use an organization token.**
     */
    organizationId?: string | null | undefined;
    properties: BenefitLicenseKeysCreateProperties;
};
/** @internal */
export declare const BenefitLicenseKeysCreateMetadata$inboundSchema: z.ZodType<BenefitLicenseKeysCreateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitLicenseKeysCreateMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const BenefitLicenseKeysCreateMetadata$outboundSchema: z.ZodType<BenefitLicenseKeysCreateMetadata$Outbound, z.ZodTypeDef, BenefitLicenseKeysCreateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitLicenseKeysCreateMetadata$ {
    /** @deprecated use `BenefitLicenseKeysCreateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitLicenseKeysCreateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitLicenseKeysCreateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitLicenseKeysCreateMetadata$Outbound, z.ZodTypeDef, BenefitLicenseKeysCreateMetadata>;
    /** @deprecated use `BenefitLicenseKeysCreateMetadata$Outbound` instead. */
    type Outbound = BenefitLicenseKeysCreateMetadata$Outbound;
}
export declare function benefitLicenseKeysCreateMetadataToJSON(benefitLicenseKeysCreateMetadata: BenefitLicenseKeysCreateMetadata): string;
export declare function benefitLicenseKeysCreateMetadataFromJSON(jsonString: string): SafeParseResult<BenefitLicenseKeysCreateMetadata, SDKValidationError>;
/** @internal */
export declare const BenefitLicenseKeysCreate$inboundSchema: z.ZodType<BenefitLicenseKeysCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitLicenseKeysCreate$Outbound = {
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    type: "license_keys";
    description: string;
    organization_id?: string | null | undefined;
    properties: BenefitLicenseKeysCreateProperties$Outbound;
};
/** @internal */
export declare const BenefitLicenseKeysCreate$outboundSchema: z.ZodType<BenefitLicenseKeysCreate$Outbound, z.ZodTypeDef, BenefitLicenseKeysCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitLicenseKeysCreate$ {
    /** @deprecated use `BenefitLicenseKeysCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitLicenseKeysCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitLicenseKeysCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitLicenseKeysCreate$Outbound, z.ZodTypeDef, BenefitLicenseKeysCreate>;
    /** @deprecated use `BenefitLicenseKeysCreate$Outbound` instead. */
    type Outbound = BenefitLicenseKeysCreate$Outbound;
}
export declare function benefitLicenseKeysCreateToJSON(benefitLicenseKeysCreate: BenefitLicenseKeysCreate): string;
export declare function benefitLicenseKeysCreateFromJSON(jsonString: string): SafeParseResult<BenefitLicenseKeysCreate, SDKValidationError>;
//# sourceMappingURL=benefitlicensekeyscreate.d.ts.map