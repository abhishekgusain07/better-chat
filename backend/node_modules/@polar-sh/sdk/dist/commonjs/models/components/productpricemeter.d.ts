import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * A meter associated to a metered price.
 */
export type ProductPriceMeter = {
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * The name of the meter.
     */
    name: string;
};
/** @internal */
export declare const ProductPriceMeter$inboundSchema: z.ZodType<ProductPriceMeter, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductPriceMeter$Outbound = {
    id: string;
    name: string;
};
/** @internal */
export declare const ProductPriceMeter$outboundSchema: z.ZodType<ProductPriceMeter$Outbound, z.ZodTypeDef, ProductPriceMeter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductPriceMeter$ {
    /** @deprecated use `ProductPriceMeter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductPriceMeter, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductPriceMeter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductPriceMeter$Outbound, z.ZodTypeDef, ProductPriceMeter>;
    /** @deprecated use `ProductPriceMeter$Outbound` instead. */
    type Outbound = ProductPriceMeter$Outbound;
}
export declare function productPriceMeterToJSON(productPriceMeter: ProductPriceMeter): string;
export declare function productPriceMeterFromJSON(jsonString: string): SafeParseResult<ProductPriceMeter, SDKValidationError>;
//# sourceMappingURL=productpricemeter.d.ts.map