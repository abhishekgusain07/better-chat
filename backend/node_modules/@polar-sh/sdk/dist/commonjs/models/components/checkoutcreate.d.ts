import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
export type CheckoutCreateMetadata = string | number | number | boolean;
export type CheckoutCreateCustomFieldData = string | number | boolean | Date;
export type CheckoutCreateCustomerMetadata = string | number | number | boolean;
/**
 * Create a new checkout session from a list of products.
 *
 * @remarks
 * Customers will be able to switch between those products.
 *
 * Metadata set on the checkout will be copied
 * to the resulting order and/or subscription.
 */
export type CheckoutCreate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    /**
     * Key-value object storing custom field values.
     */
    customFieldData?: {
        [k: string]: string | number | boolean | Date | null;
    } | undefined;
    /**
     * ID of the discount to apply to the checkout.
     */
    discountId?: string | null | undefined;
    /**
     * Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
     */
    allowDiscountCodes?: boolean | undefined;
    /**
     * Whether to require the customer to fill their full billing address, instead of just the country. Customers in the US will always be required to fill their full address, regardless of this setting. If you preset the billing address, this setting will be automatically set to `true`.
     */
    requireBillingAddress?: boolean | undefined;
    amount?: number | null | undefined;
    /**
     * ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer.
     */
    customerId?: string | null | undefined;
    /**
     * Whether the customer is a business or an individual. If `true`, the customer will be required to fill their full billing address and billing name.
     */
    isBusinessCustomer?: boolean | undefined;
    /**
     * ID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set.
     */
    externalCustomerId?: string | null | undefined;
    customerName?: string | null | undefined;
    customerEmail?: string | null | undefined;
    customerIpAddress?: string | null | undefined;
    customerBillingName?: string | null | undefined;
    customerBillingAddress?: Address | null | undefined;
    customerTaxId?: string | null | undefined;
    /**
     * Key-value object allowing you to store additional information that'll be copied to the created customer.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    customerMetadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    /**
     * ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten.
     */
    subscriptionId?: string | null | undefined;
    /**
     * URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
     */
    successUrl?: string | null | undefined;
    /**
     * If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
     */
    embedOrigin?: string | null | undefined;
    /**
     * List of product IDs available to select at that checkout. The first one will be selected by default.
     */
    products: Array<string>;
};
/** @internal */
export declare const CheckoutCreateMetadata$inboundSchema: z.ZodType<CheckoutCreateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutCreateMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const CheckoutCreateMetadata$outboundSchema: z.ZodType<CheckoutCreateMetadata$Outbound, z.ZodTypeDef, CheckoutCreateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutCreateMetadata$ {
    /** @deprecated use `CheckoutCreateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutCreateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutCreateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutCreateMetadata$Outbound, z.ZodTypeDef, CheckoutCreateMetadata>;
    /** @deprecated use `CheckoutCreateMetadata$Outbound` instead. */
    type Outbound = CheckoutCreateMetadata$Outbound;
}
export declare function checkoutCreateMetadataToJSON(checkoutCreateMetadata: CheckoutCreateMetadata): string;
export declare function checkoutCreateMetadataFromJSON(jsonString: string): SafeParseResult<CheckoutCreateMetadata, SDKValidationError>;
/** @internal */
export declare const CheckoutCreateCustomFieldData$inboundSchema: z.ZodType<CheckoutCreateCustomFieldData, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutCreateCustomFieldData$Outbound = string | number | boolean | string;
/** @internal */
export declare const CheckoutCreateCustomFieldData$outboundSchema: z.ZodType<CheckoutCreateCustomFieldData$Outbound, z.ZodTypeDef, CheckoutCreateCustomFieldData>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutCreateCustomFieldData$ {
    /** @deprecated use `CheckoutCreateCustomFieldData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutCreateCustomFieldData, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutCreateCustomFieldData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutCreateCustomFieldData$Outbound, z.ZodTypeDef, CheckoutCreateCustomFieldData>;
    /** @deprecated use `CheckoutCreateCustomFieldData$Outbound` instead. */
    type Outbound = CheckoutCreateCustomFieldData$Outbound;
}
export declare function checkoutCreateCustomFieldDataToJSON(checkoutCreateCustomFieldData: CheckoutCreateCustomFieldData): string;
export declare function checkoutCreateCustomFieldDataFromJSON(jsonString: string): SafeParseResult<CheckoutCreateCustomFieldData, SDKValidationError>;
/** @internal */
export declare const CheckoutCreateCustomerMetadata$inboundSchema: z.ZodType<CheckoutCreateCustomerMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutCreateCustomerMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const CheckoutCreateCustomerMetadata$outboundSchema: z.ZodType<CheckoutCreateCustomerMetadata$Outbound, z.ZodTypeDef, CheckoutCreateCustomerMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutCreateCustomerMetadata$ {
    /** @deprecated use `CheckoutCreateCustomerMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutCreateCustomerMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutCreateCustomerMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutCreateCustomerMetadata$Outbound, z.ZodTypeDef, CheckoutCreateCustomerMetadata>;
    /** @deprecated use `CheckoutCreateCustomerMetadata$Outbound` instead. */
    type Outbound = CheckoutCreateCustomerMetadata$Outbound;
}
export declare function checkoutCreateCustomerMetadataToJSON(checkoutCreateCustomerMetadata: CheckoutCreateCustomerMetadata): string;
export declare function checkoutCreateCustomerMetadataFromJSON(jsonString: string): SafeParseResult<CheckoutCreateCustomerMetadata, SDKValidationError>;
/** @internal */
export declare const CheckoutCreate$inboundSchema: z.ZodType<CheckoutCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutCreate$Outbound = {
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    custom_field_data?: {
        [k: string]: string | number | boolean | string | null;
    } | undefined;
    discount_id?: string | null | undefined;
    allow_discount_codes: boolean;
    require_billing_address: boolean;
    amount?: number | null | undefined;
    customer_id?: string | null | undefined;
    is_business_customer: boolean;
    external_customer_id?: string | null | undefined;
    customer_name?: string | null | undefined;
    customer_email?: string | null | undefined;
    customer_ip_address?: string | null | undefined;
    customer_billing_name?: string | null | undefined;
    customer_billing_address?: Address$Outbound | null | undefined;
    customer_tax_id?: string | null | undefined;
    customer_metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    subscription_id?: string | null | undefined;
    success_url?: string | null | undefined;
    embed_origin?: string | null | undefined;
    products: Array<string>;
};
/** @internal */
export declare const CheckoutCreate$outboundSchema: z.ZodType<CheckoutCreate$Outbound, z.ZodTypeDef, CheckoutCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutCreate$ {
    /** @deprecated use `CheckoutCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutCreate$Outbound, z.ZodTypeDef, CheckoutCreate>;
    /** @deprecated use `CheckoutCreate$Outbound` instead. */
    type Outbound = CheckoutCreate$Outbound;
}
export declare function checkoutCreateToJSON(checkoutCreate: CheckoutCreate): string;
export declare function checkoutCreateFromJSON(jsonString: string): SafeParseResult<CheckoutCreate, SDKValidationError>;
//# sourceMappingURL=checkoutcreate.d.ts.map