"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerUpdate$ = exports.CustomerUpdate$outboundSchema = exports.CustomerUpdate$inboundSchema = exports.CustomerUpdateTaxId$ = exports.CustomerUpdateTaxId$outboundSchema = exports.CustomerUpdateTaxId$inboundSchema = exports.CustomerUpdateMetadata$ = exports.CustomerUpdateMetadata$outboundSchema = exports.CustomerUpdateMetadata$inboundSchema = void 0;
exports.customerUpdateMetadataToJSON = customerUpdateMetadataToJSON;
exports.customerUpdateMetadataFromJSON = customerUpdateMetadataFromJSON;
exports.customerUpdateTaxIdToJSON = customerUpdateTaxIdToJSON;
exports.customerUpdateTaxIdFromJSON = customerUpdateTaxIdFromJSON;
exports.customerUpdateToJSON = customerUpdateToJSON;
exports.customerUpdateFromJSON = customerUpdateFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const address_js_1 = require("./address.js");
const taxidformat_js_1 = require("./taxidformat.js");
/** @internal */
exports.CustomerUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
exports.CustomerUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerUpdateMetadata$;
(function (CustomerUpdateMetadata$) {
    /** @deprecated use `CustomerUpdateMetadata$inboundSchema` instead. */
    CustomerUpdateMetadata$.inboundSchema = exports.CustomerUpdateMetadata$inboundSchema;
    /** @deprecated use `CustomerUpdateMetadata$outboundSchema` instead. */
    CustomerUpdateMetadata$.outboundSchema = exports.CustomerUpdateMetadata$outboundSchema;
})(CustomerUpdateMetadata$ || (exports.CustomerUpdateMetadata$ = CustomerUpdateMetadata$ = {}));
function customerUpdateMetadataToJSON(customerUpdateMetadata) {
    return JSON.stringify(exports.CustomerUpdateMetadata$outboundSchema.parse(customerUpdateMetadata));
}
function customerUpdateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdateMetadata' from JSON`);
}
/** @internal */
exports.CustomerUpdateTaxId$inboundSchema = z.union([z.string(), taxidformat_js_1.TaxIDFormat$inboundSchema]);
/** @internal */
exports.CustomerUpdateTaxId$outboundSchema = z.union([z.string(), taxidformat_js_1.TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerUpdateTaxId$;
(function (CustomerUpdateTaxId$) {
    /** @deprecated use `CustomerUpdateTaxId$inboundSchema` instead. */
    CustomerUpdateTaxId$.inboundSchema = exports.CustomerUpdateTaxId$inboundSchema;
    /** @deprecated use `CustomerUpdateTaxId$outboundSchema` instead. */
    CustomerUpdateTaxId$.outboundSchema = exports.CustomerUpdateTaxId$outboundSchema;
})(CustomerUpdateTaxId$ || (exports.CustomerUpdateTaxId$ = CustomerUpdateTaxId$ = {}));
function customerUpdateTaxIdToJSON(customerUpdateTaxId) {
    return JSON.stringify(exports.CustomerUpdateTaxId$outboundSchema.parse(customerUpdateTaxId));
}
function customerUpdateTaxIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerUpdateTaxId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdateTaxId' from JSON`);
}
/** @internal */
exports.CustomerUpdate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    email: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    billing_address: z.nullable(address_js_1.Address$inboundSchema).optional(),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), taxidformat_js_1.TaxIDFormat$inboundSchema])))).optional(),
    external_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "billing_address": "billingAddress",
        "tax_id": "taxId",
        "external_id": "externalId",
    });
});
/** @internal */
exports.CustomerUpdate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    email: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    billingAddress: z.nullable(address_js_1.Address$outboundSchema).optional(),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), taxidformat_js_1.TaxIDFormat$outboundSchema])))).optional(),
    externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        billingAddress: "billing_address",
        taxId: "tax_id",
        externalId: "external_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerUpdate$;
(function (CustomerUpdate$) {
    /** @deprecated use `CustomerUpdate$inboundSchema` instead. */
    CustomerUpdate$.inboundSchema = exports.CustomerUpdate$inboundSchema;
    /** @deprecated use `CustomerUpdate$outboundSchema` instead. */
    CustomerUpdate$.outboundSchema = exports.CustomerUpdate$outboundSchema;
})(CustomerUpdate$ || (exports.CustomerUpdate$ = CustomerUpdate$ = {}));
function customerUpdateToJSON(customerUpdate) {
    return JSON.stringify(exports.CustomerUpdate$outboundSchema.parse(customerUpdate));
}
function customerUpdateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdate' from JSON`);
}
//# sourceMappingURL=customerupdate.js.map