import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type MeterResetMetadata = {
    meterId: string;
};
/** @internal */
export declare const MeterResetMetadata$inboundSchema: z.ZodType<MeterResetMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type MeterResetMetadata$Outbound = {
    meter_id: string;
};
/** @internal */
export declare const MeterResetMetadata$outboundSchema: z.ZodType<MeterResetMetadata$Outbound, z.ZodTypeDef, MeterResetMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MeterResetMetadata$ {
    /** @deprecated use `MeterResetMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MeterResetMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `MeterResetMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MeterResetMetadata$Outbound, z.ZodTypeDef, MeterResetMetadata>;
    /** @deprecated use `MeterResetMetadata$Outbound` instead. */
    type Outbound = MeterResetMetadata$Outbound;
}
export declare function meterResetMetadataToJSON(meterResetMetadata: MeterResetMetadata): string;
export declare function meterResetMetadataFromJSON(jsonString: string): SafeParseResult<MeterResetMetadata, SDKValidationError>;
//# sourceMappingURL=meterresetmetadata.d.ts.map