import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
/**
 * Schema to update an order.
 */
export type OrderUpdate = {
    /**
     * The name of the customer that should appear on the invoice. Can't be updated after the invoice is generated.
     */
    billingName: string | null;
    /**
     * The address of the customer that should appear on the invoice. Can't be updated after the invoice is generated.
     */
    billingAddress: Address | null;
};
/** @internal */
export declare const OrderUpdate$inboundSchema: z.ZodType<OrderUpdate, z.ZodTypeDef, unknown>;
/** @internal */
export type OrderUpdate$Outbound = {
    billing_name: string | null;
    billing_address: Address$Outbound | null;
};
/** @internal */
export declare const OrderUpdate$outboundSchema: z.ZodType<OrderUpdate$Outbound, z.ZodTypeDef, OrderUpdate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OrderUpdate$ {
    /** @deprecated use `OrderUpdate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OrderUpdate, z.ZodTypeDef, unknown>;
    /** @deprecated use `OrderUpdate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OrderUpdate$Outbound, z.ZodTypeDef, OrderUpdate>;
    /** @deprecated use `OrderUpdate$Outbound` instead. */
    type Outbound = OrderUpdate$Outbound;
}
export declare function orderUpdateToJSON(orderUpdate: OrderUpdate): string;
export declare function orderUpdateFromJSON(jsonString: string): SafeParseResult<OrderUpdate, SDKValidationError>;
//# sourceMappingURL=orderupdate.d.ts.map