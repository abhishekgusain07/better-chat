import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SubscriptionRecurringInterval } from "./subscriptionrecurringinterval.js";
export type DiscountProductMetadata = string | number | number | boolean;
/**
 * A product that a discount can be applied to.
 */
export type DiscountProduct = {
    metadata: {
        [k: string]: string | number | number | boolean;
    };
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the product.
     */
    id: string;
    /**
     * The name of the product.
     */
    name: string;
    /**
     * The description of the product.
     */
    description: string | null;
    /**
     * The recurring interval of the product. If `None`, the product is a one-time purchase.
     */
    recurringInterval: SubscriptionRecurringInterval | null;
    /**
     * Whether the product is a subscription.
     */
    isRecurring: boolean;
    /**
     * Whether the product is archived and no longer available.
     */
    isArchived: boolean;
    /**
     * The ID of the organization owning the product.
     */
    organizationId: string;
};
/** @internal */
export declare const DiscountProductMetadata$inboundSchema: z.ZodType<DiscountProductMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type DiscountProductMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const DiscountProductMetadata$outboundSchema: z.ZodType<DiscountProductMetadata$Outbound, z.ZodTypeDef, DiscountProductMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DiscountProductMetadata$ {
    /** @deprecated use `DiscountProductMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DiscountProductMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `DiscountProductMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DiscountProductMetadata$Outbound, z.ZodTypeDef, DiscountProductMetadata>;
    /** @deprecated use `DiscountProductMetadata$Outbound` instead. */
    type Outbound = DiscountProductMetadata$Outbound;
}
export declare function discountProductMetadataToJSON(discountProductMetadata: DiscountProductMetadata): string;
export declare function discountProductMetadataFromJSON(jsonString: string): SafeParseResult<DiscountProductMetadata, SDKValidationError>;
/** @internal */
export declare const DiscountProduct$inboundSchema: z.ZodType<DiscountProduct, z.ZodTypeDef, unknown>;
/** @internal */
export type DiscountProduct$Outbound = {
    metadata: {
        [k: string]: string | number | number | boolean;
    };
    created_at: string;
    modified_at: string | null;
    id: string;
    name: string;
    description: string | null;
    recurring_interval: string | null;
    is_recurring: boolean;
    is_archived: boolean;
    organization_id: string;
};
/** @internal */
export declare const DiscountProduct$outboundSchema: z.ZodType<DiscountProduct$Outbound, z.ZodTypeDef, DiscountProduct>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DiscountProduct$ {
    /** @deprecated use `DiscountProduct$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DiscountProduct, z.ZodTypeDef, unknown>;
    /** @deprecated use `DiscountProduct$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DiscountProduct$Outbound, z.ZodTypeDef, DiscountProduct>;
    /** @deprecated use `DiscountProduct$Outbound` instead. */
    type Outbound = DiscountProduct$Outbound;
}
export declare function discountProductToJSON(discountProduct: DiscountProduct): string;
export declare function discountProductFromJSON(jsonString: string): SafeParseResult<DiscountProduct, SDKValidationError>;
//# sourceMappingURL=discountproduct.d.ts.map