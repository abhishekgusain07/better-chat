"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckoutConfirmStripe$ = exports.CheckoutConfirmStripe$outboundSchema = exports.CheckoutConfirmStripe$inboundSchema = exports.CheckoutConfirmStripeCustomFieldData$ = exports.CheckoutConfirmStripeCustomFieldData$outboundSchema = exports.CheckoutConfirmStripeCustomFieldData$inboundSchema = void 0;
exports.checkoutConfirmStripeCustomFieldDataToJSON = checkoutConfirmStripeCustomFieldDataToJSON;
exports.checkoutConfirmStripeCustomFieldDataFromJSON = checkoutConfirmStripeCustomFieldDataFromJSON;
exports.checkoutConfirmStripeToJSON = checkoutConfirmStripeToJSON;
exports.checkoutConfirmStripeFromJSON = checkoutConfirmStripeFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const address_js_1 = require("./address.js");
/** @internal */
exports.CheckoutConfirmStripeCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
exports.CheckoutConfirmStripeCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutConfirmStripeCustomFieldData$;
(function (CheckoutConfirmStripeCustomFieldData$) {
    /** @deprecated use `CheckoutConfirmStripeCustomFieldData$inboundSchema` instead. */
    CheckoutConfirmStripeCustomFieldData$.inboundSchema = exports.CheckoutConfirmStripeCustomFieldData$inboundSchema;
    /** @deprecated use `CheckoutConfirmStripeCustomFieldData$outboundSchema` instead. */
    CheckoutConfirmStripeCustomFieldData$.outboundSchema = exports.CheckoutConfirmStripeCustomFieldData$outboundSchema;
})(CheckoutConfirmStripeCustomFieldData$ || (exports.CheckoutConfirmStripeCustomFieldData$ = CheckoutConfirmStripeCustomFieldData$ = {}));
function checkoutConfirmStripeCustomFieldDataToJSON(checkoutConfirmStripeCustomFieldData) {
    return JSON.stringify(exports.CheckoutConfirmStripeCustomFieldData$outboundSchema.parse(checkoutConfirmStripeCustomFieldData));
}
function checkoutConfirmStripeCustomFieldDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutConfirmStripeCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutConfirmStripeCustomFieldData' from JSON`);
}
/** @internal */
exports.CheckoutConfirmStripe$inboundSchema = z.object({
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    product_id: z.nullable(z.string()).optional(),
    product_price_id: z.nullable(z.string()).optional(),
    amount: z.nullable(z.number().int()).optional(),
    is_business_customer: z.nullable(z.boolean()).optional(),
    customer_name: z.nullable(z.string()).optional(),
    customer_email: z.nullable(z.string()).optional(),
    customer_billing_name: z.nullable(z.string()).optional(),
    customer_billing_address: z.nullable(address_js_1.Address$inboundSchema).optional(),
    customer_tax_id: z.nullable(z.string()).optional(),
    discount_code: z.nullable(z.string()).optional(),
    confirmation_token_id: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "custom_field_data": "customFieldData",
        "product_id": "productId",
        "product_price_id": "productPriceId",
        "is_business_customer": "isBusinessCustomer",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_billing_name": "customerBillingName",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "discount_code": "discountCode",
        "confirmation_token_id": "confirmationTokenId",
    });
});
/** @internal */
exports.CheckoutConfirmStripe$outboundSchema = z.object({
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    productId: z.nullable(z.string()).optional(),
    productPriceId: z.nullable(z.string()).optional(),
    amount: z.nullable(z.number().int()).optional(),
    isBusinessCustomer: z.nullable(z.boolean()).optional(),
    customerName: z.nullable(z.string()).optional(),
    customerEmail: z.nullable(z.string()).optional(),
    customerBillingName: z.nullable(z.string()).optional(),
    customerBillingAddress: z.nullable(address_js_1.Address$outboundSchema).optional(),
    customerTaxId: z.nullable(z.string()).optional(),
    discountCode: z.nullable(z.string()).optional(),
    confirmationTokenId: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        customFieldData: "custom_field_data",
        productId: "product_id",
        productPriceId: "product_price_id",
        isBusinessCustomer: "is_business_customer",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerBillingName: "customer_billing_name",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        discountCode: "discount_code",
        confirmationTokenId: "confirmation_token_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutConfirmStripe$;
(function (CheckoutConfirmStripe$) {
    /** @deprecated use `CheckoutConfirmStripe$inboundSchema` instead. */
    CheckoutConfirmStripe$.inboundSchema = exports.CheckoutConfirmStripe$inboundSchema;
    /** @deprecated use `CheckoutConfirmStripe$outboundSchema` instead. */
    CheckoutConfirmStripe$.outboundSchema = exports.CheckoutConfirmStripe$outboundSchema;
})(CheckoutConfirmStripe$ || (exports.CheckoutConfirmStripe$ = CheckoutConfirmStripe$ = {}));
function checkoutConfirmStripeToJSON(checkoutConfirmStripe) {
    return JSON.stringify(exports.CheckoutConfirmStripe$outboundSchema.parse(checkoutConfirmStripe));
}
function checkoutConfirmStripeFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutConfirmStripe$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutConfirmStripe' from JSON`);
}
//# sourceMappingURL=checkoutconfirmstripe.js.map