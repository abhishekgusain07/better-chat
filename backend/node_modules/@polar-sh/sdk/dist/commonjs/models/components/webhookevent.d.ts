import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * A webhook event.
 *
 * @remarks
 *
 * An event represent something that happened in the system
 * that should be sent to the webhook endpoint.
 *
 * It can be delivered multiple times until it's marked as succeeded,
 * each one creating a new delivery.
 */
export type WebhookEvent = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * Last HTTP code returned by the URL. `null` if no delviery has been attempted or if the endpoint was unreachable.
     */
    lastHttpCode?: number | null | undefined;
    /**
     * Whether this event was successfully delivered. `null` if no delivery has been attempted.
     */
    succeeded?: boolean | null | undefined;
    /**
     * The payload of the webhook event.
     */
    payload: string;
};
/** @internal */
export declare const WebhookEvent$inboundSchema: z.ZodType<WebhookEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookEvent$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    last_http_code?: number | null | undefined;
    succeeded?: boolean | null | undefined;
    payload: string;
};
/** @internal */
export declare const WebhookEvent$outboundSchema: z.ZodType<WebhookEvent$Outbound, z.ZodTypeDef, WebhookEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookEvent$ {
    /** @deprecated use `WebhookEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookEvent$Outbound, z.ZodTypeDef, WebhookEvent>;
    /** @deprecated use `WebhookEvent$Outbound` instead. */
    type Outbound = WebhookEvent$Outbound;
}
export declare function webhookEventToJSON(webhookEvent: WebhookEvent): string;
export declare function webhookEventFromJSON(jsonString: string): SafeParseResult<WebhookEvent, SDKValidationError>;
//# sourceMappingURL=webhookevent.d.ts.map