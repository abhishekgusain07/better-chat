import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { BenefitGrantMetadata, BenefitGrantMetadata$Outbound } from "./benefitgrantmetadata.js";
import { Customer, Customer$Outbound } from "./customer.js";
/**
 * An event created by Polar when a benefit is granted to a customer.
 */
export type BenefitGrantedEvent = {
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * The timestamp of the event.
     */
    timestamp: Date;
    /**
     * The ID of the organization owning the event.
     */
    organizationId: string;
    /**
     * ID of the customer in your Polar organization associated with the event.
     */
    customerId: string | null;
    /**
     * The customer associated with the event.
     */
    customer: Customer | null;
    /**
     * ID of the customer in your system associated with the event.
     */
    externalCustomerId: string | null;
    /**
     * The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API.
     */
    source: "system";
    /**
     * The name of the event.
     */
    name: "benefit.granted";
    metadata: BenefitGrantMetadata;
};
/** @internal */
export declare const BenefitGrantedEvent$inboundSchema: z.ZodType<BenefitGrantedEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitGrantedEvent$Outbound = {
    id: string;
    timestamp: string;
    organization_id: string;
    customer_id: string | null;
    customer: Customer$Outbound | null;
    external_customer_id: string | null;
    source: "system";
    name: "benefit.granted";
    metadata: BenefitGrantMetadata$Outbound;
};
/** @internal */
export declare const BenefitGrantedEvent$outboundSchema: z.ZodType<BenefitGrantedEvent$Outbound, z.ZodTypeDef, BenefitGrantedEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitGrantedEvent$ {
    /** @deprecated use `BenefitGrantedEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitGrantedEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitGrantedEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitGrantedEvent$Outbound, z.ZodTypeDef, BenefitGrantedEvent>;
    /** @deprecated use `BenefitGrantedEvent$Outbound` instead. */
    type Outbound = BenefitGrantedEvent$Outbound;
}
export declare function benefitGrantedEventToJSON(benefitGrantedEvent: BenefitGrantedEvent): string;
export declare function benefitGrantedEventFromJSON(jsonString: string): SafeParseResult<BenefitGrantedEvent, SDKValidationError>;
//# sourceMappingURL=benefitgrantedevent.d.ts.map