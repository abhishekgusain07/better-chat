"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductPriceMeteredUnit$ = exports.ProductPriceMeteredUnit$outboundSchema = exports.ProductPriceMeteredUnit$inboundSchema = void 0;
exports.productPriceMeteredUnitToJSON = productPriceMeteredUnitToJSON;
exports.productPriceMeteredUnitFromJSON = productPriceMeteredUnitFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const productpricemeter_js_1 = require("./productpricemeter.js");
const productpricetype_js_1 = require("./productpricetype.js");
const subscriptionrecurringinterval_js_1 = require("./subscriptionrecurringinterval.js");
/** @internal */
exports.ProductPriceMeteredUnit$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    amount_type: z.literal("metered_unit"),
    is_archived: z.boolean(),
    product_id: z.string(),
    type: productpricetype_js_1.ProductPriceType$inboundSchema,
    recurring_interval: z.nullable(subscriptionrecurringinterval_js_1.SubscriptionRecurringInterval$inboundSchema),
    price_currency: z.string(),
    unit_amount: z.string(),
    cap_amount: z.nullable(z.number().int()),
    meter_id: z.string(),
    meter: productpricemeter_js_1.ProductPriceMeter$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "amount_type": "amountType",
        "is_archived": "isArchived",
        "product_id": "productId",
        "recurring_interval": "recurringInterval",
        "price_currency": "priceCurrency",
        "unit_amount": "unitAmount",
        "cap_amount": "capAmount",
        "meter_id": "meterId",
    });
});
/** @internal */
exports.ProductPriceMeteredUnit$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    amountType: z.literal("metered_unit"),
    isArchived: z.boolean(),
    productId: z.string(),
    type: productpricetype_js_1.ProductPriceType$outboundSchema,
    recurringInterval: z.nullable(subscriptionrecurringinterval_js_1.SubscriptionRecurringInterval$outboundSchema),
    priceCurrency: z.string(),
    unitAmount: z.string(),
    capAmount: z.nullable(z.number().int()),
    meterId: z.string(),
    meter: productpricemeter_js_1.ProductPriceMeter$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        amountType: "amount_type",
        isArchived: "is_archived",
        productId: "product_id",
        recurringInterval: "recurring_interval",
        priceCurrency: "price_currency",
        unitAmount: "unit_amount",
        capAmount: "cap_amount",
        meterId: "meter_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ProductPriceMeteredUnit$;
(function (ProductPriceMeteredUnit$) {
    /** @deprecated use `ProductPriceMeteredUnit$inboundSchema` instead. */
    ProductPriceMeteredUnit$.inboundSchema = exports.ProductPriceMeteredUnit$inboundSchema;
    /** @deprecated use `ProductPriceMeteredUnit$outboundSchema` instead. */
    ProductPriceMeteredUnit$.outboundSchema = exports.ProductPriceMeteredUnit$outboundSchema;
})(ProductPriceMeteredUnit$ || (exports.ProductPriceMeteredUnit$ = ProductPriceMeteredUnit$ = {}));
function productPriceMeteredUnitToJSON(productPriceMeteredUnit) {
    return JSON.stringify(exports.ProductPriceMeteredUnit$outboundSchema.parse(productPriceMeteredUnit));
}
function productPriceMeteredUnitFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ProductPriceMeteredUnit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductPriceMeteredUnit' from JSON`);
}
//# sourceMappingURL=productpricemeteredunit.js.map