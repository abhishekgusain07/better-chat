"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckoutPublicConfirmed$ = exports.CheckoutPublicConfirmed$outboundSchema = exports.CheckoutPublicConfirmed$inboundSchema = exports.CheckoutPublicConfirmedDiscount$ = exports.CheckoutPublicConfirmedDiscount$outboundSchema = exports.CheckoutPublicConfirmedDiscount$inboundSchema = exports.CheckoutPublicConfirmedProductPrice$ = exports.CheckoutPublicConfirmedProductPrice$outboundSchema = exports.CheckoutPublicConfirmedProductPrice$inboundSchema = exports.CheckoutPublicConfirmedCustomFieldData$ = exports.CheckoutPublicConfirmedCustomFieldData$outboundSchema = exports.CheckoutPublicConfirmedCustomFieldData$inboundSchema = void 0;
exports.checkoutPublicConfirmedCustomFieldDataToJSON = checkoutPublicConfirmedCustomFieldDataToJSON;
exports.checkoutPublicConfirmedCustomFieldDataFromJSON = checkoutPublicConfirmedCustomFieldDataFromJSON;
exports.checkoutPublicConfirmedProductPriceToJSON = checkoutPublicConfirmedProductPriceToJSON;
exports.checkoutPublicConfirmedProductPriceFromJSON = checkoutPublicConfirmedProductPriceFromJSON;
exports.checkoutPublicConfirmedDiscountToJSON = checkoutPublicConfirmedDiscountToJSON;
exports.checkoutPublicConfirmedDiscountFromJSON = checkoutPublicConfirmedDiscountFromJSON;
exports.checkoutPublicConfirmedToJSON = checkoutPublicConfirmedToJSON;
exports.checkoutPublicConfirmedFromJSON = checkoutPublicConfirmedFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const address_js_1 = require("./address.js");
const attachedcustomfield_js_1 = require("./attachedcustomfield.js");
const checkoutbillingaddressfields_js_1 = require("./checkoutbillingaddressfields.js");
const checkoutdiscountfixedonceforeverduration_js_1 = require("./checkoutdiscountfixedonceforeverduration.js");
const checkoutdiscountfixedrepeatduration_js_1 = require("./checkoutdiscountfixedrepeatduration.js");
const checkoutdiscountpercentageonceforeverduration_js_1 = require("./checkoutdiscountpercentageonceforeverduration.js");
const checkoutdiscountpercentagerepeatduration_js_1 = require("./checkoutdiscountpercentagerepeatduration.js");
const checkoutproduct_js_1 = require("./checkoutproduct.js");
const legacyrecurringproductprice_js_1 = require("./legacyrecurringproductprice.js");
const organization_js_1 = require("./organization.js");
const paymentprocessor_js_1 = require("./paymentprocessor.js");
const productprice_js_1 = require("./productprice.js");
/** @internal */
exports.CheckoutPublicConfirmedCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
exports.CheckoutPublicConfirmedCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutPublicConfirmedCustomFieldData$;
(function (CheckoutPublicConfirmedCustomFieldData$) {
    /** @deprecated use `CheckoutPublicConfirmedCustomFieldData$inboundSchema` instead. */
    CheckoutPublicConfirmedCustomFieldData$.inboundSchema = exports.CheckoutPublicConfirmedCustomFieldData$inboundSchema;
    /** @deprecated use `CheckoutPublicConfirmedCustomFieldData$outboundSchema` instead. */
    CheckoutPublicConfirmedCustomFieldData$.outboundSchema = exports.CheckoutPublicConfirmedCustomFieldData$outboundSchema;
})(CheckoutPublicConfirmedCustomFieldData$ || (exports.CheckoutPublicConfirmedCustomFieldData$ = CheckoutPublicConfirmedCustomFieldData$ = {}));
function checkoutPublicConfirmedCustomFieldDataToJSON(checkoutPublicConfirmedCustomFieldData) {
    return JSON.stringify(exports.CheckoutPublicConfirmedCustomFieldData$outboundSchema.parse(checkoutPublicConfirmedCustomFieldData));
}
function checkoutPublicConfirmedCustomFieldDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutPublicConfirmedCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutPublicConfirmedCustomFieldData' from JSON`);
}
/** @internal */
exports.CheckoutPublicConfirmedProductPrice$inboundSchema = z.union([
    legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$inboundSchema,
    productprice_js_1.ProductPrice$inboundSchema,
]);
/** @internal */
exports.CheckoutPublicConfirmedProductPrice$outboundSchema = z.union([
    legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$outboundSchema,
    productprice_js_1.ProductPrice$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutPublicConfirmedProductPrice$;
(function (CheckoutPublicConfirmedProductPrice$) {
    /** @deprecated use `CheckoutPublicConfirmedProductPrice$inboundSchema` instead. */
    CheckoutPublicConfirmedProductPrice$.inboundSchema = exports.CheckoutPublicConfirmedProductPrice$inboundSchema;
    /** @deprecated use `CheckoutPublicConfirmedProductPrice$outboundSchema` instead. */
    CheckoutPublicConfirmedProductPrice$.outboundSchema = exports.CheckoutPublicConfirmedProductPrice$outboundSchema;
})(CheckoutPublicConfirmedProductPrice$ || (exports.CheckoutPublicConfirmedProductPrice$ = CheckoutPublicConfirmedProductPrice$ = {}));
function checkoutPublicConfirmedProductPriceToJSON(checkoutPublicConfirmedProductPrice) {
    return JSON.stringify(exports.CheckoutPublicConfirmedProductPrice$outboundSchema.parse(checkoutPublicConfirmedProductPrice));
}
function checkoutPublicConfirmedProductPriceFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutPublicConfirmedProductPrice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutPublicConfirmedProductPrice' from JSON`);
}
/** @internal */
exports.CheckoutPublicConfirmedDiscount$inboundSchema = z.union([
    checkoutdiscountfixedrepeatduration_js_1.CheckoutDiscountFixedRepeatDuration$inboundSchema,
    checkoutdiscountfixedonceforeverduration_js_1.CheckoutDiscountFixedOnceForeverDuration$inboundSchema,
    checkoutdiscountpercentagerepeatduration_js_1.CheckoutDiscountPercentageRepeatDuration$inboundSchema,
    checkoutdiscountpercentageonceforeverduration_js_1.CheckoutDiscountPercentageOnceForeverDuration$inboundSchema,
]);
/** @internal */
exports.CheckoutPublicConfirmedDiscount$outboundSchema = z.union([
    checkoutdiscountfixedrepeatduration_js_1.CheckoutDiscountFixedRepeatDuration$outboundSchema,
    checkoutdiscountfixedonceforeverduration_js_1.CheckoutDiscountFixedOnceForeverDuration$outboundSchema,
    checkoutdiscountpercentagerepeatduration_js_1.CheckoutDiscountPercentageRepeatDuration$outboundSchema,
    checkoutdiscountpercentageonceforeverduration_js_1.CheckoutDiscountPercentageOnceForeverDuration$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutPublicConfirmedDiscount$;
(function (CheckoutPublicConfirmedDiscount$) {
    /** @deprecated use `CheckoutPublicConfirmedDiscount$inboundSchema` instead. */
    CheckoutPublicConfirmedDiscount$.inboundSchema = exports.CheckoutPublicConfirmedDiscount$inboundSchema;
    /** @deprecated use `CheckoutPublicConfirmedDiscount$outboundSchema` instead. */
    CheckoutPublicConfirmedDiscount$.outboundSchema = exports.CheckoutPublicConfirmedDiscount$outboundSchema;
})(CheckoutPublicConfirmedDiscount$ || (exports.CheckoutPublicConfirmedDiscount$ = CheckoutPublicConfirmedDiscount$ = {}));
function checkoutPublicConfirmedDiscountToJSON(checkoutPublicConfirmedDiscount) {
    return JSON.stringify(exports.CheckoutPublicConfirmedDiscount$outboundSchema.parse(checkoutPublicConfirmedDiscount));
}
function checkoutPublicConfirmedDiscountFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutPublicConfirmedDiscount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutPublicConfirmedDiscount' from JSON`);
}
/** @internal */
exports.CheckoutPublicConfirmed$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    payment_processor: paymentprocessor_js_1.PaymentProcessor$inboundSchema,
    status: z.literal("confirmed"),
    client_secret: z.string(),
    url: z.string(),
    expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    success_url: z.string(),
    embed_origin: z.nullable(z.string()),
    amount: z.number().int(),
    discount_amount: z.number().int(),
    net_amount: z.number().int(),
    tax_amount: z.nullable(z.number().int()),
    total_amount: z.number().int(),
    currency: z.string(),
    product_id: z.string(),
    product_price_id: z.string(),
    discount_id: z.nullable(z.string()),
    allow_discount_codes: z.boolean(),
    require_billing_address: z.boolean(),
    is_discount_applicable: z.boolean(),
    is_free_product_price: z.boolean(),
    is_payment_required: z.boolean(),
    is_payment_setup_required: z.boolean(),
    is_payment_form_required: z.boolean(),
    customer_id: z.nullable(z.string()),
    is_business_customer: z.boolean(),
    customer_name: z.nullable(z.string()),
    customer_email: z.nullable(z.string()),
    customer_ip_address: z.nullable(z.string()),
    customer_billing_name: z.nullable(z.string()),
    customer_billing_address: z.nullable(address_js_1.Address$inboundSchema),
    customer_tax_id: z.nullable(z.string()),
    payment_processor_metadata: z.record(z.string()),
    billing_address_fields: checkoutbillingaddressfields_js_1.CheckoutBillingAddressFields$inboundSchema,
    products: z.array(checkoutproduct_js_1.CheckoutProduct$inboundSchema),
    product: checkoutproduct_js_1.CheckoutProduct$inboundSchema,
    product_price: z.union([
        legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$inboundSchema,
        productprice_js_1.ProductPrice$inboundSchema,
    ]),
    discount: z.nullable(z.union([
        checkoutdiscountfixedrepeatduration_js_1.CheckoutDiscountFixedRepeatDuration$inboundSchema,
        checkoutdiscountfixedonceforeverduration_js_1.CheckoutDiscountFixedOnceForeverDuration$inboundSchema,
        checkoutdiscountpercentagerepeatduration_js_1.CheckoutDiscountPercentageRepeatDuration$inboundSchema,
        checkoutdiscountpercentageonceforeverduration_js_1.CheckoutDiscountPercentageOnceForeverDuration$inboundSchema,
    ])),
    organization: organization_js_1.Organization$inboundSchema,
    attached_custom_fields: z.array(attachedcustomfield_js_1.AttachedCustomField$inboundSchema),
    customer_session_token: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "custom_field_data": "customFieldData",
        "payment_processor": "paymentProcessor",
        "client_secret": "clientSecret",
        "expires_at": "expiresAt",
        "success_url": "successUrl",
        "embed_origin": "embedOrigin",
        "discount_amount": "discountAmount",
        "net_amount": "netAmount",
        "tax_amount": "taxAmount",
        "total_amount": "totalAmount",
        "product_id": "productId",
        "product_price_id": "productPriceId",
        "discount_id": "discountId",
        "allow_discount_codes": "allowDiscountCodes",
        "require_billing_address": "requireBillingAddress",
        "is_discount_applicable": "isDiscountApplicable",
        "is_free_product_price": "isFreeProductPrice",
        "is_payment_required": "isPaymentRequired",
        "is_payment_setup_required": "isPaymentSetupRequired",
        "is_payment_form_required": "isPaymentFormRequired",
        "customer_id": "customerId",
        "is_business_customer": "isBusinessCustomer",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_ip_address": "customerIpAddress",
        "customer_billing_name": "customerBillingName",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "payment_processor_metadata": "paymentProcessorMetadata",
        "billing_address_fields": "billingAddressFields",
        "product_price": "productPrice",
        "attached_custom_fields": "attachedCustomFields",
        "customer_session_token": "customerSessionToken",
    });
});
/** @internal */
exports.CheckoutPublicConfirmed$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    paymentProcessor: paymentprocessor_js_1.PaymentProcessor$outboundSchema,
    status: z.literal("confirmed"),
    clientSecret: z.string(),
    url: z.string(),
    expiresAt: z.date().transform(v => v.toISOString()),
    successUrl: z.string(),
    embedOrigin: z.nullable(z.string()),
    amount: z.number().int(),
    discountAmount: z.number().int(),
    netAmount: z.number().int(),
    taxAmount: z.nullable(z.number().int()),
    totalAmount: z.number().int(),
    currency: z.string(),
    productId: z.string(),
    productPriceId: z.string(),
    discountId: z.nullable(z.string()),
    allowDiscountCodes: z.boolean(),
    requireBillingAddress: z.boolean(),
    isDiscountApplicable: z.boolean(),
    isFreeProductPrice: z.boolean(),
    isPaymentRequired: z.boolean(),
    isPaymentSetupRequired: z.boolean(),
    isPaymentFormRequired: z.boolean(),
    customerId: z.nullable(z.string()),
    isBusinessCustomer: z.boolean(),
    customerName: z.nullable(z.string()),
    customerEmail: z.nullable(z.string()),
    customerIpAddress: z.nullable(z.string()),
    customerBillingName: z.nullable(z.string()),
    customerBillingAddress: z.nullable(address_js_1.Address$outboundSchema),
    customerTaxId: z.nullable(z.string()),
    paymentProcessorMetadata: z.record(z.string()),
    billingAddressFields: checkoutbillingaddressfields_js_1.CheckoutBillingAddressFields$outboundSchema,
    products: z.array(checkoutproduct_js_1.CheckoutProduct$outboundSchema),
    product: checkoutproduct_js_1.CheckoutProduct$outboundSchema,
    productPrice: z.union([
        legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$outboundSchema,
        productprice_js_1.ProductPrice$outboundSchema,
    ]),
    discount: z.nullable(z.union([
        checkoutdiscountfixedrepeatduration_js_1.CheckoutDiscountFixedRepeatDuration$outboundSchema,
        checkoutdiscountfixedonceforeverduration_js_1.CheckoutDiscountFixedOnceForeverDuration$outboundSchema,
        checkoutdiscountpercentagerepeatduration_js_1.CheckoutDiscountPercentageRepeatDuration$outboundSchema,
        checkoutdiscountpercentageonceforeverduration_js_1.CheckoutDiscountPercentageOnceForeverDuration$outboundSchema,
    ])),
    organization: organization_js_1.Organization$outboundSchema,
    attachedCustomFields: z.array(attachedcustomfield_js_1.AttachedCustomField$outboundSchema),
    customerSessionToken: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        customFieldData: "custom_field_data",
        paymentProcessor: "payment_processor",
        clientSecret: "client_secret",
        expiresAt: "expires_at",
        successUrl: "success_url",
        embedOrigin: "embed_origin",
        discountAmount: "discount_amount",
        netAmount: "net_amount",
        taxAmount: "tax_amount",
        totalAmount: "total_amount",
        productId: "product_id",
        productPriceId: "product_price_id",
        discountId: "discount_id",
        allowDiscountCodes: "allow_discount_codes",
        requireBillingAddress: "require_billing_address",
        isDiscountApplicable: "is_discount_applicable",
        isFreeProductPrice: "is_free_product_price",
        isPaymentRequired: "is_payment_required",
        isPaymentSetupRequired: "is_payment_setup_required",
        isPaymentFormRequired: "is_payment_form_required",
        customerId: "customer_id",
        isBusinessCustomer: "is_business_customer",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerIpAddress: "customer_ip_address",
        customerBillingName: "customer_billing_name",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        paymentProcessorMetadata: "payment_processor_metadata",
        billingAddressFields: "billing_address_fields",
        productPrice: "product_price",
        attachedCustomFields: "attached_custom_fields",
        customerSessionToken: "customer_session_token",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutPublicConfirmed$;
(function (CheckoutPublicConfirmed$) {
    /** @deprecated use `CheckoutPublicConfirmed$inboundSchema` instead. */
    CheckoutPublicConfirmed$.inboundSchema = exports.CheckoutPublicConfirmed$inboundSchema;
    /** @deprecated use `CheckoutPublicConfirmed$outboundSchema` instead. */
    CheckoutPublicConfirmed$.outboundSchema = exports.CheckoutPublicConfirmed$outboundSchema;
})(CheckoutPublicConfirmed$ || (exports.CheckoutPublicConfirmed$ = CheckoutPublicConfirmed$ = {}));
function checkoutPublicConfirmedToJSON(checkoutPublicConfirmed) {
    return JSON.stringify(exports.CheckoutPublicConfirmed$outboundSchema.parse(checkoutPublicConfirmed));
}
function checkoutPublicConfirmedFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutPublicConfirmed$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutPublicConfirmed' from JSON`);
}
//# sourceMappingURL=checkoutpublicconfirmed.js.map