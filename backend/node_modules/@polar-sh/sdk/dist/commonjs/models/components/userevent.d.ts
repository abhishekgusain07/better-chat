import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Customer, Customer$Outbound } from "./customer.js";
export type UserEventMetadata = string | number | number | boolean;
/**
 * An event you created through the ingestion API.
 */
export type UserEvent = {
    metadata: {
        [k: string]: string | number | number | boolean;
    };
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * The timestamp of the event.
     */
    timestamp: Date;
    /**
     * The ID of the organization owning the event.
     */
    organizationId: string;
    /**
     * ID of the customer in your Polar organization associated with the event.
     */
    customerId: string | null;
    /**
     * The customer associated with the event.
     */
    customer: Customer | null;
    /**
     * ID of the customer in your system associated with the event.
     */
    externalCustomerId: string | null;
    /**
     * The name of the event.
     */
    name: string;
    /**
     * The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API.
     */
    source: "user";
};
/** @internal */
export declare const UserEventMetadata$inboundSchema: z.ZodType<UserEventMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEventMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const UserEventMetadata$outboundSchema: z.ZodType<UserEventMetadata$Outbound, z.ZodTypeDef, UserEventMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEventMetadata$ {
    /** @deprecated use `UserEventMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEventMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEventMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEventMetadata$Outbound, z.ZodTypeDef, UserEventMetadata>;
    /** @deprecated use `UserEventMetadata$Outbound` instead. */
    type Outbound = UserEventMetadata$Outbound;
}
export declare function userEventMetadataToJSON(userEventMetadata: UserEventMetadata): string;
export declare function userEventMetadataFromJSON(jsonString: string): SafeParseResult<UserEventMetadata, SDKValidationError>;
/** @internal */
export declare const UserEvent$inboundSchema: z.ZodType<UserEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type UserEvent$Outbound = {
    metadata: {
        [k: string]: string | number | number | boolean;
    };
    id: string;
    timestamp: string;
    organization_id: string;
    customer_id: string | null;
    customer: Customer$Outbound | null;
    external_customer_id: string | null;
    name: string;
    source: "user";
};
/** @internal */
export declare const UserEvent$outboundSchema: z.ZodType<UserEvent$Outbound, z.ZodTypeDef, UserEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserEvent$ {
    /** @deprecated use `UserEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserEvent$Outbound, z.ZodTypeDef, UserEvent>;
    /** @deprecated use `UserEvent$Outbound` instead. */
    type Outbound = UserEvent$Outbound;
}
export declare function userEventToJSON(userEvent: UserEvent): string;
export declare function userEventFromJSON(jsonString: string): SafeParseResult<UserEvent, SDKValidationError>;
//# sourceMappingURL=userevent.d.ts.map