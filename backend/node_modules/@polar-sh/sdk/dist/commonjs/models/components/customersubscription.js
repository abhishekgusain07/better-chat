"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerSubscription$ = exports.CustomerSubscription$outboundSchema = exports.CustomerSubscription$inboundSchema = exports.CustomerSubscriptionPrices$ = exports.CustomerSubscriptionPrices$outboundSchema = exports.CustomerSubscriptionPrices$inboundSchema = void 0;
exports.customerSubscriptionPricesToJSON = customerSubscriptionPricesToJSON;
exports.customerSubscriptionPricesFromJSON = customerSubscriptionPricesFromJSON;
exports.customerSubscriptionToJSON = customerSubscriptionToJSON;
exports.customerSubscriptionFromJSON = customerSubscriptionFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customercancellationreason_js_1 = require("./customercancellationreason.js");
const customersubscriptionmeter_js_1 = require("./customersubscriptionmeter.js");
const customersubscriptionproduct_js_1 = require("./customersubscriptionproduct.js");
const legacyrecurringproductprice_js_1 = require("./legacyrecurringproductprice.js");
const productprice_js_1 = require("./productprice.js");
const subscriptionrecurringinterval_js_1 = require("./subscriptionrecurringinterval.js");
const subscriptionstatus_js_1 = require("./subscriptionstatus.js");
/** @internal */
exports.CustomerSubscriptionPrices$inboundSchema = z.union([
    legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$inboundSchema,
    productprice_js_1.ProductPrice$inboundSchema,
]);
/** @internal */
exports.CustomerSubscriptionPrices$outboundSchema = z.union([
    legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$outboundSchema,
    productprice_js_1.ProductPrice$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerSubscriptionPrices$;
(function (CustomerSubscriptionPrices$) {
    /** @deprecated use `CustomerSubscriptionPrices$inboundSchema` instead. */
    CustomerSubscriptionPrices$.inboundSchema = exports.CustomerSubscriptionPrices$inboundSchema;
    /** @deprecated use `CustomerSubscriptionPrices$outboundSchema` instead. */
    CustomerSubscriptionPrices$.outboundSchema = exports.CustomerSubscriptionPrices$outboundSchema;
})(CustomerSubscriptionPrices$ || (exports.CustomerSubscriptionPrices$ = CustomerSubscriptionPrices$ = {}));
function customerSubscriptionPricesToJSON(customerSubscriptionPrices) {
    return JSON.stringify(exports.CustomerSubscriptionPrices$outboundSchema.parse(customerSubscriptionPrices));
}
function customerSubscriptionPricesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerSubscriptionPrices$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerSubscriptionPrices' from JSON`);
}
/** @internal */
exports.CustomerSubscription$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    amount: z.number().int(),
    currency: z.string(),
    recurring_interval: subscriptionrecurringinterval_js_1.SubscriptionRecurringInterval$inboundSchema,
    status: subscriptionstatus_js_1.SubscriptionStatus$inboundSchema,
    current_period_start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    current_period_end: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    cancel_at_period_end: z.boolean(),
    canceled_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    started_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ends_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ended_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    customer_id: z.string(),
    product_id: z.string(),
    discount_id: z.nullable(z.string()),
    checkout_id: z.nullable(z.string()),
    customer_cancellation_reason: z.nullable(customercancellationreason_js_1.CustomerCancellationReason$inboundSchema),
    customer_cancellation_comment: z.nullable(z.string()),
    product: customersubscriptionproduct_js_1.CustomerSubscriptionProduct$inboundSchema,
    prices: z.array(z.union([
        legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$inboundSchema,
        productprice_js_1.ProductPrice$inboundSchema,
    ])),
    meters: z.array(customersubscriptionmeter_js_1.CustomerSubscriptionMeter$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "recurring_interval": "recurringInterval",
        "current_period_start": "currentPeriodStart",
        "current_period_end": "currentPeriodEnd",
        "cancel_at_period_end": "cancelAtPeriodEnd",
        "canceled_at": "canceledAt",
        "started_at": "startedAt",
        "ends_at": "endsAt",
        "ended_at": "endedAt",
        "customer_id": "customerId",
        "product_id": "productId",
        "discount_id": "discountId",
        "checkout_id": "checkoutId",
        "customer_cancellation_reason": "customerCancellationReason",
        "customer_cancellation_comment": "customerCancellationComment",
    });
});
/** @internal */
exports.CustomerSubscription$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    amount: z.number().int(),
    currency: z.string(),
    recurringInterval: subscriptionrecurringinterval_js_1.SubscriptionRecurringInterval$outboundSchema,
    status: subscriptionstatus_js_1.SubscriptionStatus$outboundSchema,
    currentPeriodStart: z.date().transform(v => v.toISOString()),
    currentPeriodEnd: z.nullable(z.date().transform(v => v.toISOString())),
    cancelAtPeriodEnd: z.boolean(),
    canceledAt: z.nullable(z.date().transform(v => v.toISOString())),
    startedAt: z.nullable(z.date().transform(v => v.toISOString())),
    endsAt: z.nullable(z.date().transform(v => v.toISOString())),
    endedAt: z.nullable(z.date().transform(v => v.toISOString())),
    customerId: z.string(),
    productId: z.string(),
    discountId: z.nullable(z.string()),
    checkoutId: z.nullable(z.string()),
    customerCancellationReason: z.nullable(customercancellationreason_js_1.CustomerCancellationReason$outboundSchema),
    customerCancellationComment: z.nullable(z.string()),
    product: customersubscriptionproduct_js_1.CustomerSubscriptionProduct$outboundSchema,
    prices: z.array(z.union([
        legacyrecurringproductprice_js_1.LegacyRecurringProductPrice$outboundSchema,
        productprice_js_1.ProductPrice$outboundSchema,
    ])),
    meters: z.array(customersubscriptionmeter_js_1.CustomerSubscriptionMeter$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        recurringInterval: "recurring_interval",
        currentPeriodStart: "current_period_start",
        currentPeriodEnd: "current_period_end",
        cancelAtPeriodEnd: "cancel_at_period_end",
        canceledAt: "canceled_at",
        startedAt: "started_at",
        endsAt: "ends_at",
        endedAt: "ended_at",
        customerId: "customer_id",
        productId: "product_id",
        discountId: "discount_id",
        checkoutId: "checkout_id",
        customerCancellationReason: "customer_cancellation_reason",
        customerCancellationComment: "customer_cancellation_comment",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerSubscription$;
(function (CustomerSubscription$) {
    /** @deprecated use `CustomerSubscription$inboundSchema` instead. */
    CustomerSubscription$.inboundSchema = exports.CustomerSubscription$inboundSchema;
    /** @deprecated use `CustomerSubscription$outboundSchema` instead. */
    CustomerSubscription$.outboundSchema = exports.CustomerSubscription$outboundSchema;
})(CustomerSubscription$ || (exports.CustomerSubscription$ = CustomerSubscription$ = {}));
function customerSubscriptionToJSON(customerSubscription) {
    return JSON.stringify(exports.CustomerSubscription$outboundSchema.parse(customerSubscription));
}
function customerSubscriptionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerSubscription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerSubscription' from JSON`);
}
//# sourceMappingURL=customersubscription.js.map