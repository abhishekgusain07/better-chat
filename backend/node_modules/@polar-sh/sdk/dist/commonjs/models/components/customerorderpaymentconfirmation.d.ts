import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Response after confirming a retry payment.
 */
export type CustomerOrderPaymentConfirmation = {
    /**
     * Payment status after confirmation.
     */
    status: string;
    /**
     * Client secret for handling additional actions.
     */
    clientSecret?: string | null | undefined;
    /**
     * Error message if confirmation failed.
     */
    error?: string | null | undefined;
};
/** @internal */
export declare const CustomerOrderPaymentConfirmation$inboundSchema: z.ZodType<CustomerOrderPaymentConfirmation, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerOrderPaymentConfirmation$Outbound = {
    status: string;
    client_secret?: string | null | undefined;
    error?: string | null | undefined;
};
/** @internal */
export declare const CustomerOrderPaymentConfirmation$outboundSchema: z.ZodType<CustomerOrderPaymentConfirmation$Outbound, z.ZodTypeDef, CustomerOrderPaymentConfirmation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerOrderPaymentConfirmation$ {
    /** @deprecated use `CustomerOrderPaymentConfirmation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerOrderPaymentConfirmation, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerOrderPaymentConfirmation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerOrderPaymentConfirmation$Outbound, z.ZodTypeDef, CustomerOrderPaymentConfirmation>;
    /** @deprecated use `CustomerOrderPaymentConfirmation$Outbound` instead. */
    type Outbound = CustomerOrderPaymentConfirmation$Outbound;
}
export declare function customerOrderPaymentConfirmationToJSON(customerOrderPaymentConfirmation: CustomerOrderPaymentConfirmation): string;
export declare function customerOrderPaymentConfirmationFromJSON(jsonString: string): SafeParseResult<CustomerOrderPaymentConfirmation, SDKValidationError>;
//# sourceMappingURL=customerorderpaymentconfirmation.d.ts.map