"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerUpdateExternalID$ = exports.CustomerUpdateExternalID$outboundSchema = exports.CustomerUpdateExternalID$inboundSchema = exports.CustomerUpdateExternalIDTaxID$ = exports.CustomerUpdateExternalIDTaxID$outboundSchema = exports.CustomerUpdateExternalIDTaxID$inboundSchema = exports.CustomerUpdateExternalIDMetadata$ = exports.CustomerUpdateExternalIDMetadata$outboundSchema = exports.CustomerUpdateExternalIDMetadata$inboundSchema = void 0;
exports.customerUpdateExternalIDMetadataToJSON = customerUpdateExternalIDMetadataToJSON;
exports.customerUpdateExternalIDMetadataFromJSON = customerUpdateExternalIDMetadataFromJSON;
exports.customerUpdateExternalIDTaxIDToJSON = customerUpdateExternalIDTaxIDToJSON;
exports.customerUpdateExternalIDTaxIDFromJSON = customerUpdateExternalIDTaxIDFromJSON;
exports.customerUpdateExternalIDToJSON = customerUpdateExternalIDToJSON;
exports.customerUpdateExternalIDFromJSON = customerUpdateExternalIDFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const address_js_1 = require("./address.js");
const taxidformat_js_1 = require("./taxidformat.js");
/** @internal */
exports.CustomerUpdateExternalIDMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
exports.CustomerUpdateExternalIDMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerUpdateExternalIDMetadata$;
(function (CustomerUpdateExternalIDMetadata$) {
    /** @deprecated use `CustomerUpdateExternalIDMetadata$inboundSchema` instead. */
    CustomerUpdateExternalIDMetadata$.inboundSchema = exports.CustomerUpdateExternalIDMetadata$inboundSchema;
    /** @deprecated use `CustomerUpdateExternalIDMetadata$outboundSchema` instead. */
    CustomerUpdateExternalIDMetadata$.outboundSchema = exports.CustomerUpdateExternalIDMetadata$outboundSchema;
})(CustomerUpdateExternalIDMetadata$ || (exports.CustomerUpdateExternalIDMetadata$ = CustomerUpdateExternalIDMetadata$ = {}));
function customerUpdateExternalIDMetadataToJSON(customerUpdateExternalIDMetadata) {
    return JSON.stringify(exports.CustomerUpdateExternalIDMetadata$outboundSchema.parse(customerUpdateExternalIDMetadata));
}
function customerUpdateExternalIDMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerUpdateExternalIDMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdateExternalIDMetadata' from JSON`);
}
/** @internal */
exports.CustomerUpdateExternalIDTaxID$inboundSchema = z.union([z.string(), taxidformat_js_1.TaxIDFormat$inboundSchema]);
/** @internal */
exports.CustomerUpdateExternalIDTaxID$outboundSchema = z.union([z.string(), taxidformat_js_1.TaxIDFormat$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerUpdateExternalIDTaxID$;
(function (CustomerUpdateExternalIDTaxID$) {
    /** @deprecated use `CustomerUpdateExternalIDTaxID$inboundSchema` instead. */
    CustomerUpdateExternalIDTaxID$.inboundSchema = exports.CustomerUpdateExternalIDTaxID$inboundSchema;
    /** @deprecated use `CustomerUpdateExternalIDTaxID$outboundSchema` instead. */
    CustomerUpdateExternalIDTaxID$.outboundSchema = exports.CustomerUpdateExternalIDTaxID$outboundSchema;
})(CustomerUpdateExternalIDTaxID$ || (exports.CustomerUpdateExternalIDTaxID$ = CustomerUpdateExternalIDTaxID$ = {}));
function customerUpdateExternalIDTaxIDToJSON(customerUpdateExternalIDTaxID) {
    return JSON.stringify(exports.CustomerUpdateExternalIDTaxID$outboundSchema.parse(customerUpdateExternalIDTaxID));
}
function customerUpdateExternalIDTaxIDFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerUpdateExternalIDTaxID$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdateExternalIDTaxID' from JSON`);
}
/** @internal */
exports.CustomerUpdateExternalID$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    email: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    billing_address: z.nullable(address_js_1.Address$inboundSchema).optional(),
    tax_id: z.nullable(z.array(z.nullable(z.union([z.string(), taxidformat_js_1.TaxIDFormat$inboundSchema])))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "billing_address": "billingAddress",
        "tax_id": "taxId",
    });
});
/** @internal */
exports.CustomerUpdateExternalID$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    email: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    billingAddress: z.nullable(address_js_1.Address$outboundSchema).optional(),
    taxId: z.nullable(z.array(z.nullable(z.union([z.string(), taxidformat_js_1.TaxIDFormat$outboundSchema])))).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        billingAddress: "billing_address",
        taxId: "tax_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomerUpdateExternalID$;
(function (CustomerUpdateExternalID$) {
    /** @deprecated use `CustomerUpdateExternalID$inboundSchema` instead. */
    CustomerUpdateExternalID$.inboundSchema = exports.CustomerUpdateExternalID$inboundSchema;
    /** @deprecated use `CustomerUpdateExternalID$outboundSchema` instead. */
    CustomerUpdateExternalID$.outboundSchema = exports.CustomerUpdateExternalID$outboundSchema;
})(CustomerUpdateExternalID$ || (exports.CustomerUpdateExternalID$ = CustomerUpdateExternalID$ = {}));
function customerUpdateExternalIDToJSON(customerUpdateExternalID) {
    return JSON.stringify(exports.CustomerUpdateExternalID$outboundSchema.parse(customerUpdateExternalID));
}
function customerUpdateExternalIDFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomerUpdateExternalID$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerUpdateExternalID' from JSON`);
}
//# sourceMappingURL=customerupdateexternalid.js.map