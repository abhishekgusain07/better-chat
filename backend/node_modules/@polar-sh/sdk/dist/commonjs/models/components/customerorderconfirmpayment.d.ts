import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { PaymentProcessor } from "./paymentprocessor.js";
/**
 * Schema to confirm a retry payment using a Stripe confirmation token.
 */
export type CustomerOrderConfirmPayment = {
    /**
     * ID of the Stripe confirmation token.
     */
    confirmationTokenId: string;
    paymentProcessor?: PaymentProcessor | undefined;
};
/** @internal */
export declare const CustomerOrderConfirmPayment$inboundSchema: z.ZodType<CustomerOrderConfirmPayment, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerOrderConfirmPayment$Outbound = {
    confirmation_token_id: string;
    payment_processor?: string | undefined;
};
/** @internal */
export declare const CustomerOrderConfirmPayment$outboundSchema: z.ZodType<CustomerOrderConfirmPayment$Outbound, z.ZodTypeDef, CustomerOrderConfirmPayment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerOrderConfirmPayment$ {
    /** @deprecated use `CustomerOrderConfirmPayment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerOrderConfirmPayment, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerOrderConfirmPayment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerOrderConfirmPayment$Outbound, z.ZodTypeDef, CustomerOrderConfirmPayment>;
    /** @deprecated use `CustomerOrderConfirmPayment$Outbound` instead. */
    type Outbound = CustomerOrderConfirmPayment$Outbound;
}
export declare function customerOrderConfirmPaymentToJSON(customerOrderConfirmPayment: CustomerOrderConfirmPayment): string;
export declare function customerOrderConfirmPaymentFromJSON(jsonString: string): SafeParseResult<CustomerOrderConfirmPayment, SDKValidationError>;
//# sourceMappingURL=customerorderconfirmpayment.d.ts.map