"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BenefitMeterCredit$ = exports.BenefitMeterCredit$outboundSchema = exports.BenefitMeterCredit$inboundSchema = exports.BenefitMeterCreditMetadata$ = exports.BenefitMeterCreditMetadata$outboundSchema = exports.BenefitMeterCreditMetadata$inboundSchema = void 0;
exports.benefitMeterCreditMetadataToJSON = benefitMeterCreditMetadataToJSON;
exports.benefitMeterCreditMetadataFromJSON = benefitMeterCreditMetadataFromJSON;
exports.benefitMeterCreditToJSON = benefitMeterCreditToJSON;
exports.benefitMeterCreditFromJSON = benefitMeterCreditFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const benefitmetercreditproperties_js_1 = require("./benefitmetercreditproperties.js");
/** @internal */
exports.BenefitMeterCreditMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
exports.BenefitMeterCreditMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BenefitMeterCreditMetadata$;
(function (BenefitMeterCreditMetadata$) {
    /** @deprecated use `BenefitMeterCreditMetadata$inboundSchema` instead. */
    BenefitMeterCreditMetadata$.inboundSchema = exports.BenefitMeterCreditMetadata$inboundSchema;
    /** @deprecated use `BenefitMeterCreditMetadata$outboundSchema` instead. */
    BenefitMeterCreditMetadata$.outboundSchema = exports.BenefitMeterCreditMetadata$outboundSchema;
})(BenefitMeterCreditMetadata$ || (exports.BenefitMeterCreditMetadata$ = BenefitMeterCreditMetadata$ = {}));
function benefitMeterCreditMetadataToJSON(benefitMeterCreditMetadata) {
    return JSON.stringify(exports.BenefitMeterCreditMetadata$outboundSchema.parse(benefitMeterCreditMetadata));
}
function benefitMeterCreditMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BenefitMeterCreditMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitMeterCreditMetadata' from JSON`);
}
/** @internal */
exports.BenefitMeterCredit$inboundSchema = z.object({
    id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    type: z.literal("meter_credit"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organization_id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    properties: benefitmetercreditproperties_js_1.BenefitMeterCreditProperties$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
exports.BenefitMeterCredit$outboundSchema = z.object({
    id: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    type: z.literal("meter_credit"),
    description: z.string(),
    selectable: z.boolean(),
    deletable: z.boolean(),
    organizationId: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])),
    properties: benefitmetercreditproperties_js_1.BenefitMeterCreditProperties$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BenefitMeterCredit$;
(function (BenefitMeterCredit$) {
    /** @deprecated use `BenefitMeterCredit$inboundSchema` instead. */
    BenefitMeterCredit$.inboundSchema = exports.BenefitMeterCredit$inboundSchema;
    /** @deprecated use `BenefitMeterCredit$outboundSchema` instead. */
    BenefitMeterCredit$.outboundSchema = exports.BenefitMeterCredit$outboundSchema;
})(BenefitMeterCredit$ || (exports.BenefitMeterCredit$ = BenefitMeterCredit$ = {}));
function benefitMeterCreditToJSON(benefitMeterCredit) {
    return JSON.stringify(exports.BenefitMeterCredit$outboundSchema.parse(benefitMeterCredit));
}
function benefitMeterCreditFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BenefitMeterCredit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BenefitMeterCredit' from JSON`);
}
//# sourceMappingURL=benefitmetercredit.js.map