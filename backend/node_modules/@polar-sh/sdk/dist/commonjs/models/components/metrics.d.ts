import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Metric, Metric$Outbound } from "./metric.js";
export type Metrics = {
    /**
     * Information about a metric.
     */
    orders: Metric;
    /**
     * Information about a metric.
     */
    revenue: Metric;
    /**
     * Information about a metric.
     */
    netRevenue: Metric;
    /**
     * Information about a metric.
     */
    cumulativeRevenue: Metric;
    /**
     * Information about a metric.
     */
    netCumulativeRevenue: Metric;
    /**
     * Information about a metric.
     */
    averageOrderValue: Metric;
    /**
     * Information about a metric.
     */
    netAverageOrderValue: Metric;
    /**
     * Information about a metric.
     */
    oneTimeProducts: Metric;
    /**
     * Information about a metric.
     */
    oneTimeProductsRevenue: Metric;
    /**
     * Information about a metric.
     */
    oneTimeProductsNetRevenue: Metric;
    /**
     * Information about a metric.
     */
    newSubscriptions: Metric;
    /**
     * Information about a metric.
     */
    newSubscriptionsRevenue: Metric;
    /**
     * Information about a metric.
     */
    newSubscriptionsNetRevenue: Metric;
    /**
     * Information about a metric.
     */
    renewedSubscriptions: Metric;
    /**
     * Information about a metric.
     */
    renewedSubscriptionsRevenue: Metric;
    /**
     * Information about a metric.
     */
    renewedSubscriptionsNetRevenue: Metric;
    /**
     * Information about a metric.
     */
    activeSubscriptions: Metric;
    /**
     * Information about a metric.
     */
    monthlyRecurringRevenue: Metric;
    /**
     * Information about a metric.
     */
    committedMonthlyRecurringRevenue: Metric;
    /**
     * Information about a metric.
     */
    checkouts: Metric;
    /**
     * Information about a metric.
     */
    succeededCheckouts: Metric;
    /**
     * Information about a metric.
     */
    checkoutsConversion: Metric;
};
/** @internal */
export declare const Metrics$inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown>;
/** @internal */
export type Metrics$Outbound = {
    orders: Metric$Outbound;
    revenue: Metric$Outbound;
    net_revenue: Metric$Outbound;
    cumulative_revenue: Metric$Outbound;
    net_cumulative_revenue: Metric$Outbound;
    average_order_value: Metric$Outbound;
    net_average_order_value: Metric$Outbound;
    one_time_products: Metric$Outbound;
    one_time_products_revenue: Metric$Outbound;
    one_time_products_net_revenue: Metric$Outbound;
    new_subscriptions: Metric$Outbound;
    new_subscriptions_revenue: Metric$Outbound;
    new_subscriptions_net_revenue: Metric$Outbound;
    renewed_subscriptions: Metric$Outbound;
    renewed_subscriptions_revenue: Metric$Outbound;
    renewed_subscriptions_net_revenue: Metric$Outbound;
    active_subscriptions: Metric$Outbound;
    monthly_recurring_revenue: Metric$Outbound;
    committed_monthly_recurring_revenue: Metric$Outbound;
    checkouts: Metric$Outbound;
    succeeded_checkouts: Metric$Outbound;
    checkouts_conversion: Metric$Outbound;
};
/** @internal */
export declare const Metrics$outboundSchema: z.ZodType<Metrics$Outbound, z.ZodTypeDef, Metrics>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Metrics$ {
    /** @deprecated use `Metrics$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown>;
    /** @deprecated use `Metrics$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Metrics$Outbound, z.ZodTypeDef, Metrics>;
    /** @deprecated use `Metrics$Outbound` instead. */
    type Outbound = Metrics$Outbound;
}
export declare function metricsToJSON(metrics: Metrics): string;
export declare function metricsFromJSON(jsonString: string): SafeParseResult<Metrics, SDKValidationError>;
//# sourceMappingURL=metrics.d.ts.map