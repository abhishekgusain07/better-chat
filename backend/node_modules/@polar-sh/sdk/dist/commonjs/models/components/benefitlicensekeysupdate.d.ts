import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { BenefitLicenseKeysCreateProperties, BenefitLicenseKeysCreateProperties$Outbound } from "./benefitlicensekeyscreateproperties.js";
export type BenefitLicenseKeysUpdateMetadata = string | number | number | boolean;
export type BenefitLicenseKeysUpdate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    /**
     * The description of the benefit. Will be displayed on products having this benefit.
     */
    description?: string | null | undefined;
    type: "license_keys";
    properties?: BenefitLicenseKeysCreateProperties | null | undefined;
};
/** @internal */
export declare const BenefitLicenseKeysUpdateMetadata$inboundSchema: z.ZodType<BenefitLicenseKeysUpdateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitLicenseKeysUpdateMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const BenefitLicenseKeysUpdateMetadata$outboundSchema: z.ZodType<BenefitLicenseKeysUpdateMetadata$Outbound, z.ZodTypeDef, BenefitLicenseKeysUpdateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitLicenseKeysUpdateMetadata$ {
    /** @deprecated use `BenefitLicenseKeysUpdateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitLicenseKeysUpdateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitLicenseKeysUpdateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitLicenseKeysUpdateMetadata$Outbound, z.ZodTypeDef, BenefitLicenseKeysUpdateMetadata>;
    /** @deprecated use `BenefitLicenseKeysUpdateMetadata$Outbound` instead. */
    type Outbound = BenefitLicenseKeysUpdateMetadata$Outbound;
}
export declare function benefitLicenseKeysUpdateMetadataToJSON(benefitLicenseKeysUpdateMetadata: BenefitLicenseKeysUpdateMetadata): string;
export declare function benefitLicenseKeysUpdateMetadataFromJSON(jsonString: string): SafeParseResult<BenefitLicenseKeysUpdateMetadata, SDKValidationError>;
/** @internal */
export declare const BenefitLicenseKeysUpdate$inboundSchema: z.ZodType<BenefitLicenseKeysUpdate, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitLicenseKeysUpdate$Outbound = {
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    description?: string | null | undefined;
    type: "license_keys";
    properties?: BenefitLicenseKeysCreateProperties$Outbound | null | undefined;
};
/** @internal */
export declare const BenefitLicenseKeysUpdate$outboundSchema: z.ZodType<BenefitLicenseKeysUpdate$Outbound, z.ZodTypeDef, BenefitLicenseKeysUpdate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitLicenseKeysUpdate$ {
    /** @deprecated use `BenefitLicenseKeysUpdate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitLicenseKeysUpdate, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitLicenseKeysUpdate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitLicenseKeysUpdate$Outbound, z.ZodTypeDef, BenefitLicenseKeysUpdate>;
    /** @deprecated use `BenefitLicenseKeysUpdate$Outbound` instead. */
    type Outbound = BenefitLicenseKeysUpdate$Outbound;
}
export declare function benefitLicenseKeysUpdateToJSON(benefitLicenseKeysUpdate: BenefitLicenseKeysUpdate): string;
export declare function benefitLicenseKeysUpdateFromJSON(jsonString: string): SafeParseResult<BenefitLicenseKeysUpdate, SDKValidationError>;
//# sourceMappingURL=benefitlicensekeysupdate.d.ts.map