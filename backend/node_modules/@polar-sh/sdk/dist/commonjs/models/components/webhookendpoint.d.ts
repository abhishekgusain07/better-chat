import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { WebhookEventType } from "./webhookeventtype.js";
import { WebhookFormat } from "./webhookformat.js";
/**
 * A webhook endpoint.
 */
export type WebhookEndpoint = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * The URL where the webhook events will be sent.
     */
    url: string;
    format: WebhookFormat;
    /**
     * The secret used to sign the webhook events.
     */
    secret: string;
    /**
     * The organization ID associated with the webhook endpoint.
     */
    organizationId: string;
    /**
     * The events that will trigger the webhook.
     */
    events: Array<WebhookEventType>;
};
/** @internal */
export declare const WebhookEndpoint$inboundSchema: z.ZodType<WebhookEndpoint, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookEndpoint$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    url: string;
    format: string;
    secret: string;
    organization_id: string;
    events: Array<string>;
};
/** @internal */
export declare const WebhookEndpoint$outboundSchema: z.ZodType<WebhookEndpoint$Outbound, z.ZodTypeDef, WebhookEndpoint>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookEndpoint$ {
    /** @deprecated use `WebhookEndpoint$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookEndpoint, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookEndpoint$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookEndpoint$Outbound, z.ZodTypeDef, WebhookEndpoint>;
    /** @deprecated use `WebhookEndpoint$Outbound` instead. */
    type Outbound = WebhookEndpoint$Outbound;
}
export declare function webhookEndpointToJSON(webhookEndpoint: WebhookEndpoint): string;
export declare function webhookEndpointFromJSON(jsonString: string): SafeParseResult<WebhookEndpoint, SDKValidationError>;
//# sourceMappingURL=webhookendpoint.d.ts.map