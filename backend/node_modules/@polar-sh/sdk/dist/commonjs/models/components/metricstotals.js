"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsTotalsActiveSubscriptions$outboundSchema = exports.MetricsTotalsActiveSubscriptions$inboundSchema = exports.MetricsTotalsRenewedSubscriptionsNetRevenue$ = exports.MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema = exports.MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema = exports.MetricsTotalsRenewedSubscriptionsRevenue$ = exports.MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema = exports.MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema = exports.MetricsTotalsRenewedSubscriptions$ = exports.MetricsTotalsRenewedSubscriptions$outboundSchema = exports.MetricsTotalsRenewedSubscriptions$inboundSchema = exports.MetricsTotalsNewSubscriptionsNetRevenue$ = exports.MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema = exports.MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema = exports.MetricsTotalsNewSubscriptionsRevenue$ = exports.MetricsTotalsNewSubscriptionsRevenue$outboundSchema = exports.MetricsTotalsNewSubscriptionsRevenue$inboundSchema = exports.MetricsTotalsNewSubscriptions$ = exports.MetricsTotalsNewSubscriptions$outboundSchema = exports.MetricsTotalsNewSubscriptions$inboundSchema = exports.MetricsTotalsOneTimeProductsNetRevenue$ = exports.MetricsTotalsOneTimeProductsNetRevenue$outboundSchema = exports.MetricsTotalsOneTimeProductsNetRevenue$inboundSchema = exports.MetricsTotalsOneTimeProductsRevenue$ = exports.MetricsTotalsOneTimeProductsRevenue$outboundSchema = exports.MetricsTotalsOneTimeProductsRevenue$inboundSchema = exports.MetricsTotalsOneTimeProducts$ = exports.MetricsTotalsOneTimeProducts$outboundSchema = exports.MetricsTotalsOneTimeProducts$inboundSchema = exports.MetricsTotalsNetAverageOrderValue$ = exports.MetricsTotalsNetAverageOrderValue$outboundSchema = exports.MetricsTotalsNetAverageOrderValue$inboundSchema = exports.MetricsTotalsAverageOrderValue$ = exports.MetricsTotalsAverageOrderValue$outboundSchema = exports.MetricsTotalsAverageOrderValue$inboundSchema = exports.MetricsTotalsNetCumulativeRevenue$ = exports.MetricsTotalsNetCumulativeRevenue$outboundSchema = exports.MetricsTotalsNetCumulativeRevenue$inboundSchema = exports.MetricsTotalsCumulativeRevenue$ = exports.MetricsTotalsCumulativeRevenue$outboundSchema = exports.MetricsTotalsCumulativeRevenue$inboundSchema = exports.MetricsTotalsNetRevenue$ = exports.MetricsTotalsNetRevenue$outboundSchema = exports.MetricsTotalsNetRevenue$inboundSchema = exports.MetricsTotalsRevenue$ = exports.MetricsTotalsRevenue$outboundSchema = exports.MetricsTotalsRevenue$inboundSchema = exports.MetricsTotalsOrders$ = exports.MetricsTotalsOrders$outboundSchema = exports.MetricsTotalsOrders$inboundSchema = void 0;
exports.MetricsTotals$ = exports.MetricsTotals$outboundSchema = exports.MetricsTotals$inboundSchema = exports.MetricsTotalsCheckoutsConversion$ = exports.MetricsTotalsCheckoutsConversion$outboundSchema = exports.MetricsTotalsCheckoutsConversion$inboundSchema = exports.MetricsTotalsSucceededCheckouts$ = exports.MetricsTotalsSucceededCheckouts$outboundSchema = exports.MetricsTotalsSucceededCheckouts$inboundSchema = exports.MetricsTotalsCheckouts$ = exports.MetricsTotalsCheckouts$outboundSchema = exports.MetricsTotalsCheckouts$inboundSchema = exports.MetricsTotalsCommittedMonthlyRecurringRevenue$ = exports.MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema = exports.MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema = exports.MetricsTotalsMonthlyRecurringRevenue$ = exports.MetricsTotalsMonthlyRecurringRevenue$outboundSchema = exports.MetricsTotalsMonthlyRecurringRevenue$inboundSchema = exports.MetricsTotalsActiveSubscriptions$ = void 0;
exports.metricsTotalsOrdersToJSON = metricsTotalsOrdersToJSON;
exports.metricsTotalsOrdersFromJSON = metricsTotalsOrdersFromJSON;
exports.metricsTotalsRevenueToJSON = metricsTotalsRevenueToJSON;
exports.metricsTotalsRevenueFromJSON = metricsTotalsRevenueFromJSON;
exports.metricsTotalsNetRevenueToJSON = metricsTotalsNetRevenueToJSON;
exports.metricsTotalsNetRevenueFromJSON = metricsTotalsNetRevenueFromJSON;
exports.metricsTotalsCumulativeRevenueToJSON = metricsTotalsCumulativeRevenueToJSON;
exports.metricsTotalsCumulativeRevenueFromJSON = metricsTotalsCumulativeRevenueFromJSON;
exports.metricsTotalsNetCumulativeRevenueToJSON = metricsTotalsNetCumulativeRevenueToJSON;
exports.metricsTotalsNetCumulativeRevenueFromJSON = metricsTotalsNetCumulativeRevenueFromJSON;
exports.metricsTotalsAverageOrderValueToJSON = metricsTotalsAverageOrderValueToJSON;
exports.metricsTotalsAverageOrderValueFromJSON = metricsTotalsAverageOrderValueFromJSON;
exports.metricsTotalsNetAverageOrderValueToJSON = metricsTotalsNetAverageOrderValueToJSON;
exports.metricsTotalsNetAverageOrderValueFromJSON = metricsTotalsNetAverageOrderValueFromJSON;
exports.metricsTotalsOneTimeProductsToJSON = metricsTotalsOneTimeProductsToJSON;
exports.metricsTotalsOneTimeProductsFromJSON = metricsTotalsOneTimeProductsFromJSON;
exports.metricsTotalsOneTimeProductsRevenueToJSON = metricsTotalsOneTimeProductsRevenueToJSON;
exports.metricsTotalsOneTimeProductsRevenueFromJSON = metricsTotalsOneTimeProductsRevenueFromJSON;
exports.metricsTotalsOneTimeProductsNetRevenueToJSON = metricsTotalsOneTimeProductsNetRevenueToJSON;
exports.metricsTotalsOneTimeProductsNetRevenueFromJSON = metricsTotalsOneTimeProductsNetRevenueFromJSON;
exports.metricsTotalsNewSubscriptionsToJSON = metricsTotalsNewSubscriptionsToJSON;
exports.metricsTotalsNewSubscriptionsFromJSON = metricsTotalsNewSubscriptionsFromJSON;
exports.metricsTotalsNewSubscriptionsRevenueToJSON = metricsTotalsNewSubscriptionsRevenueToJSON;
exports.metricsTotalsNewSubscriptionsRevenueFromJSON = metricsTotalsNewSubscriptionsRevenueFromJSON;
exports.metricsTotalsNewSubscriptionsNetRevenueToJSON = metricsTotalsNewSubscriptionsNetRevenueToJSON;
exports.metricsTotalsNewSubscriptionsNetRevenueFromJSON = metricsTotalsNewSubscriptionsNetRevenueFromJSON;
exports.metricsTotalsRenewedSubscriptionsToJSON = metricsTotalsRenewedSubscriptionsToJSON;
exports.metricsTotalsRenewedSubscriptionsFromJSON = metricsTotalsRenewedSubscriptionsFromJSON;
exports.metricsTotalsRenewedSubscriptionsRevenueToJSON = metricsTotalsRenewedSubscriptionsRevenueToJSON;
exports.metricsTotalsRenewedSubscriptionsRevenueFromJSON = metricsTotalsRenewedSubscriptionsRevenueFromJSON;
exports.metricsTotalsRenewedSubscriptionsNetRevenueToJSON = metricsTotalsRenewedSubscriptionsNetRevenueToJSON;
exports.metricsTotalsRenewedSubscriptionsNetRevenueFromJSON = metricsTotalsRenewedSubscriptionsNetRevenueFromJSON;
exports.metricsTotalsActiveSubscriptionsToJSON = metricsTotalsActiveSubscriptionsToJSON;
exports.metricsTotalsActiveSubscriptionsFromJSON = metricsTotalsActiveSubscriptionsFromJSON;
exports.metricsTotalsMonthlyRecurringRevenueToJSON = metricsTotalsMonthlyRecurringRevenueToJSON;
exports.metricsTotalsMonthlyRecurringRevenueFromJSON = metricsTotalsMonthlyRecurringRevenueFromJSON;
exports.metricsTotalsCommittedMonthlyRecurringRevenueToJSON = metricsTotalsCommittedMonthlyRecurringRevenueToJSON;
exports.metricsTotalsCommittedMonthlyRecurringRevenueFromJSON = metricsTotalsCommittedMonthlyRecurringRevenueFromJSON;
exports.metricsTotalsCheckoutsToJSON = metricsTotalsCheckoutsToJSON;
exports.metricsTotalsCheckoutsFromJSON = metricsTotalsCheckoutsFromJSON;
exports.metricsTotalsSucceededCheckoutsToJSON = metricsTotalsSucceededCheckoutsToJSON;
exports.metricsTotalsSucceededCheckoutsFromJSON = metricsTotalsSucceededCheckoutsFromJSON;
exports.metricsTotalsCheckoutsConversionToJSON = metricsTotalsCheckoutsConversionToJSON;
exports.metricsTotalsCheckoutsConversionFromJSON = metricsTotalsCheckoutsConversionFromJSON;
exports.metricsTotalsToJSON = metricsTotalsToJSON;
exports.metricsTotalsFromJSON = metricsTotalsFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.MetricsTotalsOrders$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsOrders$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsOrders$;
(function (MetricsTotalsOrders$) {
    /** @deprecated use `MetricsTotalsOrders$inboundSchema` instead. */
    MetricsTotalsOrders$.inboundSchema = exports.MetricsTotalsOrders$inboundSchema;
    /** @deprecated use `MetricsTotalsOrders$outboundSchema` instead. */
    MetricsTotalsOrders$.outboundSchema = exports.MetricsTotalsOrders$outboundSchema;
})(MetricsTotalsOrders$ || (exports.MetricsTotalsOrders$ = MetricsTotalsOrders$ = {}));
function metricsTotalsOrdersToJSON(metricsTotalsOrders) {
    return JSON.stringify(exports.MetricsTotalsOrders$outboundSchema.parse(metricsTotalsOrders));
}
function metricsTotalsOrdersFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsOrders$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsOrders' from JSON`);
}
/** @internal */
exports.MetricsTotalsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsRevenue$;
(function (MetricsTotalsRevenue$) {
    /** @deprecated use `MetricsTotalsRevenue$inboundSchema` instead. */
    MetricsTotalsRevenue$.inboundSchema = exports.MetricsTotalsRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsRevenue$outboundSchema` instead. */
    MetricsTotalsRevenue$.outboundSchema = exports.MetricsTotalsRevenue$outboundSchema;
})(MetricsTotalsRevenue$ || (exports.MetricsTotalsRevenue$ = MetricsTotalsRevenue$ = {}));
function metricsTotalsRevenueToJSON(metricsTotalsRevenue) {
    return JSON.stringify(exports.MetricsTotalsRevenue$outboundSchema.parse(metricsTotalsRevenue));
}
function metricsTotalsRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsNetRevenue$;
(function (MetricsTotalsNetRevenue$) {
    /** @deprecated use `MetricsTotalsNetRevenue$inboundSchema` instead. */
    MetricsTotalsNetRevenue$.inboundSchema = exports.MetricsTotalsNetRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsNetRevenue$outboundSchema` instead. */
    MetricsTotalsNetRevenue$.outboundSchema = exports.MetricsTotalsNetRevenue$outboundSchema;
})(MetricsTotalsNetRevenue$ || (exports.MetricsTotalsNetRevenue$ = MetricsTotalsNetRevenue$ = {}));
function metricsTotalsNetRevenueToJSON(metricsTotalsNetRevenue) {
    return JSON.stringify(exports.MetricsTotalsNetRevenue$outboundSchema.parse(metricsTotalsNetRevenue));
}
function metricsTotalsNetRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNetRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsCumulativeRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsCumulativeRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsCumulativeRevenue$;
(function (MetricsTotalsCumulativeRevenue$) {
    /** @deprecated use `MetricsTotalsCumulativeRevenue$inboundSchema` instead. */
    MetricsTotalsCumulativeRevenue$.inboundSchema = exports.MetricsTotalsCumulativeRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsCumulativeRevenue$outboundSchema` instead. */
    MetricsTotalsCumulativeRevenue$.outboundSchema = exports.MetricsTotalsCumulativeRevenue$outboundSchema;
})(MetricsTotalsCumulativeRevenue$ || (exports.MetricsTotalsCumulativeRevenue$ = MetricsTotalsCumulativeRevenue$ = {}));
function metricsTotalsCumulativeRevenueToJSON(metricsTotalsCumulativeRevenue) {
    return JSON.stringify(exports.MetricsTotalsCumulativeRevenue$outboundSchema.parse(metricsTotalsCumulativeRevenue));
}
function metricsTotalsCumulativeRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsCumulativeRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsCumulativeRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsNetCumulativeRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsNetCumulativeRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsNetCumulativeRevenue$;
(function (MetricsTotalsNetCumulativeRevenue$) {
    /** @deprecated use `MetricsTotalsNetCumulativeRevenue$inboundSchema` instead. */
    MetricsTotalsNetCumulativeRevenue$.inboundSchema = exports.MetricsTotalsNetCumulativeRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsNetCumulativeRevenue$outboundSchema` instead. */
    MetricsTotalsNetCumulativeRevenue$.outboundSchema = exports.MetricsTotalsNetCumulativeRevenue$outboundSchema;
})(MetricsTotalsNetCumulativeRevenue$ || (exports.MetricsTotalsNetCumulativeRevenue$ = MetricsTotalsNetCumulativeRevenue$ = {}));
function metricsTotalsNetCumulativeRevenueToJSON(metricsTotalsNetCumulativeRevenue) {
    return JSON.stringify(exports.MetricsTotalsNetCumulativeRevenue$outboundSchema.parse(metricsTotalsNetCumulativeRevenue));
}
function metricsTotalsNetCumulativeRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsNetCumulativeRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNetCumulativeRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsAverageOrderValue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsAverageOrderValue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsAverageOrderValue$;
(function (MetricsTotalsAverageOrderValue$) {
    /** @deprecated use `MetricsTotalsAverageOrderValue$inboundSchema` instead. */
    MetricsTotalsAverageOrderValue$.inboundSchema = exports.MetricsTotalsAverageOrderValue$inboundSchema;
    /** @deprecated use `MetricsTotalsAverageOrderValue$outboundSchema` instead. */
    MetricsTotalsAverageOrderValue$.outboundSchema = exports.MetricsTotalsAverageOrderValue$outboundSchema;
})(MetricsTotalsAverageOrderValue$ || (exports.MetricsTotalsAverageOrderValue$ = MetricsTotalsAverageOrderValue$ = {}));
function metricsTotalsAverageOrderValueToJSON(metricsTotalsAverageOrderValue) {
    return JSON.stringify(exports.MetricsTotalsAverageOrderValue$outboundSchema.parse(metricsTotalsAverageOrderValue));
}
function metricsTotalsAverageOrderValueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsAverageOrderValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsAverageOrderValue' from JSON`);
}
/** @internal */
exports.MetricsTotalsNetAverageOrderValue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsNetAverageOrderValue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsNetAverageOrderValue$;
(function (MetricsTotalsNetAverageOrderValue$) {
    /** @deprecated use `MetricsTotalsNetAverageOrderValue$inboundSchema` instead. */
    MetricsTotalsNetAverageOrderValue$.inboundSchema = exports.MetricsTotalsNetAverageOrderValue$inboundSchema;
    /** @deprecated use `MetricsTotalsNetAverageOrderValue$outboundSchema` instead. */
    MetricsTotalsNetAverageOrderValue$.outboundSchema = exports.MetricsTotalsNetAverageOrderValue$outboundSchema;
})(MetricsTotalsNetAverageOrderValue$ || (exports.MetricsTotalsNetAverageOrderValue$ = MetricsTotalsNetAverageOrderValue$ = {}));
function metricsTotalsNetAverageOrderValueToJSON(metricsTotalsNetAverageOrderValue) {
    return JSON.stringify(exports.MetricsTotalsNetAverageOrderValue$outboundSchema.parse(metricsTotalsNetAverageOrderValue));
}
function metricsTotalsNetAverageOrderValueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsNetAverageOrderValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNetAverageOrderValue' from JSON`);
}
/** @internal */
exports.MetricsTotalsOneTimeProducts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsOneTimeProducts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsOneTimeProducts$;
(function (MetricsTotalsOneTimeProducts$) {
    /** @deprecated use `MetricsTotalsOneTimeProducts$inboundSchema` instead. */
    MetricsTotalsOneTimeProducts$.inboundSchema = exports.MetricsTotalsOneTimeProducts$inboundSchema;
    /** @deprecated use `MetricsTotalsOneTimeProducts$outboundSchema` instead. */
    MetricsTotalsOneTimeProducts$.outboundSchema = exports.MetricsTotalsOneTimeProducts$outboundSchema;
})(MetricsTotalsOneTimeProducts$ || (exports.MetricsTotalsOneTimeProducts$ = MetricsTotalsOneTimeProducts$ = {}));
function metricsTotalsOneTimeProductsToJSON(metricsTotalsOneTimeProducts) {
    return JSON.stringify(exports.MetricsTotalsOneTimeProducts$outboundSchema.parse(metricsTotalsOneTimeProducts));
}
function metricsTotalsOneTimeProductsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsOneTimeProducts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsOneTimeProducts' from JSON`);
}
/** @internal */
exports.MetricsTotalsOneTimeProductsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsOneTimeProductsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsOneTimeProductsRevenue$;
(function (MetricsTotalsOneTimeProductsRevenue$) {
    /** @deprecated use `MetricsTotalsOneTimeProductsRevenue$inboundSchema` instead. */
    MetricsTotalsOneTimeProductsRevenue$.inboundSchema = exports.MetricsTotalsOneTimeProductsRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsOneTimeProductsRevenue$outboundSchema` instead. */
    MetricsTotalsOneTimeProductsRevenue$.outboundSchema = exports.MetricsTotalsOneTimeProductsRevenue$outboundSchema;
})(MetricsTotalsOneTimeProductsRevenue$ || (exports.MetricsTotalsOneTimeProductsRevenue$ = MetricsTotalsOneTimeProductsRevenue$ = {}));
function metricsTotalsOneTimeProductsRevenueToJSON(metricsTotalsOneTimeProductsRevenue) {
    return JSON.stringify(exports.MetricsTotalsOneTimeProductsRevenue$outboundSchema.parse(metricsTotalsOneTimeProductsRevenue));
}
function metricsTotalsOneTimeProductsRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsOneTimeProductsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsOneTimeProductsRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsOneTimeProductsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsOneTimeProductsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsOneTimeProductsNetRevenue$;
(function (MetricsTotalsOneTimeProductsNetRevenue$) {
    /** @deprecated use `MetricsTotalsOneTimeProductsNetRevenue$inboundSchema` instead. */
    MetricsTotalsOneTimeProductsNetRevenue$.inboundSchema = exports.MetricsTotalsOneTimeProductsNetRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsOneTimeProductsNetRevenue$outboundSchema` instead. */
    MetricsTotalsOneTimeProductsNetRevenue$.outboundSchema = exports.MetricsTotalsOneTimeProductsNetRevenue$outboundSchema;
})(MetricsTotalsOneTimeProductsNetRevenue$ || (exports.MetricsTotalsOneTimeProductsNetRevenue$ = MetricsTotalsOneTimeProductsNetRevenue$ = {}));
function metricsTotalsOneTimeProductsNetRevenueToJSON(metricsTotalsOneTimeProductsNetRevenue) {
    return JSON.stringify(exports.MetricsTotalsOneTimeProductsNetRevenue$outboundSchema.parse(metricsTotalsOneTimeProductsNetRevenue));
}
function metricsTotalsOneTimeProductsNetRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsOneTimeProductsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsOneTimeProductsNetRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsNewSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsNewSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsNewSubscriptions$;
(function (MetricsTotalsNewSubscriptions$) {
    /** @deprecated use `MetricsTotalsNewSubscriptions$inboundSchema` instead. */
    MetricsTotalsNewSubscriptions$.inboundSchema = exports.MetricsTotalsNewSubscriptions$inboundSchema;
    /** @deprecated use `MetricsTotalsNewSubscriptions$outboundSchema` instead. */
    MetricsTotalsNewSubscriptions$.outboundSchema = exports.MetricsTotalsNewSubscriptions$outboundSchema;
})(MetricsTotalsNewSubscriptions$ || (exports.MetricsTotalsNewSubscriptions$ = MetricsTotalsNewSubscriptions$ = {}));
function metricsTotalsNewSubscriptionsToJSON(metricsTotalsNewSubscriptions) {
    return JSON.stringify(exports.MetricsTotalsNewSubscriptions$outboundSchema.parse(metricsTotalsNewSubscriptions));
}
function metricsTotalsNewSubscriptionsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsNewSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNewSubscriptions' from JSON`);
}
/** @internal */
exports.MetricsTotalsNewSubscriptionsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsNewSubscriptionsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsNewSubscriptionsRevenue$;
(function (MetricsTotalsNewSubscriptionsRevenue$) {
    /** @deprecated use `MetricsTotalsNewSubscriptionsRevenue$inboundSchema` instead. */
    MetricsTotalsNewSubscriptionsRevenue$.inboundSchema = exports.MetricsTotalsNewSubscriptionsRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsNewSubscriptionsRevenue$outboundSchema` instead. */
    MetricsTotalsNewSubscriptionsRevenue$.outboundSchema = exports.MetricsTotalsNewSubscriptionsRevenue$outboundSchema;
})(MetricsTotalsNewSubscriptionsRevenue$ || (exports.MetricsTotalsNewSubscriptionsRevenue$ = MetricsTotalsNewSubscriptionsRevenue$ = {}));
function metricsTotalsNewSubscriptionsRevenueToJSON(metricsTotalsNewSubscriptionsRevenue) {
    return JSON.stringify(exports.MetricsTotalsNewSubscriptionsRevenue$outboundSchema.parse(metricsTotalsNewSubscriptionsRevenue));
}
function metricsTotalsNewSubscriptionsRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsNewSubscriptionsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNewSubscriptionsRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsNewSubscriptionsNetRevenue$;
(function (MetricsTotalsNewSubscriptionsNetRevenue$) {
    /** @deprecated use `MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema` instead. */
    MetricsTotalsNewSubscriptionsNetRevenue$.inboundSchema = exports.MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema` instead. */
    MetricsTotalsNewSubscriptionsNetRevenue$.outboundSchema = exports.MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema;
})(MetricsTotalsNewSubscriptionsNetRevenue$ || (exports.MetricsTotalsNewSubscriptionsNetRevenue$ = MetricsTotalsNewSubscriptionsNetRevenue$ = {}));
function metricsTotalsNewSubscriptionsNetRevenueToJSON(metricsTotalsNewSubscriptionsNetRevenue) {
    return JSON.stringify(exports.MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema.parse(metricsTotalsNewSubscriptionsNetRevenue));
}
function metricsTotalsNewSubscriptionsNetRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsNewSubscriptionsNetRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsRenewedSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsRenewedSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsRenewedSubscriptions$;
(function (MetricsTotalsRenewedSubscriptions$) {
    /** @deprecated use `MetricsTotalsRenewedSubscriptions$inboundSchema` instead. */
    MetricsTotalsRenewedSubscriptions$.inboundSchema = exports.MetricsTotalsRenewedSubscriptions$inboundSchema;
    /** @deprecated use `MetricsTotalsRenewedSubscriptions$outboundSchema` instead. */
    MetricsTotalsRenewedSubscriptions$.outboundSchema = exports.MetricsTotalsRenewedSubscriptions$outboundSchema;
})(MetricsTotalsRenewedSubscriptions$ || (exports.MetricsTotalsRenewedSubscriptions$ = MetricsTotalsRenewedSubscriptions$ = {}));
function metricsTotalsRenewedSubscriptionsToJSON(metricsTotalsRenewedSubscriptions) {
    return JSON.stringify(exports.MetricsTotalsRenewedSubscriptions$outboundSchema.parse(metricsTotalsRenewedSubscriptions));
}
function metricsTotalsRenewedSubscriptionsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsRenewedSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsRenewedSubscriptions' from JSON`);
}
/** @internal */
exports.MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsRenewedSubscriptionsRevenue$;
(function (MetricsTotalsRenewedSubscriptionsRevenue$) {
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema` instead. */
    MetricsTotalsRenewedSubscriptionsRevenue$.inboundSchema = exports.MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema` instead. */
    MetricsTotalsRenewedSubscriptionsRevenue$.outboundSchema = exports.MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema;
})(MetricsTotalsRenewedSubscriptionsRevenue$ || (exports.MetricsTotalsRenewedSubscriptionsRevenue$ = MetricsTotalsRenewedSubscriptionsRevenue$ = {}));
function metricsTotalsRenewedSubscriptionsRevenueToJSON(metricsTotalsRenewedSubscriptionsRevenue) {
    return JSON.stringify(exports.MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema.parse(metricsTotalsRenewedSubscriptionsRevenue));
}
function metricsTotalsRenewedSubscriptionsRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsRenewedSubscriptionsRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsRenewedSubscriptionsNetRevenue$;
(function (MetricsTotalsRenewedSubscriptionsNetRevenue$) {
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema` instead. */
    MetricsTotalsRenewedSubscriptionsNetRevenue$.inboundSchema = exports.MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema` instead. */
    MetricsTotalsRenewedSubscriptionsNetRevenue$.outboundSchema = exports.MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema;
})(MetricsTotalsRenewedSubscriptionsNetRevenue$ || (exports.MetricsTotalsRenewedSubscriptionsNetRevenue$ = MetricsTotalsRenewedSubscriptionsNetRevenue$ = {}));
function metricsTotalsRenewedSubscriptionsNetRevenueToJSON(metricsTotalsRenewedSubscriptionsNetRevenue) {
    return JSON.stringify(exports.MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema.parse(metricsTotalsRenewedSubscriptionsNetRevenue));
}
function metricsTotalsRenewedSubscriptionsNetRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsRenewedSubscriptionsNetRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsActiveSubscriptions$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsActiveSubscriptions$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsActiveSubscriptions$;
(function (MetricsTotalsActiveSubscriptions$) {
    /** @deprecated use `MetricsTotalsActiveSubscriptions$inboundSchema` instead. */
    MetricsTotalsActiveSubscriptions$.inboundSchema = exports.MetricsTotalsActiveSubscriptions$inboundSchema;
    /** @deprecated use `MetricsTotalsActiveSubscriptions$outboundSchema` instead. */
    MetricsTotalsActiveSubscriptions$.outboundSchema = exports.MetricsTotalsActiveSubscriptions$outboundSchema;
})(MetricsTotalsActiveSubscriptions$ || (exports.MetricsTotalsActiveSubscriptions$ = MetricsTotalsActiveSubscriptions$ = {}));
function metricsTotalsActiveSubscriptionsToJSON(metricsTotalsActiveSubscriptions) {
    return JSON.stringify(exports.MetricsTotalsActiveSubscriptions$outboundSchema.parse(metricsTotalsActiveSubscriptions));
}
function metricsTotalsActiveSubscriptionsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsActiveSubscriptions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsActiveSubscriptions' from JSON`);
}
/** @internal */
exports.MetricsTotalsMonthlyRecurringRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsMonthlyRecurringRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsMonthlyRecurringRevenue$;
(function (MetricsTotalsMonthlyRecurringRevenue$) {
    /** @deprecated use `MetricsTotalsMonthlyRecurringRevenue$inboundSchema` instead. */
    MetricsTotalsMonthlyRecurringRevenue$.inboundSchema = exports.MetricsTotalsMonthlyRecurringRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsMonthlyRecurringRevenue$outboundSchema` instead. */
    MetricsTotalsMonthlyRecurringRevenue$.outboundSchema = exports.MetricsTotalsMonthlyRecurringRevenue$outboundSchema;
})(MetricsTotalsMonthlyRecurringRevenue$ || (exports.MetricsTotalsMonthlyRecurringRevenue$ = MetricsTotalsMonthlyRecurringRevenue$ = {}));
function metricsTotalsMonthlyRecurringRevenueToJSON(metricsTotalsMonthlyRecurringRevenue) {
    return JSON.stringify(exports.MetricsTotalsMonthlyRecurringRevenue$outboundSchema.parse(metricsTotalsMonthlyRecurringRevenue));
}
function metricsTotalsMonthlyRecurringRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsMonthlyRecurringRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsMonthlyRecurringRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsCommittedMonthlyRecurringRevenue$;
(function (MetricsTotalsCommittedMonthlyRecurringRevenue$) {
    /** @deprecated use `MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema` instead. */
    MetricsTotalsCommittedMonthlyRecurringRevenue$.inboundSchema = exports.MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema;
    /** @deprecated use `MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema` instead. */
    MetricsTotalsCommittedMonthlyRecurringRevenue$.outboundSchema = exports.MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema;
})(MetricsTotalsCommittedMonthlyRecurringRevenue$ || (exports.MetricsTotalsCommittedMonthlyRecurringRevenue$ = MetricsTotalsCommittedMonthlyRecurringRevenue$ = {}));
function metricsTotalsCommittedMonthlyRecurringRevenueToJSON(metricsTotalsCommittedMonthlyRecurringRevenue) {
    return JSON.stringify(exports.MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema.parse(metricsTotalsCommittedMonthlyRecurringRevenue));
}
function metricsTotalsCommittedMonthlyRecurringRevenueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsCommittedMonthlyRecurringRevenue' from JSON`);
}
/** @internal */
exports.MetricsTotalsCheckouts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsCheckouts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsCheckouts$;
(function (MetricsTotalsCheckouts$) {
    /** @deprecated use `MetricsTotalsCheckouts$inboundSchema` instead. */
    MetricsTotalsCheckouts$.inboundSchema = exports.MetricsTotalsCheckouts$inboundSchema;
    /** @deprecated use `MetricsTotalsCheckouts$outboundSchema` instead. */
    MetricsTotalsCheckouts$.outboundSchema = exports.MetricsTotalsCheckouts$outboundSchema;
})(MetricsTotalsCheckouts$ || (exports.MetricsTotalsCheckouts$ = MetricsTotalsCheckouts$ = {}));
function metricsTotalsCheckoutsToJSON(metricsTotalsCheckouts) {
    return JSON.stringify(exports.MetricsTotalsCheckouts$outboundSchema.parse(metricsTotalsCheckouts));
}
function metricsTotalsCheckoutsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsCheckouts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsCheckouts' from JSON`);
}
/** @internal */
exports.MetricsTotalsSucceededCheckouts$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsSucceededCheckouts$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsSucceededCheckouts$;
(function (MetricsTotalsSucceededCheckouts$) {
    /** @deprecated use `MetricsTotalsSucceededCheckouts$inboundSchema` instead. */
    MetricsTotalsSucceededCheckouts$.inboundSchema = exports.MetricsTotalsSucceededCheckouts$inboundSchema;
    /** @deprecated use `MetricsTotalsSucceededCheckouts$outboundSchema` instead. */
    MetricsTotalsSucceededCheckouts$.outboundSchema = exports.MetricsTotalsSucceededCheckouts$outboundSchema;
})(MetricsTotalsSucceededCheckouts$ || (exports.MetricsTotalsSucceededCheckouts$ = MetricsTotalsSucceededCheckouts$ = {}));
function metricsTotalsSucceededCheckoutsToJSON(metricsTotalsSucceededCheckouts) {
    return JSON.stringify(exports.MetricsTotalsSucceededCheckouts$outboundSchema.parse(metricsTotalsSucceededCheckouts));
}
function metricsTotalsSucceededCheckoutsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsSucceededCheckouts$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsSucceededCheckouts' from JSON`);
}
/** @internal */
exports.MetricsTotalsCheckoutsConversion$inboundSchema = z.union([z.number().int(), z.number()]);
/** @internal */
exports.MetricsTotalsCheckoutsConversion$outboundSchema = z.union([z.number().int(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotalsCheckoutsConversion$;
(function (MetricsTotalsCheckoutsConversion$) {
    /** @deprecated use `MetricsTotalsCheckoutsConversion$inboundSchema` instead. */
    MetricsTotalsCheckoutsConversion$.inboundSchema = exports.MetricsTotalsCheckoutsConversion$inboundSchema;
    /** @deprecated use `MetricsTotalsCheckoutsConversion$outboundSchema` instead. */
    MetricsTotalsCheckoutsConversion$.outboundSchema = exports.MetricsTotalsCheckoutsConversion$outboundSchema;
})(MetricsTotalsCheckoutsConversion$ || (exports.MetricsTotalsCheckoutsConversion$ = MetricsTotalsCheckoutsConversion$ = {}));
function metricsTotalsCheckoutsConversionToJSON(metricsTotalsCheckoutsConversion) {
    return JSON.stringify(exports.MetricsTotalsCheckoutsConversion$outboundSchema.parse(metricsTotalsCheckoutsConversion));
}
function metricsTotalsCheckoutsConversionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotalsCheckoutsConversion$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotalsCheckoutsConversion' from JSON`);
}
/** @internal */
exports.MetricsTotals$inboundSchema = z.object({
    orders: z.union([z.number().int(), z.number()]),
    revenue: z.union([z.number().int(), z.number()]),
    net_revenue: z.union([z.number().int(), z.number()]),
    cumulative_revenue: z.union([z.number().int(), z.number()]),
    net_cumulative_revenue: z.union([z.number().int(), z.number()]),
    average_order_value: z.union([z.number().int(), z.number()]),
    net_average_order_value: z.union([z.number().int(), z.number()]),
    one_time_products: z.union([z.number().int(), z.number()]),
    one_time_products_revenue: z.union([z.number().int(), z.number()]),
    one_time_products_net_revenue: z.union([z.number().int(), z.number()]),
    new_subscriptions: z.union([z.number().int(), z.number()]),
    new_subscriptions_revenue: z.union([z.number().int(), z.number()]),
    new_subscriptions_net_revenue: z.union([z.number().int(), z.number()]),
    renewed_subscriptions: z.union([z.number().int(), z.number()]),
    renewed_subscriptions_revenue: z.union([z.number().int(), z.number()]),
    renewed_subscriptions_net_revenue: z.union([z.number().int(), z.number()]),
    active_subscriptions: z.union([z.number().int(), z.number()]),
    monthly_recurring_revenue: z.union([z.number().int(), z.number()]),
    committed_monthly_recurring_revenue: z.union([z.number().int(), z.number()]),
    checkouts: z.union([z.number().int(), z.number()]),
    succeeded_checkouts: z.union([z.number().int(), z.number()]),
    checkouts_conversion: z.union([z.number().int(), z.number()]),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "net_revenue": "netRevenue",
        "cumulative_revenue": "cumulativeRevenue",
        "net_cumulative_revenue": "netCumulativeRevenue",
        "average_order_value": "averageOrderValue",
        "net_average_order_value": "netAverageOrderValue",
        "one_time_products": "oneTimeProducts",
        "one_time_products_revenue": "oneTimeProductsRevenue",
        "one_time_products_net_revenue": "oneTimeProductsNetRevenue",
        "new_subscriptions": "newSubscriptions",
        "new_subscriptions_revenue": "newSubscriptionsRevenue",
        "new_subscriptions_net_revenue": "newSubscriptionsNetRevenue",
        "renewed_subscriptions": "renewedSubscriptions",
        "renewed_subscriptions_revenue": "renewedSubscriptionsRevenue",
        "renewed_subscriptions_net_revenue": "renewedSubscriptionsNetRevenue",
        "active_subscriptions": "activeSubscriptions",
        "monthly_recurring_revenue": "monthlyRecurringRevenue",
        "committed_monthly_recurring_revenue": "committedMonthlyRecurringRevenue",
        "succeeded_checkouts": "succeededCheckouts",
        "checkouts_conversion": "checkoutsConversion",
    });
});
/** @internal */
exports.MetricsTotals$outboundSchema = z.object({
    orders: z.union([z.number().int(), z.number()]),
    revenue: z.union([z.number().int(), z.number()]),
    netRevenue: z.union([z.number().int(), z.number()]),
    cumulativeRevenue: z.union([z.number().int(), z.number()]),
    netCumulativeRevenue: z.union([z.number().int(), z.number()]),
    averageOrderValue: z.union([z.number().int(), z.number()]),
    netAverageOrderValue: z.union([z.number().int(), z.number()]),
    oneTimeProducts: z.union([z.number().int(), z.number()]),
    oneTimeProductsRevenue: z.union([z.number().int(), z.number()]),
    oneTimeProductsNetRevenue: z.union([z.number().int(), z.number()]),
    newSubscriptions: z.union([z.number().int(), z.number()]),
    newSubscriptionsRevenue: z.union([z.number().int(), z.number()]),
    newSubscriptionsNetRevenue: z.union([z.number().int(), z.number()]),
    renewedSubscriptions: z.union([z.number().int(), z.number()]),
    renewedSubscriptionsRevenue: z.union([z.number().int(), z.number()]),
    renewedSubscriptionsNetRevenue: z.union([z.number().int(), z.number()]),
    activeSubscriptions: z.union([z.number().int(), z.number()]),
    monthlyRecurringRevenue: z.union([z.number().int(), z.number()]),
    committedMonthlyRecurringRevenue: z.union([z.number().int(), z.number()]),
    checkouts: z.union([z.number().int(), z.number()]),
    succeededCheckouts: z.union([z.number().int(), z.number()]),
    checkoutsConversion: z.union([z.number().int(), z.number()]),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        netRevenue: "net_revenue",
        cumulativeRevenue: "cumulative_revenue",
        netCumulativeRevenue: "net_cumulative_revenue",
        averageOrderValue: "average_order_value",
        netAverageOrderValue: "net_average_order_value",
        oneTimeProducts: "one_time_products",
        oneTimeProductsRevenue: "one_time_products_revenue",
        oneTimeProductsNetRevenue: "one_time_products_net_revenue",
        newSubscriptions: "new_subscriptions",
        newSubscriptionsRevenue: "new_subscriptions_revenue",
        newSubscriptionsNetRevenue: "new_subscriptions_net_revenue",
        renewedSubscriptions: "renewed_subscriptions",
        renewedSubscriptionsRevenue: "renewed_subscriptions_revenue",
        renewedSubscriptionsNetRevenue: "renewed_subscriptions_net_revenue",
        activeSubscriptions: "active_subscriptions",
        monthlyRecurringRevenue: "monthly_recurring_revenue",
        committedMonthlyRecurringRevenue: "committed_monthly_recurring_revenue",
        succeededCheckouts: "succeeded_checkouts",
        checkoutsConversion: "checkouts_conversion",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var MetricsTotals$;
(function (MetricsTotals$) {
    /** @deprecated use `MetricsTotals$inboundSchema` instead. */
    MetricsTotals$.inboundSchema = exports.MetricsTotals$inboundSchema;
    /** @deprecated use `MetricsTotals$outboundSchema` instead. */
    MetricsTotals$.outboundSchema = exports.MetricsTotals$outboundSchema;
})(MetricsTotals$ || (exports.MetricsTotals$ = MetricsTotals$ = {}));
function metricsTotalsToJSON(metricsTotals) {
    return JSON.stringify(exports.MetricsTotals$outboundSchema.parse(metricsTotals));
}
function metricsTotalsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricsTotals$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricsTotals' from JSON`);
}
//# sourceMappingURL=metricstotals.js.map