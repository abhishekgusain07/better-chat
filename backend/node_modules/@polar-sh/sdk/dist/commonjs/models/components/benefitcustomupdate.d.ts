import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { BenefitCustomProperties, BenefitCustomProperties$Outbound } from "./benefitcustomproperties.js";
export type BenefitCustomUpdateMetadata = string | number | number | boolean;
export type BenefitCustomUpdate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A floating-point number
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    /**
     * The description of the benefit. Will be displayed on products having this benefit.
     */
    description?: string | null | undefined;
    type: "custom";
    properties?: BenefitCustomProperties | null | undefined;
};
/** @internal */
export declare const BenefitCustomUpdateMetadata$inboundSchema: z.ZodType<BenefitCustomUpdateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitCustomUpdateMetadata$Outbound = string | number | number | boolean;
/** @internal */
export declare const BenefitCustomUpdateMetadata$outboundSchema: z.ZodType<BenefitCustomUpdateMetadata$Outbound, z.ZodTypeDef, BenefitCustomUpdateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitCustomUpdateMetadata$ {
    /** @deprecated use `BenefitCustomUpdateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitCustomUpdateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitCustomUpdateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitCustomUpdateMetadata$Outbound, z.ZodTypeDef, BenefitCustomUpdateMetadata>;
    /** @deprecated use `BenefitCustomUpdateMetadata$Outbound` instead. */
    type Outbound = BenefitCustomUpdateMetadata$Outbound;
}
export declare function benefitCustomUpdateMetadataToJSON(benefitCustomUpdateMetadata: BenefitCustomUpdateMetadata): string;
export declare function benefitCustomUpdateMetadataFromJSON(jsonString: string): SafeParseResult<BenefitCustomUpdateMetadata, SDKValidationError>;
/** @internal */
export declare const BenefitCustomUpdate$inboundSchema: z.ZodType<BenefitCustomUpdate, z.ZodTypeDef, unknown>;
/** @internal */
export type BenefitCustomUpdate$Outbound = {
    metadata?: {
        [k: string]: string | number | number | boolean;
    } | undefined;
    description?: string | null | undefined;
    type: "custom";
    properties?: BenefitCustomProperties$Outbound | null | undefined;
};
/** @internal */
export declare const BenefitCustomUpdate$outboundSchema: z.ZodType<BenefitCustomUpdate$Outbound, z.ZodTypeDef, BenefitCustomUpdate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BenefitCustomUpdate$ {
    /** @deprecated use `BenefitCustomUpdate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BenefitCustomUpdate, z.ZodTypeDef, unknown>;
    /** @deprecated use `BenefitCustomUpdate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BenefitCustomUpdate$Outbound, z.ZodTypeDef, BenefitCustomUpdate>;
    /** @deprecated use `BenefitCustomUpdate$Outbound` instead. */
    type Outbound = BenefitCustomUpdate$Outbound;
}
export declare function benefitCustomUpdateToJSON(benefitCustomUpdate: BenefitCustomUpdate): string;
export declare function benefitCustomUpdateFromJSON(jsonString: string): SafeParseResult<BenefitCustomUpdate, SDKValidationError>;
//# sourceMappingURL=benefitcustomupdate.d.ts.map