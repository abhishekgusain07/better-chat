"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckoutCreate$ = exports.CheckoutCreate$outboundSchema = exports.CheckoutCreate$inboundSchema = exports.CheckoutCreateCustomerMetadata$ = exports.CheckoutCreateCustomerMetadata$outboundSchema = exports.CheckoutCreateCustomerMetadata$inboundSchema = exports.CheckoutCreateCustomFieldData$ = exports.CheckoutCreateCustomFieldData$outboundSchema = exports.CheckoutCreateCustomFieldData$inboundSchema = exports.CheckoutCreateMetadata$ = exports.CheckoutCreateMetadata$outboundSchema = exports.CheckoutCreateMetadata$inboundSchema = void 0;
exports.checkoutCreateMetadataToJSON = checkoutCreateMetadataToJSON;
exports.checkoutCreateMetadataFromJSON = checkoutCreateMetadataFromJSON;
exports.checkoutCreateCustomFieldDataToJSON = checkoutCreateCustomFieldDataToJSON;
exports.checkoutCreateCustomFieldDataFromJSON = checkoutCreateCustomFieldDataFromJSON;
exports.checkoutCreateCustomerMetadataToJSON = checkoutCreateCustomerMetadataToJSON;
exports.checkoutCreateCustomerMetadataFromJSON = checkoutCreateCustomerMetadataFromJSON;
exports.checkoutCreateToJSON = checkoutCreateToJSON;
exports.checkoutCreateFromJSON = checkoutCreateFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const address_js_1 = require("./address.js");
/** @internal */
exports.CheckoutCreateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
exports.CheckoutCreateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutCreateMetadata$;
(function (CheckoutCreateMetadata$) {
    /** @deprecated use `CheckoutCreateMetadata$inboundSchema` instead. */
    CheckoutCreateMetadata$.inboundSchema = exports.CheckoutCreateMetadata$inboundSchema;
    /** @deprecated use `CheckoutCreateMetadata$outboundSchema` instead. */
    CheckoutCreateMetadata$.outboundSchema = exports.CheckoutCreateMetadata$outboundSchema;
})(CheckoutCreateMetadata$ || (exports.CheckoutCreateMetadata$ = CheckoutCreateMetadata$ = {}));
function checkoutCreateMetadataToJSON(checkoutCreateMetadata) {
    return JSON.stringify(exports.CheckoutCreateMetadata$outboundSchema.parse(checkoutCreateMetadata));
}
function checkoutCreateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutCreateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutCreateMetadata' from JSON`);
}
/** @internal */
exports.CheckoutCreateCustomFieldData$inboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);
/** @internal */
exports.CheckoutCreateCustomFieldData$outboundSchema = z.union([
    z.string(),
    z.number().int(),
    z.boolean(),
    z.date().transform(v => v.toISOString()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutCreateCustomFieldData$;
(function (CheckoutCreateCustomFieldData$) {
    /** @deprecated use `CheckoutCreateCustomFieldData$inboundSchema` instead. */
    CheckoutCreateCustomFieldData$.inboundSchema = exports.CheckoutCreateCustomFieldData$inboundSchema;
    /** @deprecated use `CheckoutCreateCustomFieldData$outboundSchema` instead. */
    CheckoutCreateCustomFieldData$.outboundSchema = exports.CheckoutCreateCustomFieldData$outboundSchema;
})(CheckoutCreateCustomFieldData$ || (exports.CheckoutCreateCustomFieldData$ = CheckoutCreateCustomFieldData$ = {}));
function checkoutCreateCustomFieldDataToJSON(checkoutCreateCustomFieldData) {
    return JSON.stringify(exports.CheckoutCreateCustomFieldData$outboundSchema.parse(checkoutCreateCustomFieldData));
}
function checkoutCreateCustomFieldDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutCreateCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutCreateCustomFieldData' from JSON`);
}
/** @internal */
exports.CheckoutCreateCustomerMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/** @internal */
exports.CheckoutCreateCustomerMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutCreateCustomerMetadata$;
(function (CheckoutCreateCustomerMetadata$) {
    /** @deprecated use `CheckoutCreateCustomerMetadata$inboundSchema` instead. */
    CheckoutCreateCustomerMetadata$.inboundSchema = exports.CheckoutCreateCustomerMetadata$inboundSchema;
    /** @deprecated use `CheckoutCreateCustomerMetadata$outboundSchema` instead. */
    CheckoutCreateCustomerMetadata$.outboundSchema = exports.CheckoutCreateCustomerMetadata$outboundSchema;
})(CheckoutCreateCustomerMetadata$ || (exports.CheckoutCreateCustomerMetadata$ = CheckoutCreateCustomerMetadata$ = {}));
function checkoutCreateCustomerMetadataToJSON(checkoutCreateCustomerMetadata) {
    return JSON.stringify(exports.CheckoutCreateCustomerMetadata$outboundSchema.parse(checkoutCreateCustomerMetadata));
}
function checkoutCreateCustomerMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutCreateCustomerMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutCreateCustomerMetadata' from JSON`);
}
/** @internal */
exports.CheckoutCreate$inboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    custom_field_data: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ]))).optional(),
    discount_id: z.nullable(z.string()).optional(),
    allow_discount_codes: z.boolean().default(true),
    require_billing_address: z.boolean().default(false),
    amount: z.nullable(z.number().int()).optional(),
    customer_id: z.nullable(z.string()).optional(),
    is_business_customer: z.boolean().default(false),
    external_customer_id: z.nullable(z.string()).optional(),
    customer_name: z.nullable(z.string()).optional(),
    customer_email: z.nullable(z.string()).optional(),
    customer_ip_address: z.nullable(z.string()).optional(),
    customer_billing_name: z.nullable(z.string()).optional(),
    customer_billing_address: z.nullable(address_js_1.Address$inboundSchema).optional(),
    customer_tax_id: z.nullable(z.string()).optional(),
    customer_metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    subscription_id: z.nullable(z.string()).optional(),
    success_url: z.nullable(z.string()).optional(),
    embed_origin: z.nullable(z.string()).optional(),
    products: z.array(z.string()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "custom_field_data": "customFieldData",
        "discount_id": "discountId",
        "allow_discount_codes": "allowDiscountCodes",
        "require_billing_address": "requireBillingAddress",
        "customer_id": "customerId",
        "is_business_customer": "isBusinessCustomer",
        "external_customer_id": "externalCustomerId",
        "customer_name": "customerName",
        "customer_email": "customerEmail",
        "customer_ip_address": "customerIpAddress",
        "customer_billing_name": "customerBillingName",
        "customer_billing_address": "customerBillingAddress",
        "customer_tax_id": "customerTaxId",
        "customer_metadata": "customerMetadata",
        "subscription_id": "subscriptionId",
        "success_url": "successUrl",
        "embed_origin": "embedOrigin",
    });
});
/** @internal */
exports.CheckoutCreate$outboundSchema = z.object({
    metadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    customFieldData: z.record(z.nullable(z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
    ]))).optional(),
    discountId: z.nullable(z.string()).optional(),
    allowDiscountCodes: z.boolean().default(true),
    requireBillingAddress: z.boolean().default(false),
    amount: z.nullable(z.number().int()).optional(),
    customerId: z.nullable(z.string()).optional(),
    isBusinessCustomer: z.boolean().default(false),
    externalCustomerId: z.nullable(z.string()).optional(),
    customerName: z.nullable(z.string()).optional(),
    customerEmail: z.nullable(z.string()).optional(),
    customerIpAddress: z.nullable(z.string()).optional(),
    customerBillingName: z.nullable(z.string()).optional(),
    customerBillingAddress: z.nullable(address_js_1.Address$outboundSchema).optional(),
    customerTaxId: z.nullable(z.string()).optional(),
    customerMetadata: z.record(z.union([z.string(), z.number().int(), z.number(), z.boolean()])).optional(),
    subscriptionId: z.nullable(z.string()).optional(),
    successUrl: z.nullable(z.string()).optional(),
    embedOrigin: z.nullable(z.string()).optional(),
    products: z.array(z.string()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        customFieldData: "custom_field_data",
        discountId: "discount_id",
        allowDiscountCodes: "allow_discount_codes",
        requireBillingAddress: "require_billing_address",
        customerId: "customer_id",
        isBusinessCustomer: "is_business_customer",
        externalCustomerId: "external_customer_id",
        customerName: "customer_name",
        customerEmail: "customer_email",
        customerIpAddress: "customer_ip_address",
        customerBillingName: "customer_billing_name",
        customerBillingAddress: "customer_billing_address",
        customerTaxId: "customer_tax_id",
        customerMetadata: "customer_metadata",
        subscriptionId: "subscription_id",
        successUrl: "success_url",
        embedOrigin: "embed_origin",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CheckoutCreate$;
(function (CheckoutCreate$) {
    /** @deprecated use `CheckoutCreate$inboundSchema` instead. */
    CheckoutCreate$.inboundSchema = exports.CheckoutCreate$inboundSchema;
    /** @deprecated use `CheckoutCreate$outboundSchema` instead. */
    CheckoutCreate$.outboundSchema = exports.CheckoutCreate$outboundSchema;
})(CheckoutCreate$ || (exports.CheckoutCreate$ = CheckoutCreate$ = {}));
function checkoutCreateToJSON(checkoutCreate) {
    return JSON.stringify(exports.CheckoutCreate$outboundSchema.parse(checkoutCreate));
}
function checkoutCreateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckoutCreate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutCreate' from JSON`);
}
//# sourceMappingURL=checkoutcreate.js.map