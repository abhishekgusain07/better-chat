import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Customer, Customer$Outbound } from "./customer.js";
import { MeterCreditedMetadata, MeterCreditedMetadata$Outbound } from "./metercreditedmetadata.js";
/**
 * An event created by Polar when credits are added to a customer meter.
 */
export type MeterCreditEvent = {
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * The timestamp of the event.
     */
    timestamp: Date;
    /**
     * The ID of the organization owning the event.
     */
    organizationId: string;
    /**
     * ID of the customer in your Polar organization associated with the event.
     */
    customerId: string | null;
    /**
     * The customer associated with the event.
     */
    customer: Customer | null;
    /**
     * ID of the customer in your system associated with the event.
     */
    externalCustomerId: string | null;
    /**
     * The source of the event. `system` events are created by Polar. `user` events are the one you create through our ingestion API.
     */
    source: "system";
    /**
     * The name of the event.
     */
    name: "meter.credited";
    metadata: MeterCreditedMetadata;
};
/** @internal */
export declare const MeterCreditEvent$inboundSchema: z.ZodType<MeterCreditEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type MeterCreditEvent$Outbound = {
    id: string;
    timestamp: string;
    organization_id: string;
    customer_id: string | null;
    customer: Customer$Outbound | null;
    external_customer_id: string | null;
    source: "system";
    name: "meter.credited";
    metadata: MeterCreditedMetadata$Outbound;
};
/** @internal */
export declare const MeterCreditEvent$outboundSchema: z.ZodType<MeterCreditEvent$Outbound, z.ZodTypeDef, MeterCreditEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MeterCreditEvent$ {
    /** @deprecated use `MeterCreditEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MeterCreditEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `MeterCreditEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MeterCreditEvent$Outbound, z.ZodTypeDef, MeterCreditEvent>;
    /** @deprecated use `MeterCreditEvent$Outbound` instead. */
    type Outbound = MeterCreditEvent$Outbound;
}
export declare function meterCreditEventToJSON(meterCreditEvent: MeterCreditEvent): string;
export declare function meterCreditEventFromJSON(jsonString: string): SafeParseResult<MeterCreditEvent, SDKValidationError>;
//# sourceMappingURL=metercreditevent.d.ts.map