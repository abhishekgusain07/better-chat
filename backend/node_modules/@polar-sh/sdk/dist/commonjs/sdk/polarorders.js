"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolarOrders = void 0;
const customerPortalOrdersConfirmRetryPayment_js_1 = require("../funcs/customerPortalOrdersConfirmRetryPayment.js");
const customerPortalOrdersGenerateInvoice_js_1 = require("../funcs/customerPortalOrdersGenerateInvoice.js");
const customerPortalOrdersGet_js_1 = require("../funcs/customerPortalOrdersGet.js");
const customerPortalOrdersGetPaymentStatus_js_1 = require("../funcs/customerPortalOrdersGetPaymentStatus.js");
const customerPortalOrdersInvoice_js_1 = require("../funcs/customerPortalOrdersInvoice.js");
const customerPortalOrdersList_js_1 = require("../funcs/customerPortalOrdersList.js");
const customerPortalOrdersUpdate_js_1 = require("../funcs/customerPortalOrdersUpdate.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
const operations_js_1 = require("../types/operations.js");
class PolarOrders extends sdks_js_1.ClientSDK {
    /**
     * List Orders
     *
     * @remarks
     * List orders of the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async list(security, request, options) {
        return (0, operations_js_1.unwrapResultIterator)((0, customerPortalOrdersList_js_1.customerPortalOrdersList)(this, security, request, options));
    }
    /**
     * Get Order
     *
     * @remarks
     * Get an order by ID for the authenticated customer.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async get(security, request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customerPortalOrdersGet_js_1.customerPortalOrdersGet)(this, security, request, options));
    }
    /**
     * Update Order
     *
     * @remarks
     * Update an order for the authenticated customer.
     *
     * **Scopes**: `customer_portal:write`
     */
    async update(security, request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customerPortalOrdersUpdate_js_1.customerPortalOrdersUpdate)(this, security, request, options));
    }
    /**
     * Generate Order Invoice
     *
     * @remarks
     * Trigger generation of an order's invoice.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async generateInvoice(security, request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customerPortalOrdersGenerateInvoice_js_1.customerPortalOrdersGenerateInvoice)(this, security, request, options));
    }
    /**
     * Get Order Invoice
     *
     * @remarks
     * Get an order's invoice data.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async invoice(security, request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customerPortalOrdersInvoice_js_1.customerPortalOrdersInvoice)(this, security, request, options));
    }
    /**
     * Get Order Payment Status
     *
     * @remarks
     * Get the current payment status for an order.
     *
     * **Scopes**: `customer_portal:read` `customer_portal:write`
     */
    async getPaymentStatus(security, request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customerPortalOrdersGetPaymentStatus_js_1.customerPortalOrdersGetPaymentStatus)(this, security, request, options));
    }
    /**
     * Confirm Retry Payment
     *
     * @remarks
     * Confirm a retry payment using a Stripe confirmation token.
     *
     * **Scopes**: `customer_portal:write`
     */
    async confirmRetryPayment(security, request, options) {
        return (0, fp_js_1.unwrapAsync)((0, customerPortalOrdersConfirmRetryPayment_js_1.customerPortalOrdersConfirmRetryPayment)(this, security, request, options));
    }
}
exports.PolarOrders = PolarOrders;
//# sourceMappingURL=polarorders.js.map