import { PolarCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { CustomerPortalOrdersGenerateInvoiceResponse422CustomerPortalOrdersGenerateInvoice } from "../models/errors/customerportalordersgenerateinvoice.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import { InvoiceAlreadyExists } from "../models/errors/invoicealreadyexists.js";
import { PolarError } from "../models/errors/polarerror.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { CustomerPortalOrdersGenerateInvoiceRequest, CustomerPortalOrdersGenerateInvoiceSecurity } from "../models/operations/customerportalordersgenerateinvoice.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
/**
 * Generate Order Invoice
 *
 * @remarks
 * Trigger generation of an order's invoice.
 *
 * **Scopes**: `customer_portal:read` `customer_portal:write`
 */
export declare function customerPortalOrdersGenerateInvoice(client: PolarCore, security: CustomerPortalOrdersGenerateInvoiceSecurity, request: CustomerPortalOrdersGenerateInvoiceRequest, options?: RequestOptions): APIPromise<Result<any, InvoiceAlreadyExists | CustomerPortalOrdersGenerateInvoiceResponse422CustomerPortalOrdersGenerateInvoice | PolarError | ResponseValidationError | ConnectionError | RequestAbortedError | RequestTimeoutError | InvalidRequestError | UnexpectedClientError | SDKValidationError>>;
//# sourceMappingURL=customerPortalOrdersGenerateInvoice.d.ts.map