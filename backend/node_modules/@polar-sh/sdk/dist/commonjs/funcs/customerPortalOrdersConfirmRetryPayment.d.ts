import { PolarCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { CustomerOrderPaymentConfirmation } from "../models/components/customerorderpaymentconfirmation.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import { OrderNotEligibleForRetry } from "../models/errors/ordernoteligibleforretry.js";
import { PaymentAlreadyInProgress } from "../models/errors/paymentalreadyinprogress.js";
import { PolarError } from "../models/errors/polarerror.js";
import { ResourceNotFound } from "../models/errors/resourcenotfound.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { CustomerPortalOrdersConfirmRetryPaymentRequest, CustomerPortalOrdersConfirmRetryPaymentSecurity } from "../models/operations/customerportalordersconfirmretrypayment.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
/**
 * Confirm Retry Payment
 *
 * @remarks
 * Confirm a retry payment using a Stripe confirmation token.
 *
 * **Scopes**: `customer_portal:write`
 */
export declare function customerPortalOrdersConfirmRetryPayment(client: PolarCore, security: CustomerPortalOrdersConfirmRetryPaymentSecurity, request: CustomerPortalOrdersConfirmRetryPaymentRequest, options?: RequestOptions): APIPromise<Result<CustomerOrderPaymentConfirmation, ResourceNotFound | PaymentAlreadyInProgress | OrderNotEligibleForRetry | PolarError | ResponseValidationError | ConnectionError | RequestAbortedError | RequestTimeoutError | InvalidRequestError | UnexpectedClientError | SDKValidationError>>;
//# sourceMappingURL=customerPortalOrdersConfirmRetryPayment.d.ts.map