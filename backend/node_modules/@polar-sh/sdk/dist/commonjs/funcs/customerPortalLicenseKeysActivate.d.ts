import { PolarCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { LicenseKeyActivate } from "../models/components/licensekeyactivate.js";
import { LicenseKeyActivationRead } from "../models/components/licensekeyactivationread.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import { HTTPValidationError } from "../models/errors/httpvalidationerror.js";
import { NotPermitted } from "../models/errors/notpermitted.js";
import { PolarError } from "../models/errors/polarerror.js";
import { ResourceNotFound } from "../models/errors/resourcenotfound.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
/**
 * Activate License Key
 *
 * @remarks
 * Activate a license key instance.
 *
 * > This endpoint doesn't require authentication and can be safely used on a public
 * > client, like a desktop application or a mobile app.
 * > If you plan to validate a license key on a server, use the `/v1/license-keys/activate`
 * > endpoint instead.
 */
export declare function customerPortalLicenseKeysActivate(client: PolarCore, request: LicenseKeyActivate, options?: RequestOptions): APIPromise<Result<LicenseKeyActivationRead, NotPermitted | ResourceNotFound | HTTPValidationError | PolarError | ResponseValidationError | ConnectionError | RequestAbortedError | RequestTimeoutError | InvalidRequestError | UnexpectedClientError | SDKValidationError>>;
//# sourceMappingURL=customerPortalLicenseKeysActivate.d.ts.map