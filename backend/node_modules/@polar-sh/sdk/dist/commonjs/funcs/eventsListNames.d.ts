import { PolarCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import { HTTPValidationError } from "../models/errors/httpvalidationerror.js";
import { PolarError } from "../models/errors/polarerror.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { EventsListNamesRequest, EventsListNamesResponse } from "../models/operations/eventslistnames.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
import { PageIterator } from "../types/operations.js";
/**
 * List Event Names
 *
 * @remarks
 * List event names.
 *
 * **Scopes**: `events:read` `events:write`
 */
export declare function eventsListNames(client: PolarCore, request: EventsListNamesRequest, options?: RequestOptions): APIPromise<PageIterator<Result<EventsListNamesResponse, HTTPValidationError | PolarError | ResponseValidationError | ConnectionError | RequestAbortedError | RequestTimeoutError | InvalidRequestError | UnexpectedClientError | SDKValidationError>, {
    page: number;
}>>;
//# sourceMappingURL=eventsListNames.d.ts.map