import { PolarCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import { InvoiceAlreadyExists } from "../models/errors/invoicealreadyexists.js";
import { OrdersGenerateInvoiceResponse422OrdersGenerateInvoice } from "../models/errors/ordersgenerateinvoice.js";
import { PolarError } from "../models/errors/polarerror.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { OrdersGenerateInvoiceRequest } from "../models/operations/ordersgenerateinvoice.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
/**
 * Generate Order Invoice
 *
 * @remarks
 * Trigger generation of an order's invoice.
 *
 * **Scopes**: `orders:read`
 */
export declare function ordersGenerateInvoice(client: PolarCore, request: OrdersGenerateInvoiceRequest, options?: RequestOptions): APIPromise<Result<any, InvoiceAlreadyExists | OrdersGenerateInvoiceResponse422OrdersGenerateInvoice | PolarError | ResponseValidationError | ConnectionError | RequestAbortedError | RequestTimeoutError | InvalidRequestError | UnexpectedClientError | SDKValidationError>>;
//# sourceMappingURL=ordersGenerateInvoice.d.ts.map